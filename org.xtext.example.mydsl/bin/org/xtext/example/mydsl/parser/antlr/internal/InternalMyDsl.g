/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsExpressionParserRuleCall_0());
			}
			lv_elements_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.mydsl.MyDsl.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getUnaryexprParserRuleCall_0());
		}
		this_unaryexpr_0=ruleunaryexpr
		{
			$current = $this_unaryexpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpressionauxExpressionauxParserRuleCall_1_0());
				}
				lv_expressionaux_1_0=ruleexpressionaux
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"expressionaux",
						lv_expressionaux_1_0,
						"org.xtext.example.mydsl.MyDsl.expressionaux");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpressionaux
entryRuleexpressionaux returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionauxRule()); }
	iv_ruleexpressionaux=ruleexpressionaux
	{ $current=$iv_ruleexpressionaux.current; }
	EOF;

// Rule expressionaux
ruleexpressionaux returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_BINARY_OP_0=RULE_BINARY_OP
			{
				newLeafNode(this_BINARY_OP_0, grammarAccess.getExpressionauxAccess().getBINARY_OPTerminalRuleCall_0_0());
			}
			{
				newCompositeNode(grammarAccess.getExpressionauxAccess().getExpressionParserRuleCall_0_1());
			}
			this_expression_1=ruleexpression
			{
				$current = $this_expression_1.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionauxAccess().getExpressionauxExpressionauxParserRuleCall_0_2_0());
					}
					lv_expressionaux_2_0=ruleexpressionaux
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionauxRule());
						}
						add(
							$current,
							"expressionaux",
							lv_expressionaux_2_0,
							"org.xtext.example.mydsl.MyDsl.expressionaux");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionauxAccess().getExperssionauxAction_1_0(),
						$current);
				}
			)
			this_ANY_OTHER_4=RULE_ANY_OTHER
			{
				newLeafNode(this_ANY_OTHER_4, grammarAccess.getExpressionauxAccess().getANY_OTHERTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleunaryexpr
entryRuleunaryexpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryexprRule()); }
	iv_ruleunaryexpr=ruleunaryexpr
	{ $current=$iv_ruleunaryexpr.current; }
	EOF;

// Rule unaryexpr
ruleunaryexpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryexprAccess().getPrimaryexprPrimaryexprParserRuleCall_0_0());
				}
				lv_primaryexpr_0_0=ruleprimaryexpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryexprRule());
					}
					set(
						$current,
						"primaryexpr",
						lv_primaryexpr_0_0,
						"org.xtext.example.mydsl.MyDsl.primaryexpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			this_UNARY_OP_1=RULE_UNARY_OP
			{
				newLeafNode(this_UNARY_OP_1, grammarAccess.getUnaryexprAccess().getUNARY_OPTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getUnaryexprAccess().getUnaryexprParserRuleCall_1_1());
			}
			this_unaryexpr_2=ruleunaryexpr
			{
				$current = $this_unaryexpr_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprimaryexpr
entryRuleprimaryexpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryexprRule()); }
	iv_ruleprimaryexpr=ruleprimaryexpr
	{ $current=$iv_ruleprimaryexpr.current; }
	EOF;

// Rule primaryexpr
ruleprimaryexpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPrimaryexprAccess().getOperandParserRuleCall_0_0());
			}
			this_operand_0=ruleoperand
			{
				$current = $this_operand_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryexprAccess().getPrimaryexprauxPrimaryexprauxParserRuleCall_0_1_0());
					}
					lv_primaryexpraux_1_0=ruleprimaryexpraux
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryexprRule());
						}
						set(
							$current,
							"primaryexpraux",
							lv_primaryexpraux_1_0,
							"org.xtext.example.mydsl.MyDsl.primaryexpraux");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryexprAccess().getConversionParserRuleCall_1_0());
			}
			this_conversion_2=ruleconversion
			{
				$current = $this_conversion_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryexprAccess().getPrimaryexprauxPrimaryexprauxParserRuleCall_1_1_0());
					}
					lv_primaryexpraux_3_0=ruleprimaryexpraux
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryexprRule());
						}
						set(
							$current,
							"primaryexpraux",
							lv_primaryexpraux_3_0,
							"org.xtext.example.mydsl.MyDsl.primaryexpraux");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryexprAccess().getMethodexprParserRuleCall_2_0());
			}
			rulemethodexpr
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryexprAccess().getPrimaryexprauxParserRuleCall_2_1());
			}
			this_primaryexpraux_5=ruleprimaryexpraux
			{
				$current = $this_primaryexpraux_5.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprimaryexpraux
entryRuleprimaryexpraux returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryexprauxRule()); }
	iv_ruleprimaryexpraux=ruleprimaryexpraux
	{ $current=$iv_ruleprimaryexpraux.current; }
	EOF;

// Rule primaryexpraux
ruleprimaryexpraux returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getSelectorParserRuleCall_0_0());
			}
			ruleselector
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getPrimaryexprauxParserRuleCall_0_1());
			}
			this_primaryexpraux_1=ruleprimaryexpraux
			{
				$current = $this_primaryexpraux_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getIndexParserRuleCall_1_0());
			}
			this_index_2=ruleindex
			{
				$current = $this_index_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getPrimaryexprauxPrimaryexprauxParserRuleCall_1_1_0());
					}
					lv_primaryexpraux_3_0=ruleprimaryexpraux
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryexprauxRule());
						}
						set(
							$current,
							"primaryexpraux",
							lv_primaryexpraux_3_0,
							"org.xtext.example.mydsl.MyDsl.primaryexpraux");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getSliceParserRuleCall_2_0());
			}
			this_slice_4=ruleslice
			{
				$current = $this_slice_4.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0());
					}
					lv_primaryexpraux_5_0=ruleprimaryexpraux
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryexprauxRule());
						}
						set(
							$current,
							"primaryexpraux",
							lv_primaryexpraux_5_0,
							"org.xtext.example.mydsl.MyDsl.primaryexpraux");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getTypeassertionParserRuleCall_3_0());
			}
			ruletypeassertion
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getPrimaryexprauxParserRuleCall_3_1());
			}
			this_primaryexpraux_7=ruleprimaryexpraux
			{
				$current = $this_primaryexpraux_7.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getArgumentsParserRuleCall_4_0());
			}
			this_arguments_8=rulearguments
			{
				$current = $this_arguments_8.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryexprauxAccess().getPrimaryexprauxPrimaryexprauxParserRuleCall_4_1_0());
					}
					lv_primaryexpraux_9_0=ruleprimaryexpraux
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryexprauxRule());
						}
						set(
							$current,
							"primaryexpraux",
							lv_primaryexpraux_9_0,
							"org.xtext.example.mydsl.MyDsl.primaryexpraux");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryexprauxAccess().getPrimaryexprauxAction_5_0(),
						$current);
				}
			)
			this_ANY_OTHER_11=RULE_ANY_OTHER
			{
				newLeafNode(this_ANY_OTHER_11, grammarAccess.getPrimaryexprauxAccess().getANY_OTHERTerminalRuleCall_5_1());
			}
		)
	)
;

// Entry rule entryRuleindex
entryRuleindex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	iv_ruleindex=ruleindex
	{ $current=$iv_ruleindex.current; }
	EOF;

// Rule index
ruleindex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getIndexAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIndexAccess().getExpressionParserRuleCall_1());
		}
		this_expression_1=ruleexpression
		{
			$current = $this_expression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getIndexAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleslice
entryRuleslice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSliceRule()); }
	iv_ruleslice=ruleslice
	{ $current=$iv_ruleslice.current; }
	EOF;

// Rule slice
ruleslice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSliceAccess().getSliceAction_0_0(),
						$current);
				}
			)
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getSliceAccess().getLeftSquareBracketKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_0_2_0());
					}
					lv_expression_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSliceRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.xtext.example.mydsl.MyDsl.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getSliceAccess().getColonKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_0_4_0());
					}
					lv_expression_4_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSliceRule());
						}
						add(
							$current,
							"expression",
							lv_expression_4_0,
							"org.xtext.example.mydsl.MyDsl.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getSliceAccess().getRightSquareBracketKeyword_0_5());
			}
		)
		    |
		(
			otherlv_6='['
			{
				newLeafNode(otherlv_6, grammarAccess.getSliceAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1());
				}
				this_expression_7=ruleexpression
				{
					$current = $this_expression_7.current;
					afterParserOrEnumRuleCall();
				}
			)?
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getSliceAccess().getColonKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_1_3_0());
					}
					lv_expression_9_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSliceRule());
						}
						add(
							$current,
							"expression",
							lv_expression_9_0,
							"org.xtext.example.mydsl.MyDsl.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10=':'
			{
				newLeafNode(otherlv_10, grammarAccess.getSliceAccess().getColonKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_1_5_0());
					}
					lv_expression_11_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSliceRule());
						}
						add(
							$current,
							"expression",
							lv_expression_11_0,
							"org.xtext.example.mydsl.MyDsl.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12=']'
			{
				newLeafNode(otherlv_12, grammarAccess.getSliceAccess().getRightSquareBracketKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRulemethodexpr
entryRulemethodexpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodexprRule()); }
	iv_rulemethodexpr=rulemethodexpr
	{ $current=$iv_rulemethodexpr.current.getText(); }
	EOF;

// Rule methodexpr
rulemethodexpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMethodexprAccess().getReceivertypeParserRuleCall_0());
		}
		this_receivertype_0=rulereceivertype
		{
			$current.merge(this_receivertype_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMethodexprAccess().getFullStopKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getMethodexprAccess().getMethodnameParserRuleCall_2());
		}
		this_methodname_2=rulemethodname
		{
			$current.merge(this_methodname_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulereceivertype
entryRulereceivertype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReceivertypeRule()); }
	iv_rulereceivertype=rulereceivertype
	{ $current=$iv_rulereceivertype.current.getText(); }
	EOF;

// Rule receivertype
rulereceivertype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getReceivertypeAccess().getTypeParserRuleCall());
	}
	this_type_0=ruletype
	{
		$current.merge(this_type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleconversion
entryRuleconversion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConversionRule()); }
	iv_ruleconversion=ruleconversion
	{ $current=$iv_ruleconversion.current; }
	EOF;

// Rule conversion
ruleconversion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConversionAccess().getTypeParserRuleCall_0());
		}
		ruletype
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConversionAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getConversionAccess().getExpressionParserRuleCall_2());
		}
		this_expression_2=ruleexpression
		{
			$current = $this_expression_2.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getConversionAccess().getCommaKeyword_3());
			}
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getConversionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleoperand
entryRuleoperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleoperand=ruleoperand
	{ $current=$iv_ruleoperand.current; }
	EOF;

// Rule operand
ruleoperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOperandAccess().getOperandAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getOperandAccess().getLiteralParserRuleCall_0_1());
			}
			ruleliteral
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOperandAccess().getOperandAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getOperandAccess().getOperandnameParserRuleCall_1_1());
			}
			ruleoperandname
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getOperandAccess().getExpressionParserRuleCall_2_1());
			}
			this_expression_5=ruleexpression
			{
				$current = $this_expression_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getOperandAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleliteraltype
entryRuleliteraltype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteraltypeRule()); }
	iv_ruleliteraltype=ruleliteraltype
	{ $current=$iv_ruleliteraltype.current.getText(); }
	EOF;

// Rule literaltype
ruleliteraltype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteraltypeAccess().getStructtypeParserRuleCall_0());
		}
		this_structtype_0=rulestructtype
		{
			$current.merge(this_structtype_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteraltypeAccess().getLeftSquareBracketKeyword_1_0());
			}
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteraltypeAccess().getFullStopFullStopFullStopKeyword_1_1());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteraltypeAccess().getRightSquareBracketKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getLiteraltypeAccess().getElementtypeParserRuleCall_1_3());
			}
			this_elementtype_4=ruleelementtype
			{
				$current.merge(this_elementtype_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getLiteraltypeAccess().getSlicetypeParserRuleCall_2());
		}
		this_slicetype_5=ruleslicetype
		{
			$current.merge(this_slicetype_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteraltypeAccess().getMaptypeParserRuleCall_3());
		}
		this_maptype_6=rulemaptype
		{
			$current.merge(this_maptype_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteraltypeAccess().getTypenameParserRuleCall_4());
		}
		this_typename_7=ruletypename
		{
			$current.merge(this_typename_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleliteralvalue
entryRuleliteralvalue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralvalueRule()); }
	iv_ruleliteralvalue=ruleliteralvalue
	{ $current=$iv_ruleliteralvalue.current; }
	EOF;

// Rule literalvalue
ruleliteralvalue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLiteralvalueAccess().getLiteralvalueAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getLiteralvalueAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralvalueAccess().getElementlistElementlistParserRuleCall_2_0_0());
					}
					lv_elementlist_2_0=ruleelementlist
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralvalueRule());
						}
						set(
							$current,
							"elementlist",
							lv_elementlist_2_0,
							"org.xtext.example.mydsl.MyDsl.elementlist");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getLiteralvalueAccess().getCommaKeyword_2_1());
				}
			)?
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getLiteralvalueAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleelementlist
entryRuleelementlist returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementlistRule()); }
	iv_ruleelementlist=ruleelementlist
	{ $current=$iv_ruleelementlist.current; }
	EOF;

// Rule elementlist
ruleelementlist returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementlistAccess().getKeyedelementParserRuleCall_0());
		}
		this_keyedelement_0=rulekeyedelement
		{
			$current = $this_keyedelement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getElementlistAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementlistAccess().getKeyedelementKeyedelementParserRuleCall_1_1_0());
					}
					lv_keyedelement_2_0=rulekeyedelement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementlistRule());
						}
						add(
							$current,
							"keyedelement",
							lv_keyedelement_2_0,
							"org.xtext.example.mydsl.MyDsl.keyedelement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulekeyedelement
entryRulekeyedelement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyedelementRule()); }
	iv_rulekeyedelement=rulekeyedelement
	{ $current=$iv_rulekeyedelement.current; }
	EOF;

// Rule keyedelement
rulekeyedelement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getKeyedelementAccess().getKeyParserRuleCall_0_0());
			}
			this_key_0=rulekey
			{
				$current = $this_key_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getKeyedelementAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyedelementAccess().getElementElementParserRuleCall_1_0());
				}
				lv_element_2_0=ruleelement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyedelementRule());
					}
					set(
						$current,
						"element",
						lv_element_2_0,
						"org.xtext.example.mydsl.MyDsl.element");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulekey
entryRulekey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_rulekey=rulekey
	{ $current=$iv_rulekey.current; }
	EOF;

// Rule key
rulekey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getKeyAccess().getKeyAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getKeyAccess().getFieldnameParserRuleCall_0_1());
			}
			rulefieldname
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getKeyAccess().getExpressionParserRuleCall_1());
		}
		this_expression_2=ruleexpression
		{
			$current = $this_expression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getKeyAccess().getLiteralvalueParserRuleCall_2());
		}
		this_literalvalue_3=ruleliteralvalue
		{
			$current = $this_literalvalue_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleelement
entryRuleelement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleelement=ruleelement
	{ $current=$iv_ruleelement.current; }
	EOF;

// Rule element
ruleelement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current = $this_expression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getLiteralvalueParserRuleCall_1());
		}
		this_literalvalue_1=ruleliteralvalue
		{
			$current = $this_literalvalue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current.getText(); }
	EOF;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='FRANKLIN'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getStatementAccess().getFRANKLINKeyword());
	}
;

// Entry rule entryRuleblock
entryRuleblock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current.getText(); }
	EOF;

// Rule block
ruleblock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBlockAccess().getStatementlistParserRuleCall_1());
		}
		this_statementlist_1=rulestatementlist
		{
			$current.merge(this_statementlist_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRulestatementlist
entryRulestatementlist returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementlistRule()); }
	iv_rulestatementlist=rulestatementlist
	{ $current=$iv_rulestatementlist.current.getText(); }
	EOF;

// Rule statementlist
rulestatementlist returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementlistAccess().getStatementParserRuleCall_0());
		}
		this_statement_0=rulestatement
		{
			$current.merge(this_statement_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStatementlistAccess().getSemicolonKeyword_1());
		}
	)*
;

// Entry rule entryRulefunctionbody
entryRulefunctionbody returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionbodyRule()); }
	iv_rulefunctionbody=rulefunctionbody
	{ $current=$iv_rulefunctionbody.current.getText(); }
	EOF;

// Rule functionbody
rulefunctionbody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFunctionbodyAccess().getBlockParserRuleCall());
	}
	this_block_0=ruleblock
	{
		$current.merge(this_block_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuletypeassertion
entryRuletypeassertion returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeassertionRule()); }
	iv_ruletypeassertion=ruletypeassertion
	{ $current=$iv_ruletypeassertion.current.getText(); }
	EOF;

// Rule typeassertion
ruletypeassertion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeassertionAccess().getFullStopKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeassertionAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getTypeassertionAccess().getTypeParserRuleCall_2());
		}
		this_type_2=ruletype
		{
			$current.merge(this_type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeassertionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulearguments
entryRulearguments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	iv_rulearguments=rulearguments
	{ $current=$iv_rulearguments.current; }
	EOF;

// Rule arguments
rulearguments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArgumentsAccess().getArgumentsAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionlistExpressionlistParserRuleCall_2_0_0_0());
						}
						lv_expressionlist_2_0=ruleexpressionlist
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArgumentsRule());
							}
							set(
								$current,
								"expressionlist",
								lv_expressionlist_2_0,
								"org.xtext.example.mydsl.MyDsl.expressionlist");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					{
						newCompositeNode(grammarAccess.getArgumentsAccess().getTypeParserRuleCall_2_0_1_0());
					}
					ruletype
					{
						afterParserOrEnumRuleCall();
					}
					(
						otherlv_4=','
						{
							newLeafNode(otherlv_4, grammarAccess.getArgumentsAccess().getCommaKeyword_2_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionlistExpressionlistParserRuleCall_2_0_1_1_1_0());
								}
								lv_expressionlist_5_0=ruleexpressionlist
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getArgumentsRule());
									}
									set(
										$current,
										"expressionlist",
										lv_expressionlist_5_0,
										"org.xtext.example.mydsl.MyDsl.expressionlist");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
				)
			)
			(
				otherlv_6='...'
				{
					newLeafNode(otherlv_6, grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_2_1());
				}
			)?
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getArgumentsAccess().getCommaKeyword_2_2());
				}
			)?
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleexpressionlist
entryRuleexpressionlist returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionlistRule()); }
	iv_ruleexpressionlist=ruleexpressionlist
	{ $current=$iv_ruleexpressionlist.current; }
	EOF;

// Rule expressionlist
ruleexpressionlist returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionlistAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current = $this_expression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionlistAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionlistAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionlistRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.xtext.example.mydsl.MyDsl.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleselector
entryRuleselector returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleselector=ruleselector
	{ $current=$iv_ruleselector.current.getText(); }
	EOF;

// Rule selector
ruleselector returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectorAccess().getFullStopKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getSelectorAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulefieldname
entryRulefieldname returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFieldnameRule()); }
	iv_rulefieldname=rulefieldname
	{ $current=$iv_rulefieldname.current.getText(); }
	EOF;

// Rule fieldname
rulefieldname returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_IDENTIFIER_0=RULE_IDENTIFIER
	{
		$current.merge(this_IDENTIFIER_0);
	}
	{
		newLeafNode(this_IDENTIFIER_0, grammarAccess.getFieldnameAccess().getIDENTIFIERTerminalRuleCall());
	}
;

// Entry rule entryRuleliteral
entryRuleliteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleliteral=ruleliteral
	{ $current=$iv_ruleliteral.current.getText(); }
	EOF;

// Rule literal
ruleliteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getLiteralAccess().getBasiclitParserRuleCall());
	}
	this_basiclit_0=rulebasiclit
	{
		$current.merge(this_basiclit_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulebasiclit
entryRulebasiclit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasiclitRule()); }
	iv_rulebasiclit=rulebasiclit
	{ $current=$iv_rulebasiclit.current.getText(); }
	EOF;

// Rule basiclit
rulebasiclit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBasiclitAccess().getInt_litParserRuleCall_0());
		}
		this_int_lit_0=ruleint_lit
		{
			$current.merge(this_int_lit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasiclitAccess().getFloat_litParserRuleCall_1());
		}
		this_float_lit_1=rulefloat_lit
		{
			$current.merge(this_float_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasiclitAccess().getImaginary_litParserRuleCall_2());
		}
		this_imaginary_lit_2=ruleimaginary_lit
		{
			$current.merge(this_imaginary_lit_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasiclitAccess().getRune_litParserRuleCall_3());
		}
		this_rune_lit_3=rulerune_lit
		{
			$current.merge(this_rune_lit_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBasiclitAccess().getString_litParserRuleCall_4());
		}
		this_string_lit_4=rulestring_lit
		{
			$current.merge(this_string_lit_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleoperandname
entryRuleoperandname returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperandnameRule()); }
	iv_ruleoperandname=ruleoperandname
	{ $current=$iv_ruleoperandname.current.getText(); }
	EOF;

// Rule operandname
ruleoperandname returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getOperandnameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandnameAccess().getQualified_identParserRuleCall_1());
		}
		this_qualified_ident_1=rulequalified_ident
		{
			$current.merge(this_qualified_ident_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleslicetype
entryRuleslicetype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSlicetypeRule()); }
	iv_ruleslicetype=ruleslicetype
	{ $current=$iv_ruleslicetype.current.getText(); }
	EOF;

// Rule slicetype
ruleslicetype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSlicetypeAccess().getLeftSquareBracketKeyword_0());
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSlicetypeAccess().getRightSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getSlicetypeAccess().getElementtypeParserRuleCall_2());
		}
		this_elementtype_2=ruleelementtype
		{
			$current.merge(this_elementtype_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulebasetype
entryRulebasetype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasetypeRule()); }
	iv_rulebasetype=rulebasetype
	{ $current=$iv_rulebasetype.current.getText(); }
	EOF;

// Rule basetype
rulebasetype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBasetypeAccess().getTypeParserRuleCall());
	}
	this_type_0=ruletype
	{
		$current.merge(this_type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulemaptype
entryRulemaptype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMaptypeRule()); }
	iv_rulemaptype=rulemaptype
	{ $current=$iv_rulemaptype.current.getText(); }
	EOF;

// Rule maptype
rulemaptype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='map'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaptypeAccess().getMapKeyword_0());
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaptypeAccess().getLeftSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getMaptypeAccess().getKeytypeParserRuleCall_2());
		}
		this_keytype_2=rulekeytype
		{
			$current.merge(this_keytype_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaptypeAccess().getRightSquareBracketKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getMaptypeAccess().getElementtypeParserRuleCall_4());
		}
		this_elementtype_4=ruleelementtype
		{
			$current.merge(this_elementtype_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulekeytype
entryRulekeytype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKeytypeRule()); }
	iv_rulekeytype=rulekeytype
	{ $current=$iv_rulekeytype.current.getText(); }
	EOF;

// Rule keytype
rulekeytype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getKeytypeAccess().getTypeParserRuleCall());
	}
	this_type_0=ruletype
	{
		$current.merge(this_type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleelementtype
entryRuleelementtype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementtypeRule()); }
	iv_ruleelementtype=ruleelementtype
	{ $current=$iv_ruleelementtype.current.getText(); }
	EOF;

// Rule elementtype
ruleelementtype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getElementtypeAccess().getTypeParserRuleCall());
	}
	this_type_0=ruletype
	{
		$current.merge(this_type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulemethodspec
entryRulemethodspec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodspecRule()); }
	iv_rulemethodspec=rulemethodspec
	{ $current=$iv_rulemethodspec.current.getText(); }
	EOF;

// Rule methodspec
rulemethodspec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMethodspecAccess().getMethodnameParserRuleCall_0_0());
			}
			this_methodname_0=rulemethodname
			{
				$current.merge(this_methodname_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getMethodspecAccess().getSignatureParserRuleCall_0_1());
			}
			this_signature_1=rulesignature
			{
				$current.merge(this_signature_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getMethodspecAccess().getInterfacetypenameParserRuleCall_1());
		}
		this_interfacetypename_2=ruleinterfacetypename
		{
			$current.merge(this_interfacetypename_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulemethodname
entryRulemethodname returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodnameRule()); }
	iv_rulemethodname=rulemethodname
	{ $current=$iv_rulemethodname.current.getText(); }
	EOF;

// Rule methodname
rulemethodname returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_IDENTIFIER_0=RULE_IDENTIFIER
	{
		$current.merge(this_IDENTIFIER_0);
	}
	{
		newLeafNode(this_IDENTIFIER_0, grammarAccess.getMethodnameAccess().getIDENTIFIERTerminalRuleCall());
	}
;

// Entry rule entryRuleinterfacetypename
entryRuleinterfacetypename returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterfacetypenameRule()); }
	iv_ruleinterfacetypename=ruleinterfacetypename
	{ $current=$iv_ruleinterfacetypename.current.getText(); }
	EOF;

// Rule interfacetypename
ruleinterfacetypename returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInterfacetypenameAccess().getTypenameParserRuleCall());
	}
	this_typename_0=ruletypename
	{
		$current.merge(this_typename_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulesignature
entryRulesignature returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_rulesignature=rulesignature
	{ $current=$iv_rulesignature.current.getText(); }
	EOF;

// Rule signature
rulesignature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0());
		}
		this_parameters_0=ruleparameters
		{
			$current.merge(this_parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getSignatureAccess().getResultParserRuleCall_1());
			}
			this_result_1=ruleresult
			{
				$current.merge(this_result_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleresult
entryRuleresult returns [String current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleresult=ruleresult
	{ $current=$iv_ruleresult.current.getText(); }
	EOF;

// Rule result
ruleresult returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResultAccess().getParametersParserRuleCall_0());
		}
		this_parameters_0=ruleparameters
		{
			$current.merge(this_parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getResultAccess().getTypeParserRuleCall_1());
		}
		this_type_1=ruletype
		{
			$current.merge(this_type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleparameters
entryRuleparameters returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleparameters=ruleparameters
	{ $current=$iv_ruleparameters.current.getText(); }
	EOF;

// Rule parameters
ruleparameters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getParametersAccess().getParameterlistParserRuleCall_1_0());
			}
			this_parameterlist_1=ruleparameterlist
			{
				$current.merge(this_parameterlist_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleparameterlist
entryRuleparameterlist returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterlistRule()); }
	iv_ruleparameterlist=ruleparameterlist
	{ $current=$iv_ruleparameterlist.current.getText(); }
	EOF;

// Rule parameterlist
ruleparameterlist returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterlistAccess().getParameterdeclParserRuleCall_0());
		}
		this_parameterdecl_0=ruleparameterdecl
		{
			$current.merge(this_parameterdecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterlistAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getParameterlistAccess().getParameterdeclParserRuleCall_1_1());
			}
			this_parameterdecl_2=ruleparameterdecl
			{
				$current.merge(this_parameterdecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleparameterdecl
entryRuleparameterdecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterdeclRule()); }
	iv_ruleparameterdecl=ruleparameterdecl
	{ $current=$iv_ruleparameterdecl.current.getText(); }
	EOF;

// Rule parameterdecl
ruleparameterdecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameterdeclAccess().getIdentifierlistParserRuleCall_0());
			}
			this_identifierlist_0=ruleidentifierlist
			{
				$current.merge(this_identifierlist_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterdeclAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getParameterdeclAccess().getTypeParserRuleCall_2());
		}
		this_type_2=ruletype
		{
			$current.merge(this_type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulestructtype
entryRulestructtype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStructtypeRule()); }
	iv_rulestructtype=rulestructtype
	{ $current=$iv_rulestructtype.current.getText(); }
	EOF;

// Rule structtype
rulestructtype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='struct'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructtypeAccess().getStructKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructtypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getStructtypeAccess().getFielddeclParserRuleCall_2_0());
			}
			this_fielddecl_2=rulefielddecl
			{
				$current.merge(this_fielddecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStructtypeAccess().getSemicolonKeyword_2_1());
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructtypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulefielddecl
entryRulefielddecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFielddeclRule()); }
	iv_rulefielddecl=rulefielddecl
	{ $current=$iv_rulefielddecl.current.getText(); }
	EOF;

// Rule fielddecl
rulefielddecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFielddeclAccess().getIdentifierlistParserRuleCall_0_0_0());
				}
				this_identifierlist_0=ruleidentifierlist
				{
					$current.merge(this_identifierlist_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getFielddeclAccess().getTypeParserRuleCall_0_0_1());
				}
				this_type_1=ruletype
				{
					$current.merge(this_type_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getFielddeclAccess().getEmbeddedfieldParserRuleCall_0_1());
			}
			this_embeddedfield_2=ruleembeddedfield
			{
				$current.merge(this_embeddedfield_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getFielddeclAccess().getTagParserRuleCall_1());
			}
			this_tag_3=ruletag
			{
				$current.merge(this_tag_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleembeddedfield
entryRuleembeddedfield returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEmbeddedfieldRule()); }
	iv_ruleembeddedfield=ruleembeddedfield
	{ $current=$iv_ruleembeddedfield.current.getText(); }
	EOF;

// Rule embeddedfield
ruleembeddedfield returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEmbeddedfieldAccess().getAsteriskKeyword_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getEmbeddedfieldAccess().getTypenameParserRuleCall_1());
		}
		this_typename_1=ruletypename
		{
			$current.merge(this_typename_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuletype
entryRuletype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current.getText(); }
	EOF;

// Rule type
ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeAccess().getTypenameParserRuleCall());
	}
	this_typename_0=ruletypename
	{
		$current.merge(this_typename_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleidentifierlist
entryRuleidentifierlist returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierlistRule()); }
	iv_ruleidentifierlist=ruleidentifierlist
	{ $current=$iv_ruleidentifierlist.current.getText(); }
	EOF;

// Rule identifierlist
ruleidentifierlist returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierlistAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifierlistAccess().getCommaKeyword_1_0());
			}
			this_IDENTIFIER_2=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_2);
			}
			{
				newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifierlistAccess().getIDENTIFIERTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuletag
entryRuletag returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	iv_ruletag=ruletag
	{ $current=$iv_ruletag.current.getText(); }
	EOF;

// Rule tag
ruletag returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTagAccess().getString_litParserRuleCall());
	}
	this_string_lit_0=rulestring_lit
	{
		$current.merge(this_string_lit_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuletypename
entryRuletypename returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypenameRule()); }
	iv_ruletypename=ruletypename
	{ $current=$iv_ruletypename.current.getText(); }
	EOF;

// Rule typename
ruletypename returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypenameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypenameAccess().getQualified_identParserRuleCall_1());
		}
		this_qualified_ident_1=rulequalified_ident
		{
			$current.merge(this_qualified_ident_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulequalified_ident
entryRulequalified_ident returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualified_identRule()); }
	iv_rulequalified_ident=rulequalified_ident
	{ $current=$iv_rulequalified_ident.current.getText(); }
	EOF;

// Rule qualified_ident
rulequalified_ident returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualified_identAccess().getPackagenameParserRuleCall_0());
		}
		this_packagename_0=rulepackagename
		{
			$current.merge(this_packagename_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualified_identAccess().getFullStopKeyword_1());
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_2);
		}
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getQualified_identAccess().getIDENTIFIERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulepackagename
entryRulepackagename returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackagenameRule()); }
	iv_rulepackagename=rulepackagename
	{ $current=$iv_rulepackagename.current.getText(); }
	EOF;

// Rule packagename
rulepackagename returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_IDENTIFIER_0=RULE_IDENTIFIER
	{
		$current.merge(this_IDENTIFIER_0);
	}
	{
		newLeafNode(this_IDENTIFIER_0, grammarAccess.getPackagenameAccess().getIDENTIFIERTerminalRuleCall());
	}
;

// Entry rule entryRulestring_lit
entryRulestring_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getString_litRule()); }
	iv_rulestring_lit=rulestring_lit
	{ $current=$iv_rulestring_lit.current.getText(); }
	EOF;

// Rule string_lit
rulestring_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getString_litAccess().getRaw_string_litParserRuleCall_0());
		}
		this_raw_string_lit_0=ruleraw_string_lit
		{
			$current.merge(this_raw_string_lit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_litAccess().getInterpreted_string_litParserRuleCall_1());
		}
		this_interpreted_string_lit_1=ruleinterpreted_string_lit
		{
			$current.merge(this_interpreted_string_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleraw_string_lit
entryRuleraw_string_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRaw_string_litRule()); }
	iv_ruleraw_string_lit=ruleraw_string_lit
	{ $current=$iv_ruleraw_string_lit.current.getText(); }
	EOF;

// Rule raw_string_lit
ruleraw_string_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='`'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRaw_string_litAccess().getGraveAccentKeyword_0());
		}
		(
			this_LETTER_1=RULE_LETTER
			{
				$current.merge(this_LETTER_1);
			}
			{
				newLeafNode(this_LETTER_1, grammarAccess.getRaw_string_litAccess().getLETTERTerminalRuleCall_1_0());
			}
			    |
			this_DECIMAL_DIGIT_2=RULE_DECIMAL_DIGIT
			{
				$current.merge(this_DECIMAL_DIGIT_2);
			}
			{
				newLeafNode(this_DECIMAL_DIGIT_2, grammarAccess.getRaw_string_litAccess().getDECIMAL_DIGITTerminalRuleCall_1_1());
			}
			    |
			kw='\\n'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRaw_string_litAccess().getNKeyword_1_2());
			}
		)*
		kw='`'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRaw_string_litAccess().getGraveAccentKeyword_2());
		}
	)
;

// Entry rule entryRuleinterpreted_string_lit
entryRuleinterpreted_string_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterpreted_string_litRule()); }
	iv_ruleinterpreted_string_lit=ruleinterpreted_string_lit
	{ $current=$iv_ruleinterpreted_string_lit.current.getText(); }
	EOF;

// Rule interpreted_string_lit
ruleinterpreted_string_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getInterpreted_string_litAccess().getUnicode_valueParserRuleCall_1_0());
			}
			this_unicode_value_1=ruleunicode_value
			{
				$current.merge(this_unicode_value_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInterpreted_string_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_byte_value_2=rulebyte_value
			{
				$current.merge(this_byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_2());
		}
	)
;

// Entry rule entryRulerune_lit
entryRulerune_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRune_litRule()); }
	iv_rulerune_lit=rulerune_lit
	{ $current=$iv_rulerune_lit.current.getText(); }
	EOF;

// Rule rune_lit
rulerune_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRune_litAccess().getApostropheKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getRune_litAccess().getUnicode_valueParserRuleCall_1_0());
			}
			this_unicode_value_1=ruleunicode_value
			{
				$current.merge(this_unicode_value_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getRune_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_byte_value_2=rulebyte_value
			{
				$current.merge(this_byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRune_litAccess().getApostropheKeyword_2());
		}
	)
;

// Entry rule entryRuleint_lit
entryRuleint_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInt_litRule()); }
	iv_ruleint_lit=ruleint_lit
	{ $current=$iv_ruleint_lit.current.getText(); }
	EOF;

// Rule int_lit
ruleint_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_DECIMAL_DIGIT_0=RULE_DECIMAL_DIGIT
		{
			$current.merge(this_DECIMAL_DIGIT_0);
		}
		{
			newLeafNode(this_DECIMAL_DIGIT_0, grammarAccess.getInt_litAccess().getDECIMAL_DIGITTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getInt_litAccess().getHex_litParserRuleCall_1());
		}
		this_hex_lit_1=rulehex_lit
		{
			$current.merge(this_hex_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Entry rule entryRulehex_lit
entryRulehex_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHex_litRule()); }
	iv_rulehex_lit=rulehex_lit
	{ $current=$iv_rulehex_lit.current.getText(); }
	EOF;

// Rule hex_lit
rulehex_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHex_litAccess().getDigitZeroKeyword_0());
		}
		(
			kw='x'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getHex_litAccess().getXKeyword_1_0());
			}
			    |
			kw='X'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getHex_litAccess().getXKeyword_1_1());
			}
		)
		(
			this_HEX_DIGIT_3=RULE_HEX_DIGIT
			{
				$current.merge(this_HEX_DIGIT_3);
			}
			{
				newLeafNode(this_HEX_DIGIT_3, grammarAccess.getHex_litAccess().getHEX_DIGITTerminalRuleCall_2());
			}
		)+
	)
;

// Entry rule entryRuleimaginary_lit
entryRuleimaginary_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImaginary_litRule()); }
	iv_ruleimaginary_lit=ruleimaginary_lit
	{ $current=$iv_ruleimaginary_lit.current.getText(); }
	EOF;

// Rule imaginary_lit
ruleimaginary_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getImaginary_litAccess().getDecimalsParserRuleCall_0_0());
			}
			this_decimals_0=ruledecimals
			{
				$current.merge(this_decimals_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getImaginary_litAccess().getFloat_litParserRuleCall_0_1());
			}
			this_float_lit_1=rulefloat_lit
			{
				$current.merge(this_float_lit_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='i'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImaginary_litAccess().getIKeyword_1());
		}
	)
;

// Entry rule entryRulefloat_lit
entryRulefloat_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloat_litRule()); }
	iv_rulefloat_lit=rulefloat_lit
	{ $current=$iv_rulefloat_lit.current.getText(); }
	EOF;

// Rule float_lit
rulefloat_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getDecimalsParserRuleCall_0_0());
			}
			this_decimals_0=ruledecimals
			{
				$current.merge(this_decimals_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloat_litAccess().getFullStopKeyword_0_1());
			}
			(
				{
					newCompositeNode(grammarAccess.getFloat_litAccess().getDecimalsParserRuleCall_0_2());
				}
				this_decimals_2=ruledecimals
				{
					$current.merge(this_decimals_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			(
				{
					newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_0_3());
				}
				this_exponent_3=ruleexponent
				{
					$current.merge(this_exponent_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getDecimalsParserRuleCall_1_0());
			}
			this_decimals_4=ruledecimals
			{
				$current.merge(this_decimals_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_1_1());
			}
			this_exponent_5=ruleexponent
			{
				$current.merge(this_exponent_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloat_litAccess().getFullStopKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getDecimalsParserRuleCall_2_1());
			}
			this_decimals_7=ruledecimals
			{
				$current.merge(this_decimals_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_2_2());
				}
				this_exponent_8=ruleexponent
				{
					$current.merge(this_exponent_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuleexponent
entryRuleexponent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExponentRule()); }
	iv_ruleexponent=ruleexponent
	{ $current=$iv_ruleexponent.current.getText(); }
	EOF;

// Rule exponent
ruleexponent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='e'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_0());
			}
			    |
			kw='E'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_1());
			}
		)
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getPlusSignKeyword_1_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getHyphenMinusKeyword_1_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getExponentAccess().getDecimalsParserRuleCall_2());
		}
		this_decimals_4=ruledecimals
		{
			$current.merge(this_decimals_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuledecimals
entryRuledecimals returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDecimalsRule()); }
	iv_ruledecimals=ruledecimals
	{ $current=$iv_ruledecimals.current.getText(); }
	EOF;

// Rule decimals
ruledecimals returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_DECIMAL_DIGIT_0=RULE_DECIMAL_DIGIT
		{
			$current.merge(this_DECIMAL_DIGIT_0);
		}
		{
			newLeafNode(this_DECIMAL_DIGIT_0, grammarAccess.getDecimalsAccess().getDECIMAL_DIGITTerminalRuleCall());
		}
	)+
;

// Entry rule entryRulebyte_value
entryRulebyte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getByte_valueRule()); }
	iv_rulebyte_value=rulebyte_value
	{ $current=$iv_rulebyte_value.current.getText(); }
	EOF;

// Rule byte_value
rulebyte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getByte_valueAccess().getOctal_byte_valueParserRuleCall_0());
		}
		this_octal_byte_value_0=ruleoctal_byte_value
		{
			$current.merge(this_octal_byte_value_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getByte_valueAccess().getHex_byte_valueParserRuleCall_1());
		}
		this_hex_byte_value_1=rulehex_byte_value
		{
			$current.merge(this_hex_byte_value_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulehex_byte_value
entryRulehex_byte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHex_byte_valueRule()); }
	iv_rulehex_byte_value=rulehex_byte_value
	{ $current=$iv_rulehex_byte_value.current.getText(); }
	EOF;

// Rule hex_byte_value
rulehex_byte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHex_byte_valueAccess().getBackslashKeyword_0());
		}
		kw='x'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHex_byte_valueAccess().getXKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getHex_byte_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getHex_byte_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleoctal_byte_value
entryRuleoctal_byte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOctal_byte_valueRule()); }
	iv_ruleoctal_byte_value=ruleoctal_byte_value
	{ $current=$iv_ruleoctal_byte_value.current.getText(); }
	EOF;

// Rule octal_byte_value
ruleoctal_byte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getBackslashKeyword_0());
		}
		this_OCTAL_DIGIT_1=RULE_OCTAL_DIGIT
		{
			$current.merge(this_OCTAL_DIGIT_1);
		}
		{
			newLeafNode(this_OCTAL_DIGIT_1, grammarAccess.getOctal_byte_valueAccess().getOCTAL_DIGITTerminalRuleCall_1());
		}
		this_OCTAL_DIGIT_2=RULE_OCTAL_DIGIT
		{
			$current.merge(this_OCTAL_DIGIT_2);
		}
		{
			newLeafNode(this_OCTAL_DIGIT_2, grammarAccess.getOctal_byte_valueAccess().getOCTAL_DIGITTerminalRuleCall_2());
		}
		this_OCTAL_DIGIT_3=RULE_OCTAL_DIGIT
		{
			$current.merge(this_OCTAL_DIGIT_3);
		}
		{
			newLeafNode(this_OCTAL_DIGIT_3, grammarAccess.getOctal_byte_valueAccess().getOCTAL_DIGITTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleunicode_value
entryRuleunicode_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnicode_valueRule()); }
	iv_ruleunicode_value=ruleunicode_value
	{ $current=$iv_ruleunicode_value.current.getText(); }
	EOF;

// Rule unicode_value
ruleunicode_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_LETTER_0=RULE_LETTER
			{
				$current.merge(this_LETTER_0);
			}
			{
				newLeafNode(this_LETTER_0, grammarAccess.getUnicode_valueAccess().getLETTERTerminalRuleCall_0_0());
			}
			    |
			this_DECIMAL_DIGIT_1=RULE_DECIMAL_DIGIT
			{
				$current.merge(this_DECIMAL_DIGIT_1);
			}
			{
				newLeafNode(this_DECIMAL_DIGIT_1, grammarAccess.getUnicode_valueAccess().getDECIMAL_DIGITTerminalRuleCall_0_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnicode_valueAccess().getLittle_u_valueParserRuleCall_1());
		}
		this_little_u_value_2=rulelittle_u_value
		{
			$current.merge(this_little_u_value_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnicode_valueAccess().getBig_u_valueParserRuleCall_2());
		}
		this_big_u_value_3=rulebig_u_value
		{
			$current.merge(this_big_u_value_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ESCAPED_CHAR_4=RULE_ESCAPED_CHAR
		{
			$current.merge(this_ESCAPED_CHAR_4);
		}
		{
			newLeafNode(this_ESCAPED_CHAR_4, grammarAccess.getUnicode_valueAccess().getESCAPED_CHARTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRulebig_u_value
entryRulebig_u_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBig_u_valueRule()); }
	iv_rulebig_u_value=rulebig_u_value
	{ $current=$iv_rulebig_u_value.current.getText(); }
	EOF;

// Rule big_u_value
rulebig_u_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBig_u_valueAccess().getBackslashKeyword_0());
		}
		kw='U'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBig_u_valueAccess().getUKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
		this_HEX_DIGIT_4=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_4);
		}
		{
			newLeafNode(this_HEX_DIGIT_4, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_4());
		}
		this_HEX_DIGIT_5=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_5);
		}
		{
			newLeafNode(this_HEX_DIGIT_5, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_5());
		}
		this_HEX_DIGIT_6=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_6);
		}
		{
			newLeafNode(this_HEX_DIGIT_6, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_6());
		}
		this_HEX_DIGIT_7=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_7);
		}
		{
			newLeafNode(this_HEX_DIGIT_7, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_7());
		}
		this_HEX_DIGIT_8=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_8);
		}
		{
			newLeafNode(this_HEX_DIGIT_8, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_8());
		}
		this_HEX_DIGIT_9=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_9);
		}
		{
			newLeafNode(this_HEX_DIGIT_9, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_9());
		}
	)
;

// Entry rule entryRulelittle_u_value
entryRulelittle_u_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLittle_u_valueRule()); }
	iv_rulelittle_u_value=rulelittle_u_value
	{ $current=$iv_rulelittle_u_value.current.getText(); }
	EOF;

// Rule little_u_value
rulelittle_u_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLittle_u_valueAccess().getBackslashKeyword_0());
		}
		kw='u'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLittle_u_valueAccess().getUKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
		this_HEX_DIGIT_4=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_4);
		}
		{
			newLeafNode(this_HEX_DIGIT_4, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_4());
		}
		this_HEX_DIGIT_5=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_5);
		}
		{
			newLeafNode(this_HEX_DIGIT_5, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_5());
		}
	)
;

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_DECIMAL_DIGIT)*;

fragment RULE_A_F : ('A'..'F'|'a'..'f');

RULE_LETTER : (RULE_A_F|'g'..'z'|'G'..'Z'|'_');

RULE_HEX_DIGIT : (RULE_DECIMAL_DIGIT|RULE_A_F);

RULE_OCTAL_DIGIT : '0'..'7';

RULE_ESCAPED_CHAR : '\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\''|'"');

RULE_DECIMAL_DIGIT : (RULE_OCTAL_DIGIT|'8'|'9');

RULE_BINARY_OP : ('||'|'&&'|RULE_REL_OP|RULE_ADD_OP|RULE_MUL_OP);

fragment RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

fragment RULE_ADD_OP : ('+'|'-'|'|'|'^');

fragment RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
