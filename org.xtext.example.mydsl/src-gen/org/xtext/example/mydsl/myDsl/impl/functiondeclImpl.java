/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.functionbody;
import org.xtext.example.mydsl.myDsl.functiondecl;
import org.xtext.example.mydsl.myDsl.signature;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>functiondecl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.functiondeclImpl#getFunctionname <em>Functionname</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.functiondeclImpl#getSignature <em>Signature</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.functiondeclImpl#getFunctionbody <em>Functionbody</em>}</li>
 * </ul>
 *
 * @generated
 */
public class functiondeclImpl extends MinimalEObjectImpl.Container implements functiondecl
{
  /**
   * The default value of the '{@link #getFunctionname() <em>Functionname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionname()
   * @generated
   * @ordered
   */
  protected static final String FUNCTIONNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFunctionname() <em>Functionname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionname()
   * @generated
   * @ordered
   */
  protected String functionname = FUNCTIONNAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSignature() <em>Signature</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignature()
   * @generated
   * @ordered
   */
  protected signature signature;

  /**
   * The cached value of the '{@link #getFunctionbody() <em>Functionbody</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionbody()
   * @generated
   * @ordered
   */
  protected functionbody functionbody;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected functiondeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.FUNCTIONDECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFunctionname()
  {
    return functionname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionname(String newFunctionname)
  {
    String oldFunctionname = functionname;
    functionname = newFunctionname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONDECL__FUNCTIONNAME, oldFunctionname, functionname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public signature getSignature()
  {
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSignature(signature newSignature, NotificationChain msgs)
  {
    signature oldSignature = signature;
    signature = newSignature;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONDECL__SIGNATURE, oldSignature, newSignature);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSignature(signature newSignature)
  {
    if (newSignature != signature)
    {
      NotificationChain msgs = null;
      if (signature != null)
        msgs = ((InternalEObject)signature).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FUNCTIONDECL__SIGNATURE, null, msgs);
      if (newSignature != null)
        msgs = ((InternalEObject)newSignature).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FUNCTIONDECL__SIGNATURE, null, msgs);
      msgs = basicSetSignature(newSignature, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONDECL__SIGNATURE, newSignature, newSignature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public functionbody getFunctionbody()
  {
    return functionbody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionbody(functionbody newFunctionbody, NotificationChain msgs)
  {
    functionbody oldFunctionbody = functionbody;
    functionbody = newFunctionbody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONDECL__FUNCTIONBODY, oldFunctionbody, newFunctionbody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionbody(functionbody newFunctionbody)
  {
    if (newFunctionbody != functionbody)
    {
      NotificationChain msgs = null;
      if (functionbody != null)
        msgs = ((InternalEObject)functionbody).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FUNCTIONDECL__FUNCTIONBODY, null, msgs);
      if (newFunctionbody != null)
        msgs = ((InternalEObject)newFunctionbody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FUNCTIONDECL__FUNCTIONBODY, null, msgs);
      msgs = basicSetFunctionbody(newFunctionbody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONDECL__FUNCTIONBODY, newFunctionbody, newFunctionbody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONDECL__SIGNATURE:
        return basicSetSignature(null, msgs);
      case MyDslPackage.FUNCTIONDECL__FUNCTIONBODY:
        return basicSetFunctionbody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONDECL__FUNCTIONNAME:
        return getFunctionname();
      case MyDslPackage.FUNCTIONDECL__SIGNATURE:
        return getSignature();
      case MyDslPackage.FUNCTIONDECL__FUNCTIONBODY:
        return getFunctionbody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONDECL__FUNCTIONNAME:
        setFunctionname((String)newValue);
        return;
      case MyDslPackage.FUNCTIONDECL__SIGNATURE:
        setSignature((signature)newValue);
        return;
      case MyDslPackage.FUNCTIONDECL__FUNCTIONBODY:
        setFunctionbody((functionbody)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONDECL__FUNCTIONNAME:
        setFunctionname(FUNCTIONNAME_EDEFAULT);
        return;
      case MyDslPackage.FUNCTIONDECL__SIGNATURE:
        setSignature((signature)null);
        return;
      case MyDslPackage.FUNCTIONDECL__FUNCTIONBODY:
        setFunctionbody((functionbody)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONDECL__FUNCTIONNAME:
        return FUNCTIONNAME_EDEFAULT == null ? functionname != null : !FUNCTIONNAME_EDEFAULT.equals(functionname);
      case MyDslPackage.FUNCTIONDECL__SIGNATURE:
        return signature != null;
      case MyDslPackage.FUNCTIONDECL__FUNCTIONBODY:
        return functionbody != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (functionname: ");
    result.append(functionname);
    result.append(')');
    return result.toString();
  }

} //functiondeclImpl
