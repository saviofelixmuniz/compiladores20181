/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.elementtype;
import org.xtext.example.mydsl.myDsl.literaltype;
import org.xtext.example.mydsl.myDsl.maptype;
import org.xtext.example.mydsl.myDsl.slicetype;
import org.xtext.example.mydsl.myDsl.structtype;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>literaltype</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.literaltypeImpl#getStructtype <em>Structtype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.literaltypeImpl#getElementtype <em>Elementtype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.literaltypeImpl#getSlicetype <em>Slicetype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.literaltypeImpl#getMaptype <em>Maptype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.literaltypeImpl#getTypename <em>Typename</em>}</li>
 * </ul>
 *
 * @generated
 */
public class literaltypeImpl extends MinimalEObjectImpl.Container implements literaltype
{
  /**
   * The cached value of the '{@link #getStructtype() <em>Structtype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStructtype()
   * @generated
   * @ordered
   */
  protected structtype structtype;

  /**
   * The cached value of the '{@link #getElementtype() <em>Elementtype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementtype()
   * @generated
   * @ordered
   */
  protected elementtype elementtype;

  /**
   * The cached value of the '{@link #getSlicetype() <em>Slicetype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlicetype()
   * @generated
   * @ordered
   */
  protected slicetype slicetype;

  /**
   * The cached value of the '{@link #getMaptype() <em>Maptype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaptype()
   * @generated
   * @ordered
   */
  protected maptype maptype;

  /**
   * The default value of the '{@link #getTypename() <em>Typename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypename()
   * @generated
   * @ordered
   */
  protected static final String TYPENAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypename() <em>Typename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypename()
   * @generated
   * @ordered
   */
  protected String typename = TYPENAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected literaltypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.LITERALTYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public structtype getStructtype()
  {
    return structtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStructtype(structtype newStructtype, NotificationChain msgs)
  {
    structtype oldStructtype = structtype;
    structtype = newStructtype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__STRUCTTYPE, oldStructtype, newStructtype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStructtype(structtype newStructtype)
  {
    if (newStructtype != structtype)
    {
      NotificationChain msgs = null;
      if (structtype != null)
        msgs = ((InternalEObject)structtype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LITERALTYPE__STRUCTTYPE, null, msgs);
      if (newStructtype != null)
        msgs = ((InternalEObject)newStructtype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LITERALTYPE__STRUCTTYPE, null, msgs);
      msgs = basicSetStructtype(newStructtype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__STRUCTTYPE, newStructtype, newStructtype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public elementtype getElementtype()
  {
    return elementtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElementtype(elementtype newElementtype, NotificationChain msgs)
  {
    elementtype oldElementtype = elementtype;
    elementtype = newElementtype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__ELEMENTTYPE, oldElementtype, newElementtype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElementtype(elementtype newElementtype)
  {
    if (newElementtype != elementtype)
    {
      NotificationChain msgs = null;
      if (elementtype != null)
        msgs = ((InternalEObject)elementtype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LITERALTYPE__ELEMENTTYPE, null, msgs);
      if (newElementtype != null)
        msgs = ((InternalEObject)newElementtype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LITERALTYPE__ELEMENTTYPE, null, msgs);
      msgs = basicSetElementtype(newElementtype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__ELEMENTTYPE, newElementtype, newElementtype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public slicetype getSlicetype()
  {
    return slicetype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSlicetype(slicetype newSlicetype, NotificationChain msgs)
  {
    slicetype oldSlicetype = slicetype;
    slicetype = newSlicetype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__SLICETYPE, oldSlicetype, newSlicetype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSlicetype(slicetype newSlicetype)
  {
    if (newSlicetype != slicetype)
    {
      NotificationChain msgs = null;
      if (slicetype != null)
        msgs = ((InternalEObject)slicetype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LITERALTYPE__SLICETYPE, null, msgs);
      if (newSlicetype != null)
        msgs = ((InternalEObject)newSlicetype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LITERALTYPE__SLICETYPE, null, msgs);
      msgs = basicSetSlicetype(newSlicetype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__SLICETYPE, newSlicetype, newSlicetype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public maptype getMaptype()
  {
    return maptype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMaptype(maptype newMaptype, NotificationChain msgs)
  {
    maptype oldMaptype = maptype;
    maptype = newMaptype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__MAPTYPE, oldMaptype, newMaptype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaptype(maptype newMaptype)
  {
    if (newMaptype != maptype)
    {
      NotificationChain msgs = null;
      if (maptype != null)
        msgs = ((InternalEObject)maptype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LITERALTYPE__MAPTYPE, null, msgs);
      if (newMaptype != null)
        msgs = ((InternalEObject)newMaptype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LITERALTYPE__MAPTYPE, null, msgs);
      msgs = basicSetMaptype(newMaptype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__MAPTYPE, newMaptype, newMaptype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTypename()
  {
    return typename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypename(String newTypename)
  {
    String oldTypename = typename;
    typename = newTypename;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERALTYPE__TYPENAME, oldTypename, typename));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERALTYPE__STRUCTTYPE:
        return basicSetStructtype(null, msgs);
      case MyDslPackage.LITERALTYPE__ELEMENTTYPE:
        return basicSetElementtype(null, msgs);
      case MyDslPackage.LITERALTYPE__SLICETYPE:
        return basicSetSlicetype(null, msgs);
      case MyDslPackage.LITERALTYPE__MAPTYPE:
        return basicSetMaptype(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERALTYPE__STRUCTTYPE:
        return getStructtype();
      case MyDslPackage.LITERALTYPE__ELEMENTTYPE:
        return getElementtype();
      case MyDslPackage.LITERALTYPE__SLICETYPE:
        return getSlicetype();
      case MyDslPackage.LITERALTYPE__MAPTYPE:
        return getMaptype();
      case MyDslPackage.LITERALTYPE__TYPENAME:
        return getTypename();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERALTYPE__STRUCTTYPE:
        setStructtype((structtype)newValue);
        return;
      case MyDslPackage.LITERALTYPE__ELEMENTTYPE:
        setElementtype((elementtype)newValue);
        return;
      case MyDslPackage.LITERALTYPE__SLICETYPE:
        setSlicetype((slicetype)newValue);
        return;
      case MyDslPackage.LITERALTYPE__MAPTYPE:
        setMaptype((maptype)newValue);
        return;
      case MyDslPackage.LITERALTYPE__TYPENAME:
        setTypename((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERALTYPE__STRUCTTYPE:
        setStructtype((structtype)null);
        return;
      case MyDslPackage.LITERALTYPE__ELEMENTTYPE:
        setElementtype((elementtype)null);
        return;
      case MyDslPackage.LITERALTYPE__SLICETYPE:
        setSlicetype((slicetype)null);
        return;
      case MyDslPackage.LITERALTYPE__MAPTYPE:
        setMaptype((maptype)null);
        return;
      case MyDslPackage.LITERALTYPE__TYPENAME:
        setTypename(TYPENAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERALTYPE__STRUCTTYPE:
        return structtype != null;
      case MyDslPackage.LITERALTYPE__ELEMENTTYPE:
        return elementtype != null;
      case MyDslPackage.LITERALTYPE__SLICETYPE:
        return slicetype != null;
      case MyDslPackage.LITERALTYPE__MAPTYPE:
        return maptype != null;
      case MyDslPackage.LITERALTYPE__TYPENAME:
        return TYPENAME_EDEFAULT == null ? typename != null : !TYPENAME_EDEFAULT.equals(typename);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (typename: ");
    result.append(typename);
    result.append(')');
    return result.toString();
  }

} //literaltypeImpl
