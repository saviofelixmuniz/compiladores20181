/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.MODEL: return createModel();
      case MyDslPackage.EXPRESSION: return createexpression();
      case MyDslPackage.EXPRESSIONAUX: return createexpressionaux();
      case MyDslPackage.UNARYEXPR: return createunaryexpr();
      case MyDslPackage.PRIMARYEXPR: return createprimaryexpr();
      case MyDslPackage.PRIMARYEXPRAUX: return createprimaryexpraux();
      case MyDslPackage.INDEX: return createindex();
      case MyDslPackage.SLICE: return createslice();
      case MyDslPackage.CONVERSION: return createconversion();
      case MyDslPackage.OPERAND: return createoperand();
      case MyDslPackage.COMPOSITELIT: return createcompositelit();
      case MyDslPackage.LITERALVALUE: return createliteralvalue();
      case MyDslPackage.ELEMENTLIST: return createelementlist();
      case MyDslPackage.KEYEDELEMENT: return createkeyedelement();
      case MyDslPackage.KEY: return createkey();
      case MyDslPackage.ELEMENT: return createelement();
      case MyDslPackage.ARGUMENTS: return createarguments();
      case MyDslPackage.EXPRESSIONLIST: return createexpressionlist();
      case MyDslPackage.EXPERSSIONAUX: return createexperssionaux();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression createexpression()
  {
    expressionImpl expression = new expressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expressionaux createexpressionaux()
  {
    expressionauxImpl expressionaux = new expressionauxImpl();
    return expressionaux;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public unaryexpr createunaryexpr()
  {
    unaryexprImpl unaryexpr = new unaryexprImpl();
    return unaryexpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public primaryexpr createprimaryexpr()
  {
    primaryexprImpl primaryexpr = new primaryexprImpl();
    return primaryexpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public primaryexpraux createprimaryexpraux()
  {
    primaryexprauxImpl primaryexpraux = new primaryexprauxImpl();
    return primaryexpraux;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public index createindex()
  {
    indexImpl index = new indexImpl();
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public slice createslice()
  {
    sliceImpl slice = new sliceImpl();
    return slice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public conversion createconversion()
  {
    conversionImpl conversion = new conversionImpl();
    return conversion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public operand createoperand()
  {
    operandImpl operand = new operandImpl();
    return operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compositelit createcompositelit()
  {
    compositelitImpl compositelit = new compositelitImpl();
    return compositelit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public literalvalue createliteralvalue()
  {
    literalvalueImpl literalvalue = new literalvalueImpl();
    return literalvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public elementlist createelementlist()
  {
    elementlistImpl elementlist = new elementlistImpl();
    return elementlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public keyedelement createkeyedelement()
  {
    keyedelementImpl keyedelement = new keyedelementImpl();
    return keyedelement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public key createkey()
  {
    keyImpl key = new keyImpl();
    return key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public element createelement()
  {
    elementImpl element = new elementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public arguments createarguments()
  {
    argumentsImpl arguments = new argumentsImpl();
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expressionlist createexpressionlist()
  {
    expressionlistImpl expressionlist = new expressionlistImpl();
    return expressionlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public experssionaux createexperssionaux()
  {
    experssionauxImpl experssionaux = new experssionauxImpl();
    return experssionaux;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
