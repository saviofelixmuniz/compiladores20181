/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.condition;
import org.xtext.example.mydsl.myDsl.forclause;
import org.xtext.example.mydsl.myDsl.initstmt;
import org.xtext.example.mydsl.myDsl.poststmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>forclause</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.forclauseImpl#getInitstmt <em>Initstmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.forclauseImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.forclauseImpl#getPoststmt <em>Poststmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class forclauseImpl extends forstmtImpl implements forclause
{
  /**
   * The cached value of the '{@link #getInitstmt() <em>Initstmt</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitstmt()
   * @generated
   * @ordered
   */
  protected EList<initstmt> initstmt;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected condition condition;

  /**
   * The cached value of the '{@link #getPoststmt() <em>Poststmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoststmt()
   * @generated
   * @ordered
   */
  protected poststmt poststmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected forclauseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.FORCLAUSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<initstmt> getInitstmt()
  {
    if (initstmt == null)
    {
      initstmt = new EObjectContainmentEList<initstmt>(initstmt.class, this, MyDslPackage.FORCLAUSE__INITSTMT);
    }
    return initstmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(condition newCondition, NotificationChain msgs)
  {
    condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FORCLAUSE__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FORCLAUSE__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FORCLAUSE__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FORCLAUSE__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public poststmt getPoststmt()
  {
    return poststmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPoststmt(poststmt newPoststmt, NotificationChain msgs)
  {
    poststmt oldPoststmt = poststmt;
    poststmt = newPoststmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FORCLAUSE__POSTSTMT, oldPoststmt, newPoststmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPoststmt(poststmt newPoststmt)
  {
    if (newPoststmt != poststmt)
    {
      NotificationChain msgs = null;
      if (poststmt != null)
        msgs = ((InternalEObject)poststmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FORCLAUSE__POSTSTMT, null, msgs);
      if (newPoststmt != null)
        msgs = ((InternalEObject)newPoststmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FORCLAUSE__POSTSTMT, null, msgs);
      msgs = basicSetPoststmt(newPoststmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FORCLAUSE__POSTSTMT, newPoststmt, newPoststmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.FORCLAUSE__INITSTMT:
        return ((InternalEList<?>)getInitstmt()).basicRemove(otherEnd, msgs);
      case MyDslPackage.FORCLAUSE__CONDITION:
        return basicSetCondition(null, msgs);
      case MyDslPackage.FORCLAUSE__POSTSTMT:
        return basicSetPoststmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.FORCLAUSE__INITSTMT:
        return getInitstmt();
      case MyDslPackage.FORCLAUSE__CONDITION:
        return getCondition();
      case MyDslPackage.FORCLAUSE__POSTSTMT:
        return getPoststmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.FORCLAUSE__INITSTMT:
        getInitstmt().clear();
        getInitstmt().addAll((Collection<? extends initstmt>)newValue);
        return;
      case MyDslPackage.FORCLAUSE__CONDITION:
        setCondition((condition)newValue);
        return;
      case MyDslPackage.FORCLAUSE__POSTSTMT:
        setPoststmt((poststmt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FORCLAUSE__INITSTMT:
        getInitstmt().clear();
        return;
      case MyDslPackage.FORCLAUSE__CONDITION:
        setCondition((condition)null);
        return;
      case MyDslPackage.FORCLAUSE__POSTSTMT:
        setPoststmt((poststmt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FORCLAUSE__INITSTMT:
        return initstmt != null && !initstmt.isEmpty();
      case MyDslPackage.FORCLAUSE__CONDITION:
        return condition != null;
      case MyDslPackage.FORCLAUSE__POSTSTMT:
        return poststmt != null;
    }
    return super.eIsSet(featureID);
  }

} //forclauseImpl
