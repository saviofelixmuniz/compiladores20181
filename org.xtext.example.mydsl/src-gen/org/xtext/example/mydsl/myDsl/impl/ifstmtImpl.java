/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.block;
import org.xtext.example.mydsl.myDsl.expression;
import org.xtext.example.mydsl.myDsl.ifstmt;
import org.xtext.example.mydsl.myDsl.simplestmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ifstmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ifstmtImpl#getSimplestmt <em>Simplestmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ifstmtImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ifstmtImpl#getBlock <em>Block</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ifstmtImpl#getIfstmt <em>Ifstmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ifstmtImpl extends MinimalEObjectImpl.Container implements ifstmt
{
  /**
   * The cached value of the '{@link #getSimplestmt() <em>Simplestmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimplestmt()
   * @generated
   * @ordered
   */
  protected simplestmt simplestmt;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected expression expression;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected EList<block> block;

  /**
   * The cached value of the '{@link #getIfstmt() <em>Ifstmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfstmt()
   * @generated
   * @ordered
   */
  protected ifstmt ifstmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ifstmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.IFSTMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simplestmt getSimplestmt()
  {
    return simplestmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimplestmt(simplestmt newSimplestmt, NotificationChain msgs)
  {
    simplestmt oldSimplestmt = simplestmt;
    simplestmt = newSimplestmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.IFSTMT__SIMPLESTMT, oldSimplestmt, newSimplestmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimplestmt(simplestmt newSimplestmt)
  {
    if (newSimplestmt != simplestmt)
    {
      NotificationChain msgs = null;
      if (simplestmt != null)
        msgs = ((InternalEObject)simplestmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IFSTMT__SIMPLESTMT, null, msgs);
      if (newSimplestmt != null)
        msgs = ((InternalEObject)newSimplestmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IFSTMT__SIMPLESTMT, null, msgs);
      msgs = basicSetSimplestmt(newSimplestmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IFSTMT__SIMPLESTMT, newSimplestmt, newSimplestmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(expression newExpression, NotificationChain msgs)
  {
    expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.IFSTMT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IFSTMT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IFSTMT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IFSTMT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<block> getBlock()
  {
    if (block == null)
    {
      block = new EObjectContainmentEList<block>(block.class, this, MyDslPackage.IFSTMT__BLOCK);
    }
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ifstmt getIfstmt()
  {
    return ifstmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfstmt(ifstmt newIfstmt, NotificationChain msgs)
  {
    ifstmt oldIfstmt = ifstmt;
    ifstmt = newIfstmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.IFSTMT__IFSTMT, oldIfstmt, newIfstmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIfstmt(ifstmt newIfstmt)
  {
    if (newIfstmt != ifstmt)
    {
      NotificationChain msgs = null;
      if (ifstmt != null)
        msgs = ((InternalEObject)ifstmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IFSTMT__IFSTMT, null, msgs);
      if (newIfstmt != null)
        msgs = ((InternalEObject)newIfstmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.IFSTMT__IFSTMT, null, msgs);
      msgs = basicSetIfstmt(newIfstmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IFSTMT__IFSTMT, newIfstmt, newIfstmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.IFSTMT__SIMPLESTMT:
        return basicSetSimplestmt(null, msgs);
      case MyDslPackage.IFSTMT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case MyDslPackage.IFSTMT__BLOCK:
        return ((InternalEList<?>)getBlock()).basicRemove(otherEnd, msgs);
      case MyDslPackage.IFSTMT__IFSTMT:
        return basicSetIfstmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.IFSTMT__SIMPLESTMT:
        return getSimplestmt();
      case MyDslPackage.IFSTMT__EXPRESSION:
        return getExpression();
      case MyDslPackage.IFSTMT__BLOCK:
        return getBlock();
      case MyDslPackage.IFSTMT__IFSTMT:
        return getIfstmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.IFSTMT__SIMPLESTMT:
        setSimplestmt((simplestmt)newValue);
        return;
      case MyDslPackage.IFSTMT__EXPRESSION:
        setExpression((expression)newValue);
        return;
      case MyDslPackage.IFSTMT__BLOCK:
        getBlock().clear();
        getBlock().addAll((Collection<? extends block>)newValue);
        return;
      case MyDslPackage.IFSTMT__IFSTMT:
        setIfstmt((ifstmt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.IFSTMT__SIMPLESTMT:
        setSimplestmt((simplestmt)null);
        return;
      case MyDslPackage.IFSTMT__EXPRESSION:
        setExpression((expression)null);
        return;
      case MyDslPackage.IFSTMT__BLOCK:
        getBlock().clear();
        return;
      case MyDslPackage.IFSTMT__IFSTMT:
        setIfstmt((ifstmt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.IFSTMT__SIMPLESTMT:
        return simplestmt != null;
      case MyDslPackage.IFSTMT__EXPRESSION:
        return expression != null;
      case MyDslPackage.IFSTMT__BLOCK:
        return block != null && !block.isEmpty();
      case MyDslPackage.IFSTMT__IFSTMT:
        return ifstmt != null;
    }
    return super.eIsSet(featureID);
  }

} //ifstmtImpl
