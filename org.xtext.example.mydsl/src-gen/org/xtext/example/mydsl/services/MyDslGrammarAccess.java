/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		////Domainmodel :
		////    (elements+=Type)*;
		////  
		////Type:
		////    DataType | Entity;
		////  
		////DataType:
		////    'datatype' name=ID;
		//// 
		////Entity:
		////    'entity' name=ID ('extends' superType=[Entity])? '{'
		////        (features+=Feature)*
		////    '}';
		//// 
		////Feature:
		////    (many?='many')? name=ID ':' type=[Type];
		//Model:
		//	elements+=expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=expression*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//expression
		public RuleCall getElementsExpressionParserRuleCall_0() { return cElementsExpressionParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryexprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpressionauxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionauxExpressionauxParserRuleCall_1_0 = (RuleCall)cExpressionauxAssignment_1.eContents().get(0);
		
		//expression:
		//	unaryexpr expressionaux+=expressionaux;
		@Override public ParserRule getRule() { return rule; }
		
		//unaryexpr expressionaux+=expressionaux
		public Group getGroup() { return cGroup; }
		
		//unaryexpr
		public RuleCall getUnaryexprParserRuleCall_0() { return cUnaryexprParserRuleCall_0; }
		
		//expressionaux+=expressionaux
		public Assignment getExpressionauxAssignment_1() { return cExpressionauxAssignment_1; }
		
		//expressionaux
		public RuleCall getExpressionauxExpressionauxParserRuleCall_1_0() { return cExpressionauxExpressionauxParserRuleCall_1_0; }
	}
	public class ExpressionauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expressionaux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cBINARY_OPTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpressionauxAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionauxExpressionauxParserRuleCall_0_2_0 = (RuleCall)cExpressionauxAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExperssionauxAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expressionaux:
		//	BINARY_OP expression expressionaux+=expressionaux | {experssionaux} ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//// verificar como é vazio
		//BINARY_OP expression expressionaux+=expressionaux | {experssionaux} ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// verificar como é vazio
		//BINARY_OP expression expressionaux+=expressionaux
		public Group getGroup_0() { return cGroup_0; }
		
		//// verificar como é vazio
		//BINARY_OP
		public RuleCall getBINARY_OPTerminalRuleCall_0_0() { return cBINARY_OPTerminalRuleCall_0_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//expressionaux+=expressionaux
		public Assignment getExpressionauxAssignment_0_2() { return cExpressionauxAssignment_0_2; }
		
		//expressionaux
		public RuleCall getExpressionauxExpressionauxParserRuleCall_0_2_0() { return cExpressionauxExpressionauxParserRuleCall_0_2_0; }
		
		//{experssionaux} ANY_OTHER
		public Group getGroup_1() { return cGroup_1; }
		
		//{experssionaux}
		public Action getExperssionauxAction_1_0() { return cExperssionauxAction_1_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1_1() { return cANY_OTHERTerminalRuleCall_1_1; }
	}
	public class UnaryexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unaryexpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimaryexprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryexprPrimaryexprParserRuleCall_0_0 = (RuleCall)cPrimaryexprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUNARY_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryexprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//unaryexpr:
		//	primaryexpr=primaryexpr | UNARY_OP unaryexpr;
		@Override public ParserRule getRule() { return rule; }
		
		//primaryexpr=primaryexpr | UNARY_OP unaryexpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primaryexpr=primaryexpr
		public Assignment getPrimaryexprAssignment_0() { return cPrimaryexprAssignment_0; }
		
		//primaryexpr
		public RuleCall getPrimaryexprPrimaryexprParserRuleCall_0_0() { return cPrimaryexprPrimaryexprParserRuleCall_0_0; }
		
		//UNARY_OP unaryexpr
		public Group getGroup_1() { return cGroup_1; }
		
		//UNARY_OP
		public RuleCall getUNARY_OPTerminalRuleCall_1_0() { return cUNARY_OPTerminalRuleCall_1_0; }
		
		//unaryexpr
		public RuleCall getUnaryexprParserRuleCall_1_1() { return cUnaryexprParserRuleCall_1_1; }
	}
	public class PrimaryexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.primaryexpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOperandParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_0_1_0 = (RuleCall)cPrimaryexprauxAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cConversionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_1_1_0 = (RuleCall)cPrimaryexprauxAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cMethodexprParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cPrimaryexprauxParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//primaryexpr:
		//	operand primaryexpraux=primaryexpraux | conversion primaryexpraux=primaryexpraux | methodexpr primaryexpraux;
		@Override public ParserRule getRule() { return rule; }
		
		//operand primaryexpraux=primaryexpraux | conversion primaryexpraux=primaryexpraux | methodexpr primaryexpraux
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operand primaryexpraux=primaryexpraux
		public Group getGroup_0() { return cGroup_0; }
		
		//operand
		public RuleCall getOperandParserRuleCall_0_0() { return cOperandParserRuleCall_0_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_0_1() { return cPrimaryexprauxAssignment_0_1; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_0_1_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_0_1_0; }
		
		//conversion primaryexpraux=primaryexpraux
		public Group getGroup_1() { return cGroup_1; }
		
		//conversion
		public RuleCall getConversionParserRuleCall_1_0() { return cConversionParserRuleCall_1_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_1_1() { return cPrimaryexprauxAssignment_1_1; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_1_1_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_1_1_0; }
		
		//methodexpr primaryexpraux
		public Group getGroup_2() { return cGroup_2; }
		
		//methodexpr
		public RuleCall getMethodexprParserRuleCall_2_0() { return cMethodexprParserRuleCall_2_0; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxParserRuleCall_2_1() { return cPrimaryexprauxParserRuleCall_2_1; }
	}
	public class PrimaryexprauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.primaryexpraux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSelectorParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryexprauxParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIndexParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_1_1_0 = (RuleCall)cPrimaryexprauxAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSliceParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0 = (RuleCall)cPrimaryexprauxAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cTypeassertionParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cPrimaryexprauxParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cArgumentsParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_4_1_0 = (RuleCall)cPrimaryexprauxAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPrimaryexprauxAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//primaryexpraux:
		//	selector primaryexpraux | index primaryexpraux=primaryexpraux | slice primaryexpraux=primaryexpraux | typeassertion
		//	primaryexpraux | arguments primaryexpraux=primaryexpraux | {primaryexpraux} ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO: pq precisa desse = e como é vazio???
		//selector primaryexpraux | index primaryexpraux=primaryexpraux | slice primaryexpraux=primaryexpraux | typeassertion
		//primaryexpraux | arguments primaryexpraux=primaryexpraux | {primaryexpraux} ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// TODO: pq precisa desse = e como é vazio???
		//selector primaryexpraux
		public Group getGroup_0() { return cGroup_0; }
		
		//// TODO: pq precisa desse = e como é vazio???
		//selector
		public RuleCall getSelectorParserRuleCall_0_0() { return cSelectorParserRuleCall_0_0; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxParserRuleCall_0_1() { return cPrimaryexprauxParserRuleCall_0_1; }
		
		//index primaryexpraux=primaryexpraux
		public Group getGroup_1() { return cGroup_1; }
		
		//index
		public RuleCall getIndexParserRuleCall_1_0() { return cIndexParserRuleCall_1_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_1_1() { return cPrimaryexprauxAssignment_1_1; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_1_1_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_1_1_0; }
		
		//slice primaryexpraux=primaryexpraux
		public Group getGroup_2() { return cGroup_2; }
		
		//slice
		public RuleCall getSliceParserRuleCall_2_0() { return cSliceParserRuleCall_2_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_2_1() { return cPrimaryexprauxAssignment_2_1; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0; }
		
		//typeassertion primaryexpraux
		public Group getGroup_3() { return cGroup_3; }
		
		//typeassertion
		public RuleCall getTypeassertionParserRuleCall_3_0() { return cTypeassertionParserRuleCall_3_0; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxParserRuleCall_3_1() { return cPrimaryexprauxParserRuleCall_3_1; }
		
		//arguments primaryexpraux=primaryexpraux
		public Group getGroup_4() { return cGroup_4; }
		
		//arguments
		public RuleCall getArgumentsParserRuleCall_4_0() { return cArgumentsParserRuleCall_4_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_4_1() { return cPrimaryexprauxAssignment_4_1; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_4_1_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_4_1_0; }
		
		//{primaryexpraux} ANY_OTHER
		public Group getGroup_5() { return cGroup_5; }
		
		//{primaryexpraux}
		public Action getPrimaryexprauxAction_5_0() { return cPrimaryexprauxAction_5_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_5_1() { return cANY_OTHERTerminalRuleCall_5_1; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//index:
		//	"[" expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" expression "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.slice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSliceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExpressionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_0_4_0 = (RuleCall)cExpressionAssignment_0_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpressionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_1_3_0 = (RuleCall)cExpressionAssignment_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cExpressionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_1_5_0 = (RuleCall)cExpressionAssignment_1_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//slice:
		//	{slice} "[" expression+=expression? ":" expression+=expression? "]" |
		//	"[" expression? ":" expression+=expression ":" expression+=expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//{slice} "[" expression+=expression? ":" expression+=expression? "]" | "[" expression? ":" expression+=expression ":"
		//expression+=expression "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{slice} "[" expression+=expression? ":" expression+=expression? "]"
		public Group getGroup_0() { return cGroup_0; }
		
		//{slice}
		public Action getSliceAction_0_0() { return cSliceAction_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//expression+=expression?
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//":"
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }
		
		//expression+=expression?
		public Assignment getExpressionAssignment_0_4() { return cExpressionAssignment_0_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_4_0() { return cExpressionExpressionParserRuleCall_0_4_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_5() { return cRightSquareBracketKeyword_0_5; }
		
		//"[" expression? ":" expression+=expression ":" expression+=expression "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//expression?
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_3() { return cExpressionAssignment_1_3; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_3_0() { return cExpressionExpressionParserRuleCall_1_3_0; }
		
		//":"
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_5() { return cExpressionAssignment_1_5; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_5_0() { return cExpressionExpressionParserRuleCall_1_5_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_6() { return cRightSquareBracketKeyword_1_6; }
	}
	public class MethodexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.methodexpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReceivertypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cMethodnameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//methodexpr:
		//	receivertype "." methodname;
		@Override public ParserRule getRule() { return rule; }
		
		//receivertype "." methodname
		public Group getGroup() { return cGroup; }
		
		//receivertype
		public RuleCall getReceivertypeParserRuleCall_0() { return cReceivertypeParserRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//methodname
		public RuleCall getMethodnameParserRuleCall_2() { return cMethodnameParserRuleCall_2; }
	}
	public class ReceivertypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.receivertype");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//receivertype:
		//	type;
		@Override public ParserRule getRule() { return rule; }
		
		//type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//conversion:
		//	type "(" expression ","? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//type "(" expression ","? ")"
		public Group getGroup() { return cGroup; }
		
		//type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOperandnameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//operand:
		//	{operand} literal | {operand} operandname | "(" expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{operand} literal | {operand} operandname | "(" expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{operand} literal
		public Group getGroup_0() { return cGroup_0; }
		
		//{operand}
		public Action getOperandAction_0_0() { return cOperandAction_0_0; }
		
		//literal
		public RuleCall getLiteralParserRuleCall_0_1() { return cLiteralParserRuleCall_0_1; }
		
		//{operand} operandname
		public Group getGroup_1() { return cGroup_1; }
		
		//{operand}
		public Action getOperandAction_1_0() { return cOperandAction_1_0; }
		
		//operandname
		public RuleCall getOperandnameParserRuleCall_1_1() { return cOperandnameParserRuleCall_1_1; }
		
		//"(" expression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class CompositelitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.compositelit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteraltypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLiteralvalueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//compositelit:
		//	literaltype literalvalue;
		@Override public ParserRule getRule() { return rule; }
		
		//literaltype literalvalue
		public Group getGroup() { return cGroup; }
		
		//literaltype
		public RuleCall getLiteraltypeParserRuleCall_0() { return cLiteraltypeParserRuleCall_0; }
		
		//literalvalue
		public RuleCall getLiteralvalueParserRuleCall_1() { return cLiteralvalueParserRuleCall_1; }
	}
	public class LiteraltypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.literaltype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructtypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cElementtypeParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cSlicetypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMaptypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypenameParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//literaltype:
		//	structtype | "[" "..." "]" elementtype | slicetype | maptype | typename;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO: adicionar arraytype
		//structtype | "[" "..." "]" elementtype | slicetype | maptype | typename
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////TODO: adicionar arraytype
		//structtype
		public RuleCall getStructtypeParserRuleCall_0() { return cStructtypeParserRuleCall_0; }
		
		//"[" "..." "]" elementtype
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//elementtype
		public RuleCall getElementtypeParserRuleCall_1_3() { return cElementtypeParserRuleCall_1_3; }
		
		//slicetype
		public RuleCall getSlicetypeParserRuleCall_2() { return cSlicetypeParserRuleCall_2; }
		
		//maptype
		public RuleCall getMaptypeParserRuleCall_3() { return cMaptypeParserRuleCall_3; }
		
		//typename
		public RuleCall getTypenameParserRuleCall_4() { return cTypenameParserRuleCall_4; }
	}
	public class LiteralvalueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.literalvalue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralvalueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementlistAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementlistElementlistParserRuleCall_2_0_0 = (RuleCall)cElementlistAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//literalvalue:
		//	{literalvalue} "{" (elementlist=elementlist ","?)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{literalvalue} "{" (elementlist=elementlist ","?)? "}"
		public Group getGroup() { return cGroup; }
		
		//{literalvalue}
		public Action getLiteralvalueAction_0() { return cLiteralvalueAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(elementlist=elementlist ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elementlist=elementlist
		public Assignment getElementlistAssignment_2_0() { return cElementlistAssignment_2_0; }
		
		//elementlist
		public RuleCall getElementlistElementlistParserRuleCall_2_0_0() { return cElementlistElementlistParserRuleCall_2_0_0; }
		
		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.elementlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyedelementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyedelementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyedelementKeyedelementParserRuleCall_1_1_0 = (RuleCall)cKeyedelementAssignment_1_1.eContents().get(0);
		
		//elementlist:
		//	keyedelement ("," keyedelement+=keyedelement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyedelement ("," keyedelement+=keyedelement)*
		public Group getGroup() { return cGroup; }
		
		//keyedelement
		public RuleCall getKeyedelementParserRuleCall_0() { return cKeyedelementParserRuleCall_0; }
		
		//("," keyedelement+=keyedelement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//keyedelement+=keyedelement
		public Assignment getKeyedelementAssignment_1_1() { return cKeyedelementAssignment_1_1; }
		
		//keyedelement
		public RuleCall getKeyedelementKeyedelementParserRuleCall_1_1_0() { return cKeyedelementKeyedelementParserRuleCall_1_1_0; }
	}
	public class KeyedelementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.keyedelement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//keyedelement:
		//	(key ":")? element=element;
		@Override public ParserRule getRule() { return rule; }
		
		//(key ":")? element=element
		public Group getGroup() { return cGroup; }
		
		//(key ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//key
		public RuleCall getKeyParserRuleCall_0_0() { return cKeyParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//element=element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cKeyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cFieldnameParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralvalueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//key:
		//	{key} fieldname | expression | literalvalue;
		@Override public ParserRule getRule() { return rule; }
		
		//{key} fieldname | expression | literalvalue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{key} fieldname
		public Group getGroup_0() { return cGroup_0; }
		
		//{key}
		public Action getKeyAction_0_0() { return cKeyAction_0_0; }
		
		//fieldname
		public RuleCall getFieldnameParserRuleCall_0_1() { return cFieldnameParserRuleCall_0_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//literalvalue
		public RuleCall getLiteralvalueParserRuleCall_2() { return cLiteralvalueParserRuleCall_2; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralvalueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//element:
		//	expression | literalvalue;
		@Override public ParserRule getRule() { return rule; }
		
		//expression | literalvalue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//literalvalue
		public RuleCall getLiteralvalueParserRuleCall_1() { return cLiteralvalueParserRuleCall_1; }
	}
	public class FunctionlitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.functionlit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cFunctionbodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//functionlit:
		//	"func" signature functionbody;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" signature functionbody
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
		
		//functionbody
		public RuleCall getFunctionbodyParserRuleCall_2() { return cFunctionbodyParserRuleCall_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.statement");
		private final Keyword cFRANKLINKeyword = (Keyword)rule.eContents().get(1);
		
		//statement: // TODO:
		//	"FRANKLIN";
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO:
		//"FRANKLIN"
		public Keyword getFRANKLINKeyword() { return cFRANKLINKeyword; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementlistParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//block:
		//	"{" statementlist "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" statementlist "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//statementlist
		public RuleCall getStatementlistParserRuleCall_1() { return cStatementlistParserRuleCall_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.statementlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//statementlist:
		//	(statement ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//(statement ";")*
		public Group getGroup() { return cGroup; }
		
		//statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class FunctionbodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.functionbody");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//functionbody:
		//	block;
		@Override public ParserRule getRule() { return rule; }
		
		//block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class TypeassertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typeassertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//typeassertion:
		//	"." "(" type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"." "(" type ")"
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cExpressionlistAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_2_0_0_0 = (RuleCall)cExpressionlistAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2_0_1_0 = (RuleCall)cGroup_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cExpressionlistAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_2_0_1_1_1_0 = (RuleCall)cExpressionlistAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//arguments:
		//	{arguments} "(" ((expressionlist=expressionlist | type ("," expressionlist=expressionlist)?) "..."? ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{arguments} "(" ((expressionlist=expressionlist | type ("," expressionlist=expressionlist)?) "..."? ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//{arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((expressionlist=expressionlist | type ("," expressionlist=expressionlist)?) "..."? ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//expressionlist=expressionlist | type ("," expressionlist=expressionlist)?
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_2_0_0() { return cExpressionlistAssignment_2_0_0; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_2_0_0_0() { return cExpressionlistExpressionlistParserRuleCall_2_0_0_0; }
		
		//type ("," expressionlist=expressionlist)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_2_0_1_0() { return cTypeParserRuleCall_2_0_1_0; }
		
		//("," expressionlist=expressionlist)?
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_2_0_1_1_1() { return cExpressionlistAssignment_2_0_1_1_1; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_2_0_1_1_1_0() { return cExpressionlistExpressionlistParserRuleCall_2_0_1_1_1_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//","?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expressionlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//expressionlist:
		//	expression ("," expression+=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expression ("," expression+=expression)*
		public Group getGroup() { return cGroup; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//("," expression+=expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//selector:
		//	"." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class FieldnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.fieldname");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//fieldname:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.literal");
		private final RuleCall cBasiclitParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//literal:
		//	basiclit;
		@Override public ParserRule getRule() { return rule; }
		
		//basiclit
		public RuleCall getBasiclitParserRuleCall() { return cBasiclitParserRuleCall; }
	}
	public class BasiclitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.basiclit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInt_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImaginary_litParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRune_litParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cString_litParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//basiclit:
		//	int_lit | float_lit | imaginary_lit | rune_lit | string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//int_lit | float_lit | imaginary_lit | rune_lit | string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int_lit
		public RuleCall getInt_litParserRuleCall_0() { return cInt_litParserRuleCall_0; }
		
		//float_lit
		public RuleCall getFloat_litParserRuleCall_1() { return cFloat_litParserRuleCall_1; }
		
		//imaginary_lit
		public RuleCall getImaginary_litParserRuleCall_2() { return cImaginary_litParserRuleCall_2; }
		
		//rune_lit
		public RuleCall getRune_litParserRuleCall_3() { return cRune_litParserRuleCall_3; }
		
		//string_lit
		public RuleCall getString_litParserRuleCall_4() { return cString_litParserRuleCall_4; }
	}
	public class OperandnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.operandname");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualified_identParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//operandname:
		//	IDENTIFIER | qualified_ident;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | qualified_ident
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//qualified_ident
		public RuleCall getQualified_identParserRuleCall_1() { return cQualified_identParserRuleCall_1; }
	}
	public class SlicetypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.slicetype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cElementtypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//slicetype:
		//	"[" "]" elementtype;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" "]" elementtype
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
		
		//elementtype
		public RuleCall getElementtypeParserRuleCall_2() { return cElementtypeParserRuleCall_2; }
	}
	public class PointertypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.pointertype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBasetypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//pointertype:
		//	"*" basetype;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" basetype
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//basetype
		public RuleCall getBasetypeParserRuleCall_1() { return cBasetypeParserRuleCall_1; }
	}
	public class BasetypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.basetype");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//basetype:
		//	type;
		@Override public ParserRule getRule() { return rule; }
		
		//type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ChanneltypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.channeltype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cChanKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cChanKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cChanKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final RuleCall cElementtypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//channeltype:
		//	("chan" | "chan" "<-" | "<-" "chan") elementtype;
		@Override public ParserRule getRule() { return rule; }
		
		//("chan" | "chan" "<-" | "<-" "chan") elementtype
		public Group getGroup() { return cGroup; }
		
		//"chan" | "chan" "<-" | "<-" "chan"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_0() { return cChanKeyword_0_0; }
		
		//"chan" "<-"
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"chan"
		public Keyword getChanKeyword_0_1_0() { return cChanKeyword_0_1_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_1() { return cLessThanSignHyphenMinusKeyword_0_1_1; }
		
		//"<-" "chan"
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_2_0() { return cLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_2_1() { return cChanKeyword_0_2_1; }
		
		//elementtype
		public RuleCall getElementtypeParserRuleCall_1() { return cElementtypeParserRuleCall_1; }
	}
	public class MaptypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.maptype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cKeytypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cElementtypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//maptype:
		//	"map" "[" keytype "]" elementtype;
		@Override public ParserRule getRule() { return rule; }
		
		//"map" "[" keytype "]" elementtype
		public Group getGroup() { return cGroup; }
		
		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//keytype
		public RuleCall getKeytypeParserRuleCall_2() { return cKeytypeParserRuleCall_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//elementtype
		public RuleCall getElementtypeParserRuleCall_4() { return cElementtypeParserRuleCall_4; }
	}
	public class KeytypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.keytype");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//keytype:
		//	type;
		@Override public ParserRule getRule() { return rule; }
		
		//type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ElementtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.elementtype");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//elementtype:
		//	type;
		@Override public ParserRule getRule() { return rule; }
		
		//type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class InterfacetypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.interfacetype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMethodspecParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//interfacetype:
		//	"interface" "{" (methodspec ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"interface" "{" (methodspec ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(methodspec ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//methodspec
		public RuleCall getMethodspecParserRuleCall_2_0() { return cMethodspecParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MethodspecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.methodspec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMethodnameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cInterfacetypenameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//methodspec:
		//	methodname signature | interfacetypename;
		@Override public ParserRule getRule() { return rule; }
		
		//methodname signature | interfacetypename
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//methodname signature
		public Group getGroup_0() { return cGroup_0; }
		
		//methodname
		public RuleCall getMethodnameParserRuleCall_0_0() { return cMethodnameParserRuleCall_0_0; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_0_1() { return cSignatureParserRuleCall_0_1; }
		
		//interfacetypename
		public RuleCall getInterfacetypenameParserRuleCall_1() { return cInterfacetypenameParserRuleCall_1; }
	}
	public class MethodnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.methodname");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//methodname:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class InterfacetypenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.interfacetypename");
		private final RuleCall cTypenameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//interfacetypename:
		//	typename;
		@Override public ParserRule getRule() { return rule; }
		
		//typename
		public RuleCall getTypenameParserRuleCall() { return cTypenameParserRuleCall; }
	}
	public class FunctiontypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.functiontype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//functiontype:
		//	"func" signature;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" signature
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cResultParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//signature:
		//	parameters result?;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters result?
		public Group getGroup() { return cGroup; }
		
		//parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//result?
		public RuleCall getResultParserRuleCall_1() { return cResultParserRuleCall_1; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//result:
		//	parameters | type;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters | type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cParameterlistParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//parameters:
		//	"(" (parameterlist ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" (parameterlist ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(parameterlist ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//parameterlist
		public RuleCall getParameterlistParserRuleCall_1_0() { return cParameterlistParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameterlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterdeclParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cParameterdeclParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//parameterlist:
		//	parameterdecl ("," parameterdecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterdecl ("," parameterdecl)*
		public Group getGroup() { return cGroup; }
		
		//parameterdecl
		public RuleCall getParameterdeclParserRuleCall_0() { return cParameterdeclParserRuleCall_0; }
		
		//("," parameterdecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameterdecl
		public RuleCall getParameterdeclParserRuleCall_1_1() { return cParameterdeclParserRuleCall_1_1; }
	}
	public class ParameterdeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameterdecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierlistParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//parameterdecl:
		//	identifierlist? "..."? type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierlist? "..."? type
		public Group getGroup() { return cGroup; }
		
		//identifierlist?
		public RuleCall getIdentifierlistParserRuleCall_0() { return cIdentifierlistParserRuleCall_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class StructtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.structtype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cFielddeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//structtype:
		//	"struct" "{" (fielddecl ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" "{" (fielddecl ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(fielddecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//fielddecl
		public RuleCall getFielddeclParserRuleCall_2_0() { return cFielddeclParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FielddeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.fielddecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdentifierlistParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cEmbeddedfieldParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTagParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fielddecl:
		//	(identifierlist type | embeddedfield) tag?;
		@Override public ParserRule getRule() { return rule; }
		
		//(identifierlist type | embeddedfield) tag?
		public Group getGroup() { return cGroup; }
		
		//identifierlist type | embeddedfield
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//identifierlist type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//identifierlist
		public RuleCall getIdentifierlistParserRuleCall_0_0_0() { return cIdentifierlistParserRuleCall_0_0_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_0_0_1() { return cTypeParserRuleCall_0_0_1; }
		
		//embeddedfield
		public RuleCall getEmbeddedfieldParserRuleCall_0_1() { return cEmbeddedfieldParserRuleCall_0_1; }
		
		//tag?
		public RuleCall getTagParserRuleCall_1() { return cTagParserRuleCall_1; }
	}
	public class EmbeddedfieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.embeddedfield");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypenameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//embeddedfield:
		//	"*"? typename;
		@Override public ParserRule getRule() { return rule; }
		
		//"*"? typename
		public Group getGroup() { return cGroup; }
		
		//"*"?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//typename
		public RuleCall getTypenameParserRuleCall_1() { return cTypenameParserRuleCall_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type");
		private final RuleCall cTypenameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//type:
		//	typename;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO: completar
		//typename
		public RuleCall getTypenameParserRuleCall() { return cTypenameParserRuleCall; }
	}
	public class IdentifierlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identifierlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//identifierlist:
		//	IDENTIFIER ("," IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER ("," IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.tag");
		private final RuleCall cString_litParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//tag:
		//	string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//string_lit
		public RuleCall getString_litParserRuleCall() { return cString_litParserRuleCall; }
	}
	public class TypenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typename");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualified_identParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//typename:
		//	IDENTIFIER | qualified_ident;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | qualified_ident
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//qualified_ident
		public RuleCall getQualified_identParserRuleCall_1() { return cQualified_identParserRuleCall_1; }
	}
	public class Qualified_identElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.qualified_ident");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackagenameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//qualified_ident:
		//	packagename "." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//packagename "." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//packagename
		public RuleCall getPackagenameParserRuleCall_0() { return cPackagenameParserRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
	}
	public class PackagenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.packagename");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//packagename:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class String_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.string_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRaw_string_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterpreted_string_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//string_lit:
		//	raw_string_lit | interpreted_string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//raw_string_lit | interpreted_string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//raw_string_lit
		public RuleCall getRaw_string_litParserRuleCall_0() { return cRaw_string_litParserRuleCall_0; }
		
		//interpreted_string_lit
		public RuleCall getInterpreted_string_litParserRuleCall_1() { return cInterpreted_string_litParserRuleCall_1; }
	}
	public class Raw_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.raw_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraveAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cNKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cGraveAccentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//raw_string_lit:
		//	"`" (LETTER | DECIMAL_DIGIT | "\\n")* "`";
		@Override public ParserRule getRule() { return rule; }
		
		//"`" (LETTER | DECIMAL_DIGIT | "\\n")* "`"
		public Group getGroup() { return cGroup; }
		
		//"`"
		public Keyword getGraveAccentKeyword_0() { return cGraveAccentKeyword_0; }
		
		//(LETTER | DECIMAL_DIGIT | "\\n")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_0() { return cLETTERTerminalRuleCall_1_0; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_1_1() { return cDECIMAL_DIGITTerminalRuleCall_1_1; }
		
		//"\\n"
		public Keyword getNKeyword_1_2() { return cNKeyword_1_2; }
		
		//"`"
		public Keyword getGraveAccentKeyword_2() { return cGraveAccentKeyword_2; }
	}
	public class Interpreted_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.interpreted_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_valueParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//interpreted_string_lit:
		//	"\"" (unicode_value | byte_value)* "\"";
		@Override public ParserRule getRule() { return rule; }
		
		//"\"" (unicode_value | byte_value)* "\""
		public Group getGroup() { return cGroup; }
		
		//"\""
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//(unicode_value | byte_value)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_value
		public RuleCall getUnicode_valueParserRuleCall_1_0() { return cUnicode_valueParserRuleCall_1_0; }
		
		//byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class Rune_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.rune_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_valueParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//rune_lit:
		//	"'" (unicode_value | byte_value) "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'" (unicode_value | byte_value) "'"
		public Group getGroup() { return cGroup; }
		
		//"'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//unicode_value | byte_value
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_value
		public RuleCall getUnicode_valueParserRuleCall_1_0() { return cUnicode_valueParserRuleCall_1_0; }
		
		//byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//"'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class Int_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.int_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHex_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//int_lit:
		//	(DECIMAL_DIGIT | hex_lit)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(DECIMAL_DIGIT | hex_lit)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_0() { return cDECIMAL_DIGITTerminalRuleCall_0; }
		
		//hex_lit
		public RuleCall getHex_litParserRuleCall_1() { return cHex_litParserRuleCall_1; }
	}
	public class Hex_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.hex_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cXKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cXKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//hex_lit:
		//	"0" ("x" | "X") HEX_DIGIT+;
		@Override public ParserRule getRule() { return rule; }
		
		//"0" ("x" | "X") HEX_DIGIT+
		public Group getGroup() { return cGroup; }
		
		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }
		
		//"x" | "X"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"x"
		public Keyword getXKeyword_1_0() { return cXKeyword_1_0; }
		
		//"X"
		public Keyword getXKeyword_1_1() { return cXKeyword_1_1; }
		
		//HEX_DIGIT+
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
	}
	public class Imaginary_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.imaginary_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//imaginary_lit:
		//	(decimals | float_lit) "i";
		@Override public ParserRule getRule() { return rule; }
		
		//(decimals | float_lit) "i"
		public Group getGroup() { return cGroup; }
		
		//decimals | float_lit
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_0_0() { return cDecimalsParserRuleCall_0_0; }
		
		//float_lit
		public RuleCall getFloat_litParserRuleCall_0_1() { return cFloat_litParserRuleCall_0_1; }
		
		//"i"
		public Keyword getIKeyword_1() { return cIKeyword_1; }
	}
	public class Float_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.float_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExponentParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExponentParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cExponentParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//float_lit:
		//	decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?;
		@Override public ParserRule getRule() { return rule; }
		
		//decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//decimals "." decimals? exponent?
		public Group getGroup_0() { return cGroup_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_0_0() { return cDecimalsParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//decimals?
		public RuleCall getDecimalsParserRuleCall_0_2() { return cDecimalsParserRuleCall_0_2; }
		
		//exponent?
		public RuleCall getExponentParserRuleCall_0_3() { return cExponentParserRuleCall_0_3; }
		
		//decimals exponent
		public Group getGroup_1() { return cGroup_1; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_1_0() { return cDecimalsParserRuleCall_1_0; }
		
		//exponent
		public RuleCall getExponentParserRuleCall_1_1() { return cExponentParserRuleCall_1_1; }
		
		//"." decimals exponent?
		public Group getGroup_2() { return cGroup_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_2_1() { return cDecimalsParserRuleCall_2_1; }
		
		//exponent?
		public RuleCall getExponentParserRuleCall_2_2() { return cExponentParserRuleCall_2_2; }
	}
	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//exponent:
		//	("e" | "E") ("+" | "-")? decimals;
		@Override public ParserRule getRule() { return rule; }
		
		//("e" | "E") ("+" | "-")? decimals
		public Group getGroup() { return cGroup; }
		
		//"e" | "E"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }
		
		//"E"
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }
		
		//("+" | "-")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_2() { return cDecimalsParserRuleCall_2; }
	}
	public class DecimalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.decimals");
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//decimals:
		//	DECIMAL_DIGIT+;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_DIGIT+
		public RuleCall getDECIMAL_DIGITTerminalRuleCall() { return cDECIMAL_DIGITTerminalRuleCall; }
	}
	public class Byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.byte_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOctal_byte_valueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHex_byte_valueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//byte_value:
		//	octal_byte_value | hex_byte_value;
		@Override public ParserRule getRule() { return rule; }
		
		//octal_byte_value | hex_byte_value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//octal_byte_value
		public RuleCall getOctal_byte_valueParserRuleCall_0() { return cOctal_byte_valueParserRuleCall_0; }
		
		//hex_byte_value
		public RuleCall getHex_byte_valueParserRuleCall_1() { return cHex_byte_valueParserRuleCall_1; }
	}
	public class Hex_byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.hex_byte_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//hex_byte_value:
		//	'\\' "x" HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//'\\' "x" HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//'\\'
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//"x"
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
	}
	public class Octal_byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.octal_byte_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//octal_byte_value:
		//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT
		public Group getGroup() { return cGroup; }
		
		//'\\'
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_1() { return cOCTAL_DIGITTerminalRuleCall_1; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_2() { return cOCTAL_DIGITTerminalRuleCall_2; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_3() { return cOCTAL_DIGITTerminalRuleCall_3; }
	}
	public class Unicode_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unicode_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final RuleCall cLETTERTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLittle_u_valueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBig_u_valueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cESCAPED_CHARTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//unicode_value:
		//	(LETTER | DECIMAL_DIGIT) | little_u_value | big_u_value | ESCAPED_CHAR;
		@Override public ParserRule getRule() { return rule; }
		
		//(LETTER | DECIMAL_DIGIT) | little_u_value | big_u_value | ESCAPED_CHAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(LETTER | DECIMAL_DIGIT)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0_0() { return cLETTERTerminalRuleCall_0_0; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_0_1() { return cDECIMAL_DIGITTerminalRuleCall_0_1; }
		
		//little_u_value
		public RuleCall getLittle_u_valueParserRuleCall_1() { return cLittle_u_valueParserRuleCall_1; }
		
		//big_u_value
		public RuleCall getBig_u_valueParserRuleCall_2() { return cBig_u_valueParserRuleCall_2; }
		
		//ESCAPED_CHAR
		public RuleCall getESCAPED_CHARTerminalRuleCall_3() { return cESCAPED_CHARTerminalRuleCall_3; }
	}
	public class Big_u_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.big_u_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cHEX_DIGITTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cHEX_DIGITTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cHEX_DIGITTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cHEX_DIGITTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//big_u_value:
		//	"\\" "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//"\\" "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//"\\"
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//"U"
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_4() { return cHEX_DIGITTerminalRuleCall_4; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_5() { return cHEX_DIGITTerminalRuleCall_5; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_6() { return cHEX_DIGITTerminalRuleCall_6; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_7() { return cHEX_DIGITTerminalRuleCall_7; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_8() { return cHEX_DIGITTerminalRuleCall_8; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_9() { return cHEX_DIGITTerminalRuleCall_9; }
	}
	public class Little_u_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.little_u_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//little_u_value:
		//	"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//"\\"
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//"u"
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_4() { return cHEX_DIGITTerminalRuleCall_4; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_5() { return cHEX_DIGITTerminalRuleCall_5; }
	}
	
	
	private final ModelElements pModel;
	private final ExpressionElements pExpression;
	private final ExpressionauxElements pExpressionaux;
	private final UnaryexprElements pUnaryexpr;
	private final PrimaryexprElements pPrimaryexpr;
	private final PrimaryexprauxElements pPrimaryexpraux;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final MethodexprElements pMethodexpr;
	private final ReceivertypeElements pReceivertype;
	private final ConversionElements pConversion;
	private final OperandElements pOperand;
	private final CompositelitElements pCompositelit;
	private final LiteraltypeElements pLiteraltype;
	private final LiteralvalueElements pLiteralvalue;
	private final ElementlistElements pElementlist;
	private final KeyedelementElements pKeyedelement;
	private final KeyElements pKey;
	private final ElementElements pElement;
	private final FunctionlitElements pFunctionlit;
	private final StatementElements pStatement;
	private final BlockElements pBlock;
	private final StatementlistElements pStatementlist;
	private final FunctionbodyElements pFunctionbody;
	private final TypeassertionElements pTypeassertion;
	private final ArgumentsElements pArguments;
	private final ExpressionlistElements pExpressionlist;
	private final SelectorElements pSelector;
	private final FieldnameElements pFieldname;
	private final LiteralElements pLiteral;
	private final BasiclitElements pBasiclit;
	private final OperandnameElements pOperandname;
	private final SlicetypeElements pSlicetype;
	private final PointertypeElements pPointertype;
	private final BasetypeElements pBasetype;
	private final ChanneltypeElements pChanneltype;
	private final MaptypeElements pMaptype;
	private final KeytypeElements pKeytype;
	private final ElementtypeElements pElementtype;
	private final InterfacetypeElements pInterfacetype;
	private final MethodspecElements pMethodspec;
	private final MethodnameElements pMethodname;
	private final InterfacetypenameElements pInterfacetypename;
	private final FunctiontypeElements pFunctiontype;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterlistElements pParameterlist;
	private final ParameterdeclElements pParameterdecl;
	private final StructtypeElements pStructtype;
	private final FielddeclElements pFielddecl;
	private final EmbeddedfieldElements pEmbeddedfield;
	private final TypeElements pType;
	private final IdentifierlistElements pIdentifierlist;
	private final TagElements pTag;
	private final TypenameElements pTypename;
	private final Qualified_identElements pQualified_ident;
	private final PackagenameElements pPackagename;
	private final String_litElements pString_lit;
	private final Raw_string_litElements pRaw_string_lit;
	private final Interpreted_string_litElements pInterpreted_string_lit;
	private final Rune_litElements pRune_lit;
	private final Int_litElements pInt_lit;
	private final Hex_litElements pHex_lit;
	private final Imaginary_litElements pImaginary_lit;
	private final Float_litElements pFloat_lit;
	private final ExponentElements pExponent;
	private final DecimalsElements pDecimals;
	private final Byte_valueElements pByte_value;
	private final Hex_byte_valueElements pHex_byte_value;
	private final Octal_byte_valueElements pOctal_byte_value;
	private final Unicode_valueElements pUnicode_value;
	private final Big_u_valueElements pBig_u_value;
	private final Little_u_valueElements pLittle_u_value;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tA_F;
	private final TerminalRule tLETTER;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tESCAPED_CHAR;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tBINARY_OP;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tMUL_OP;
	private final TerminalRule tUNARY_OP;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionaux = new ExpressionauxElements();
		this.pUnaryexpr = new UnaryexprElements();
		this.pPrimaryexpr = new PrimaryexprElements();
		this.pPrimaryexpraux = new PrimaryexprauxElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pMethodexpr = new MethodexprElements();
		this.pReceivertype = new ReceivertypeElements();
		this.pConversion = new ConversionElements();
		this.pOperand = new OperandElements();
		this.pCompositelit = new CompositelitElements();
		this.pLiteraltype = new LiteraltypeElements();
		this.pLiteralvalue = new LiteralvalueElements();
		this.pElementlist = new ElementlistElements();
		this.pKeyedelement = new KeyedelementElements();
		this.pKey = new KeyElements();
		this.pElement = new ElementElements();
		this.pFunctionlit = new FunctionlitElements();
		this.pStatement = new StatementElements();
		this.pBlock = new BlockElements();
		this.pStatementlist = new StatementlistElements();
		this.pFunctionbody = new FunctionbodyElements();
		this.pTypeassertion = new TypeassertionElements();
		this.pArguments = new ArgumentsElements();
		this.pExpressionlist = new ExpressionlistElements();
		this.pSelector = new SelectorElements();
		this.pFieldname = new FieldnameElements();
		this.pLiteral = new LiteralElements();
		this.pBasiclit = new BasiclitElements();
		this.pOperandname = new OperandnameElements();
		this.pSlicetype = new SlicetypeElements();
		this.pPointertype = new PointertypeElements();
		this.pBasetype = new BasetypeElements();
		this.pChanneltype = new ChanneltypeElements();
		this.pMaptype = new MaptypeElements();
		this.pKeytype = new KeytypeElements();
		this.pElementtype = new ElementtypeElements();
		this.pInterfacetype = new InterfacetypeElements();
		this.pMethodspec = new MethodspecElements();
		this.pMethodname = new MethodnameElements();
		this.pInterfacetypename = new InterfacetypenameElements();
		this.pFunctiontype = new FunctiontypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterlist = new ParameterlistElements();
		this.pParameterdecl = new ParameterdeclElements();
		this.pStructtype = new StructtypeElements();
		this.pFielddecl = new FielddeclElements();
		this.pEmbeddedfield = new EmbeddedfieldElements();
		this.pType = new TypeElements();
		this.pIdentifierlist = new IdentifierlistElements();
		this.pTag = new TagElements();
		this.pTypename = new TypenameElements();
		this.pQualified_ident = new Qualified_identElements();
		this.pPackagename = new PackagenameElements();
		this.pString_lit = new String_litElements();
		this.pRaw_string_lit = new Raw_string_litElements();
		this.pInterpreted_string_lit = new Interpreted_string_litElements();
		this.pRune_lit = new Rune_litElements();
		this.pInt_lit = new Int_litElements();
		this.pHex_lit = new Hex_litElements();
		this.pImaginary_lit = new Imaginary_litElements();
		this.pFloat_lit = new Float_litElements();
		this.pExponent = new ExponentElements();
		this.pDecimals = new DecimalsElements();
		this.pByte_value = new Byte_valueElements();
		this.pHex_byte_value = new Hex_byte_valueElements();
		this.pOctal_byte_value = new Octal_byte_valueElements();
		this.pUnicode_value = new Unicode_valueElements();
		this.pBig_u_value = new Big_u_valueElements();
		this.pLittle_u_value = new Little_u_valueElements();
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IDENTIFIER");
		this.tA_F = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.A_F");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HEX_DIGIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OCTAL_DIGIT");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ESCAPED_CHAR");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECIMAL_DIGIT");
		this.tBINARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BINARY_OP");
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ADD_OP");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MUL_OP");
		this.tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNARY_OP");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Domainmodel :
	////    (elements+=Type)*;
	////  
	////Type:
	////    DataType | Entity;
	////  
	////DataType:
	////    'datatype' name=ID;
	//// 
	////Entity:
	////    'entity' name=ID ('extends' superType=[Entity])? '{'
	////        (features+=Feature)*
	////    '}';
	//// 
	////Feature:
	////    (many?='many')? name=ID ':' type=[Type];
	//Model:
	//	elements+=expression*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//expression:
	//	unaryexpr expressionaux+=expressionaux;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//expressionaux:
	//	BINARY_OP expression expressionaux+=expressionaux | {experssionaux} ANY_OTHER;
	public ExpressionauxElements getExpressionauxAccess() {
		return pExpressionaux;
	}
	
	public ParserRule getExpressionauxRule() {
		return getExpressionauxAccess().getRule();
	}
	
	//unaryexpr:
	//	primaryexpr=primaryexpr | UNARY_OP unaryexpr;
	public UnaryexprElements getUnaryexprAccess() {
		return pUnaryexpr;
	}
	
	public ParserRule getUnaryexprRule() {
		return getUnaryexprAccess().getRule();
	}
	
	//primaryexpr:
	//	operand primaryexpraux=primaryexpraux | conversion primaryexpraux=primaryexpraux | methodexpr primaryexpraux;
	public PrimaryexprElements getPrimaryexprAccess() {
		return pPrimaryexpr;
	}
	
	public ParserRule getPrimaryexprRule() {
		return getPrimaryexprAccess().getRule();
	}
	
	//primaryexpraux:
	//	selector primaryexpraux | index primaryexpraux=primaryexpraux | slice primaryexpraux=primaryexpraux | typeassertion
	//	primaryexpraux | arguments primaryexpraux=primaryexpraux | {primaryexpraux} ANY_OTHER;
	public PrimaryexprauxElements getPrimaryexprauxAccess() {
		return pPrimaryexpraux;
	}
	
	public ParserRule getPrimaryexprauxRule() {
		return getPrimaryexprauxAccess().getRule();
	}
	
	//index:
	//	"[" expression "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//slice:
	//	{slice} "[" expression+=expression? ":" expression+=expression? "]" |
	//	"[" expression? ":" expression+=expression ":" expression+=expression "]";
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//methodexpr:
	//	receivertype "." methodname;
	public MethodexprElements getMethodexprAccess() {
		return pMethodexpr;
	}
	
	public ParserRule getMethodexprRule() {
		return getMethodexprAccess().getRule();
	}
	
	//receivertype:
	//	type;
	public ReceivertypeElements getReceivertypeAccess() {
		return pReceivertype;
	}
	
	public ParserRule getReceivertypeRule() {
		return getReceivertypeAccess().getRule();
	}
	
	//conversion:
	//	type "(" expression ","? ")";
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//operand:
	//	{operand} literal | {operand} operandname | "(" expression ")";
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//compositelit:
	//	literaltype literalvalue;
	public CompositelitElements getCompositelitAccess() {
		return pCompositelit;
	}
	
	public ParserRule getCompositelitRule() {
		return getCompositelitAccess().getRule();
	}
	
	//literaltype:
	//	structtype | "[" "..." "]" elementtype | slicetype | maptype | typename;
	public LiteraltypeElements getLiteraltypeAccess() {
		return pLiteraltype;
	}
	
	public ParserRule getLiteraltypeRule() {
		return getLiteraltypeAccess().getRule();
	}
	
	//literalvalue:
	//	{literalvalue} "{" (elementlist=elementlist ","?)? "}";
	public LiteralvalueElements getLiteralvalueAccess() {
		return pLiteralvalue;
	}
	
	public ParserRule getLiteralvalueRule() {
		return getLiteralvalueAccess().getRule();
	}
	
	//elementlist:
	//	keyedelement ("," keyedelement+=keyedelement)*;
	public ElementlistElements getElementlistAccess() {
		return pElementlist;
	}
	
	public ParserRule getElementlistRule() {
		return getElementlistAccess().getRule();
	}
	
	//keyedelement:
	//	(key ":")? element=element;
	public KeyedelementElements getKeyedelementAccess() {
		return pKeyedelement;
	}
	
	public ParserRule getKeyedelementRule() {
		return getKeyedelementAccess().getRule();
	}
	
	//key:
	//	{key} fieldname | expression | literalvalue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//element:
	//	expression | literalvalue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//functionlit:
	//	"func" signature functionbody;
	public FunctionlitElements getFunctionlitAccess() {
		return pFunctionlit;
	}
	
	public ParserRule getFunctionlitRule() {
		return getFunctionlitAccess().getRule();
	}
	
	//statement: // TODO:
	//	"FRANKLIN";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//block:
	//	"{" statementlist "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//statementlist:
	//	(statement ";")*;
	public StatementlistElements getStatementlistAccess() {
		return pStatementlist;
	}
	
	public ParserRule getStatementlistRule() {
		return getStatementlistAccess().getRule();
	}
	
	//functionbody:
	//	block;
	public FunctionbodyElements getFunctionbodyAccess() {
		return pFunctionbody;
	}
	
	public ParserRule getFunctionbodyRule() {
		return getFunctionbodyAccess().getRule();
	}
	
	//typeassertion:
	//	"." "(" type ")";
	public TypeassertionElements getTypeassertionAccess() {
		return pTypeassertion;
	}
	
	public ParserRule getTypeassertionRule() {
		return getTypeassertionAccess().getRule();
	}
	
	//arguments:
	//	{arguments} "(" ((expressionlist=expressionlist | type ("," expressionlist=expressionlist)?) "..."? ","?)? ")";
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//expressionlist:
	//	expression ("," expression+=expression)*;
	public ExpressionlistElements getExpressionlistAccess() {
		return pExpressionlist;
	}
	
	public ParserRule getExpressionlistRule() {
		return getExpressionlistAccess().getRule();
	}
	
	//selector:
	//	"." IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//fieldname:
	//	IDENTIFIER;
	public FieldnameElements getFieldnameAccess() {
		return pFieldname;
	}
	
	public ParserRule getFieldnameRule() {
		return getFieldnameAccess().getRule();
	}
	
	//literal:
	//	basiclit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//basiclit:
	//	int_lit | float_lit | imaginary_lit | rune_lit | string_lit;
	public BasiclitElements getBasiclitAccess() {
		return pBasiclit;
	}
	
	public ParserRule getBasiclitRule() {
		return getBasiclitAccess().getRule();
	}
	
	//operandname:
	//	IDENTIFIER | qualified_ident;
	public OperandnameElements getOperandnameAccess() {
		return pOperandname;
	}
	
	public ParserRule getOperandnameRule() {
		return getOperandnameAccess().getRule();
	}
	
	//slicetype:
	//	"[" "]" elementtype;
	public SlicetypeElements getSlicetypeAccess() {
		return pSlicetype;
	}
	
	public ParserRule getSlicetypeRule() {
		return getSlicetypeAccess().getRule();
	}
	
	//pointertype:
	//	"*" basetype;
	public PointertypeElements getPointertypeAccess() {
		return pPointertype;
	}
	
	public ParserRule getPointertypeRule() {
		return getPointertypeAccess().getRule();
	}
	
	//basetype:
	//	type;
	public BasetypeElements getBasetypeAccess() {
		return pBasetype;
	}
	
	public ParserRule getBasetypeRule() {
		return getBasetypeAccess().getRule();
	}
	
	//channeltype:
	//	("chan" | "chan" "<-" | "<-" "chan") elementtype;
	public ChanneltypeElements getChanneltypeAccess() {
		return pChanneltype;
	}
	
	public ParserRule getChanneltypeRule() {
		return getChanneltypeAccess().getRule();
	}
	
	//maptype:
	//	"map" "[" keytype "]" elementtype;
	public MaptypeElements getMaptypeAccess() {
		return pMaptype;
	}
	
	public ParserRule getMaptypeRule() {
		return getMaptypeAccess().getRule();
	}
	
	//keytype:
	//	type;
	public KeytypeElements getKeytypeAccess() {
		return pKeytype;
	}
	
	public ParserRule getKeytypeRule() {
		return getKeytypeAccess().getRule();
	}
	
	//elementtype:
	//	type;
	public ElementtypeElements getElementtypeAccess() {
		return pElementtype;
	}
	
	public ParserRule getElementtypeRule() {
		return getElementtypeAccess().getRule();
	}
	
	//interfacetype:
	//	"interface" "{" (methodspec ";")* "}";
	public InterfacetypeElements getInterfacetypeAccess() {
		return pInterfacetype;
	}
	
	public ParserRule getInterfacetypeRule() {
		return getInterfacetypeAccess().getRule();
	}
	
	//methodspec:
	//	methodname signature | interfacetypename;
	public MethodspecElements getMethodspecAccess() {
		return pMethodspec;
	}
	
	public ParserRule getMethodspecRule() {
		return getMethodspecAccess().getRule();
	}
	
	//methodname:
	//	IDENTIFIER;
	public MethodnameElements getMethodnameAccess() {
		return pMethodname;
	}
	
	public ParserRule getMethodnameRule() {
		return getMethodnameAccess().getRule();
	}
	
	//interfacetypename:
	//	typename;
	public InterfacetypenameElements getInterfacetypenameAccess() {
		return pInterfacetypename;
	}
	
	public ParserRule getInterfacetypenameRule() {
		return getInterfacetypenameAccess().getRule();
	}
	
	//functiontype:
	//	"func" signature;
	public FunctiontypeElements getFunctiontypeAccess() {
		return pFunctiontype;
	}
	
	public ParserRule getFunctiontypeRule() {
		return getFunctiontypeAccess().getRule();
	}
	
	//signature:
	//	parameters result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//result:
	//	parameters | type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//parameters:
	//	"(" (parameterlist ","?)? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//parameterlist:
	//	parameterdecl ("," parameterdecl)*;
	public ParameterlistElements getParameterlistAccess() {
		return pParameterlist;
	}
	
	public ParserRule getParameterlistRule() {
		return getParameterlistAccess().getRule();
	}
	
	//parameterdecl:
	//	identifierlist? "..."? type;
	public ParameterdeclElements getParameterdeclAccess() {
		return pParameterdecl;
	}
	
	public ParserRule getParameterdeclRule() {
		return getParameterdeclAccess().getRule();
	}
	
	//structtype:
	//	"struct" "{" (fielddecl ";")* "}";
	public StructtypeElements getStructtypeAccess() {
		return pStructtype;
	}
	
	public ParserRule getStructtypeRule() {
		return getStructtypeAccess().getRule();
	}
	
	//fielddecl:
	//	(identifierlist type | embeddedfield) tag?;
	public FielddeclElements getFielddeclAccess() {
		return pFielddecl;
	}
	
	public ParserRule getFielddeclRule() {
		return getFielddeclAccess().getRule();
	}
	
	//embeddedfield:
	//	"*"? typename;
	public EmbeddedfieldElements getEmbeddedfieldAccess() {
		return pEmbeddedfield;
	}
	
	public ParserRule getEmbeddedfieldRule() {
		return getEmbeddedfieldAccess().getRule();
	}
	
	//type:
	//	typename;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//identifierlist:
	//	IDENTIFIER ("," IDENTIFIER)*;
	public IdentifierlistElements getIdentifierlistAccess() {
		return pIdentifierlist;
	}
	
	public ParserRule getIdentifierlistRule() {
		return getIdentifierlistAccess().getRule();
	}
	
	//tag:
	//	string_lit;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//typename:
	//	IDENTIFIER | qualified_ident;
	public TypenameElements getTypenameAccess() {
		return pTypename;
	}
	
	public ParserRule getTypenameRule() {
		return getTypenameAccess().getRule();
	}
	
	//qualified_ident:
	//	packagename "." IDENTIFIER;
	public Qualified_identElements getQualified_identAccess() {
		return pQualified_ident;
	}
	
	public ParserRule getQualified_identRule() {
		return getQualified_identAccess().getRule();
	}
	
	//packagename:
	//	IDENTIFIER;
	public PackagenameElements getPackagenameAccess() {
		return pPackagename;
	}
	
	public ParserRule getPackagenameRule() {
		return getPackagenameAccess().getRule();
	}
	
	//string_lit:
	//	raw_string_lit | interpreted_string_lit;
	public String_litElements getString_litAccess() {
		return pString_lit;
	}
	
	public ParserRule getString_litRule() {
		return getString_litAccess().getRule();
	}
	
	//raw_string_lit:
	//	"`" (LETTER | DECIMAL_DIGIT | "\\n")* "`";
	public Raw_string_litElements getRaw_string_litAccess() {
		return pRaw_string_lit;
	}
	
	public ParserRule getRaw_string_litRule() {
		return getRaw_string_litAccess().getRule();
	}
	
	//interpreted_string_lit:
	//	"\"" (unicode_value | byte_value)* "\"";
	public Interpreted_string_litElements getInterpreted_string_litAccess() {
		return pInterpreted_string_lit;
	}
	
	public ParserRule getInterpreted_string_litRule() {
		return getInterpreted_string_litAccess().getRule();
	}
	
	//rune_lit:
	//	"'" (unicode_value | byte_value) "'";
	public Rune_litElements getRune_litAccess() {
		return pRune_lit;
	}
	
	public ParserRule getRune_litRule() {
		return getRune_litAccess().getRule();
	}
	
	//int_lit:
	//	(DECIMAL_DIGIT | hex_lit)*;
	public Int_litElements getInt_litAccess() {
		return pInt_lit;
	}
	
	public ParserRule getInt_litRule() {
		return getInt_litAccess().getRule();
	}
	
	//hex_lit:
	//	"0" ("x" | "X") HEX_DIGIT+;
	public Hex_litElements getHex_litAccess() {
		return pHex_lit;
	}
	
	public ParserRule getHex_litRule() {
		return getHex_litAccess().getRule();
	}
	
	//imaginary_lit:
	//	(decimals | float_lit) "i";
	public Imaginary_litElements getImaginary_litAccess() {
		return pImaginary_lit;
	}
	
	public ParserRule getImaginary_litRule() {
		return getImaginary_litAccess().getRule();
	}
	
	//float_lit:
	//	decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?;
	public Float_litElements getFloat_litAccess() {
		return pFloat_lit;
	}
	
	public ParserRule getFloat_litRule() {
		return getFloat_litAccess().getRule();
	}
	
	//exponent:
	//	("e" | "E") ("+" | "-")? decimals;
	public ExponentElements getExponentAccess() {
		return pExponent;
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}
	
	//decimals:
	//	DECIMAL_DIGIT+;
	public DecimalsElements getDecimalsAccess() {
		return pDecimals;
	}
	
	public ParserRule getDecimalsRule() {
		return getDecimalsAccess().getRule();
	}
	
	//byte_value:
	//	octal_byte_value | hex_byte_value;
	public Byte_valueElements getByte_valueAccess() {
		return pByte_value;
	}
	
	public ParserRule getByte_valueRule() {
		return getByte_valueAccess().getRule();
	}
	
	//hex_byte_value:
	//	'\\' "x" HEX_DIGIT HEX_DIGIT;
	public Hex_byte_valueElements getHex_byte_valueAccess() {
		return pHex_byte_value;
	}
	
	public ParserRule getHex_byte_valueRule() {
		return getHex_byte_valueAccess().getRule();
	}
	
	//octal_byte_value:
	//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public Octal_byte_valueElements getOctal_byte_valueAccess() {
		return pOctal_byte_value;
	}
	
	public ParserRule getOctal_byte_valueRule() {
		return getOctal_byte_valueAccess().getRule();
	}
	
	//unicode_value:
	//	(LETTER | DECIMAL_DIGIT) | little_u_value | big_u_value | ESCAPED_CHAR;
	public Unicode_valueElements getUnicode_valueAccess() {
		return pUnicode_value;
	}
	
	public ParserRule getUnicode_valueRule() {
		return getUnicode_valueAccess().getRule();
	}
	
	//big_u_value:
	//	"\\" "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public Big_u_valueElements getBig_u_valueAccess() {
		return pBig_u_value;
	}
	
	public ParserRule getBig_u_valueRule() {
		return getBig_u_valueAccess().getRule();
	}
	
	//little_u_value:
	//	"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public Little_u_valueElements getLittle_u_valueAccess() {
		return pLittle_u_value;
	}
	
	public ParserRule getLittle_u_valueRule() {
		return getLittle_u_valueAccess().getRule();
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | DECIMAL_DIGIT)*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal A_F:
	//	"A".."F" | "a".."f";
	public TerminalRule getA_FRule() {
		return tA_F;
	}
	
	//terminal LETTER:
	//	A_F | 'g'..'z' | 'G'..'Z' | "_";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal HEX_DIGIT:
	//	DECIMAL_DIGIT | A_F;
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal OCTAL_DIGIT:
	//	'0'..'7';
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal ESCAPED_CHAR:
	//	"\\" ("a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "\'" | "\"");
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//terminal DECIMAL_DIGIT:
	//	OCTAL_DIGIT | '8' | '9';
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal BINARY_OP:
	//	"||" | "&&" | REL_OP | ADD_OP | MUL_OP;
	public TerminalRule getBINARY_OPRule() {
		return tBINARY_OP;
	}
	
	//terminal REL_OP:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal ADD_OP:
	//	"+" | "-" | "|" | "^";
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal MUL_OP:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	//terminal UNARY_OP:
	//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
	public TerminalRule getUNARY_OPRule() {
		return tUNARY_OP;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
