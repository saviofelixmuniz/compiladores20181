/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SourcefileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.sourcefile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageclauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackageclausePackageclauseParserRuleCall_0_0 = (RuleCall)cPackageclauseAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cImportdeclAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cImportdeclImportdeclParserRuleCall_2_0_0 = (RuleCall)cImportdeclAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTopleveldeclAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTopleveldeclTopleveldeclParserRuleCall_3_0_0 = (RuleCall)cTopleveldeclAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//sourcefile:
		//	packageclause+=packageclause ";" (importdecl+=importdecl ";")* (topleveldecl+=topleveldecl ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//packageclause+=packageclause ";" (importdecl+=importdecl ";")* (topleveldecl+=topleveldecl ";")*
		public Group getGroup() { return cGroup; }
		
		//packageclause+=packageclause
		public Assignment getPackageclauseAssignment_0() { return cPackageclauseAssignment_0; }
		
		//packageclause
		public RuleCall getPackageclausePackageclauseParserRuleCall_0_0() { return cPackageclausePackageclauseParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//(importdecl+=importdecl ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//importdecl+=importdecl
		public Assignment getImportdeclAssignment_2_0() { return cImportdeclAssignment_2_0; }
		
		//importdecl
		public RuleCall getImportdeclImportdeclParserRuleCall_2_0_0() { return cImportdeclImportdeclParserRuleCall_2_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//(topleveldecl+=topleveldecl ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//topleveldecl+=topleveldecl
		public Assignment getTopleveldeclAssignment_3_0() { return cTopleveldeclAssignment_3_0; }
		
		//topleveldecl
		public RuleCall getTopleveldeclTopleveldeclParserRuleCall_3_0_0() { return cTopleveldeclTopleveldeclParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class ImportdeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.importdecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImportspecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cImportspecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//importdecl:
		//	"import" (importspec | "(" (importspec ";")* "}");
		@Override public ParserRule getRule() { return rule; }
		
		//"import" (importspec | "(" (importspec ";")* "}")
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importspec | "(" (importspec ";")* "}"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//importspec
		public RuleCall getImportspecParserRuleCall_1_0() { return cImportspecParserRuleCall_1_0; }
		
		//"(" (importspec ";")* "}"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(importspec ";")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//importspec
		public RuleCall getImportspecParserRuleCall_1_1_1_0() { return cImportspecParserRuleCall_1_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}
	public class ImportspecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.importspec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cPackagenameParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cImportpathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//importspec:
		//	("." | packagename)? importpath;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | packagename)? importpath
		public Group getGroup() { return cGroup; }
		
		//("." | packagename)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//packagename
		public RuleCall getPackagenameParserRuleCall_0_1() { return cPackagenameParserRuleCall_0_1; }
		
		//importpath
		public RuleCall getImportpathParserRuleCall_1() { return cImportpathParserRuleCall_1; }
	}
	public class ImportpathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.importpath");
		private final RuleCall cString_litParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//importpath:
		//	string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//string_lit
		public RuleCall getString_litParserRuleCall() { return cString_litParserRuleCall; }
	}
	public class PackageclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.packageclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPackagenameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//packageclause:
		//	"package" packagename;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" packagename
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//packagename
		public RuleCall getPackagenameParserRuleCall_1() { return cPackagenameParserRuleCall_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryexprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpressionauxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionauxExpressionauxParserRuleCall_1_0 = (RuleCall)cExpressionauxAssignment_1.eContents().get(0);
		
		//expression:
		//	unaryexpr expressionaux+=expressionaux;
		@Override public ParserRule getRule() { return rule; }
		
		//unaryexpr expressionaux+=expressionaux
		public Group getGroup() { return cGroup; }
		
		//unaryexpr
		public RuleCall getUnaryexprParserRuleCall_0() { return cUnaryexprParserRuleCall_0; }
		
		//expressionaux+=expressionaux
		public Assignment getExpressionauxAssignment_1() { return cExpressionauxAssignment_1; }
		
		//expressionaux
		public RuleCall getExpressionauxExpressionauxParserRuleCall_1_0() { return cExpressionauxExpressionauxParserRuleCall_1_0; }
	}
	public class ExpressionauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expressionaux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cBINARY_OPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBINARY_OPBINARY_OPTerminalRuleCall_1_0 = (RuleCall)cBINARY_OPAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//expressionaux:
		//	expression+=expression BINARY_OP=BINARY_OP expression+=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression+=expression BINARY_OP=BINARY_OP expression+=expression
		public Group getGroup() { return cGroup; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//BINARY_OP=BINARY_OP
		public Assignment getBINARY_OPAssignment_1() { return cBINARY_OPAssignment_1; }
		
		//BINARY_OP
		public RuleCall getBINARY_OPBINARY_OPTerminalRuleCall_1_0() { return cBINARY_OPBINARY_OPTerminalRuleCall_1_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class UnaryexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unaryexpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimaryexprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryexprPrimaryexprParserRuleCall_0_0 = (RuleCall)cPrimaryexprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUNARY_OPAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUNARY_OPUNARY_OPTerminalRuleCall_1_0_0 = (RuleCall)cUNARY_OPAssignment_1_0.eContents().get(0);
		private final Assignment cUnaryexprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryexprUnaryexprParserRuleCall_1_1_0 = (RuleCall)cUnaryexprAssignment_1_1.eContents().get(0);
		
		//unaryexpr:
		//	primaryexpr=primaryexpr | UNARY_OP=UNARY_OP unaryexpr=unaryexpr;
		@Override public ParserRule getRule() { return rule; }
		
		//primaryexpr=primaryexpr | UNARY_OP=UNARY_OP unaryexpr=unaryexpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primaryexpr=primaryexpr
		public Assignment getPrimaryexprAssignment_0() { return cPrimaryexprAssignment_0; }
		
		//primaryexpr
		public RuleCall getPrimaryexprPrimaryexprParserRuleCall_0_0() { return cPrimaryexprPrimaryexprParserRuleCall_0_0; }
		
		//UNARY_OP=UNARY_OP unaryexpr=unaryexpr
		public Group getGroup_1() { return cGroup_1; }
		
		//UNARY_OP=UNARY_OP
		public Assignment getUNARY_OPAssignment_1_0() { return cUNARY_OPAssignment_1_0; }
		
		//UNARY_OP
		public RuleCall getUNARY_OPUNARY_OPTerminalRuleCall_1_0_0() { return cUNARY_OPUNARY_OPTerminalRuleCall_1_0_0; }
		
		//unaryexpr=unaryexpr
		public Assignment getUnaryexprAssignment_1_1() { return cUnaryexprAssignment_1_1; }
		
		//unaryexpr
		public RuleCall getUnaryexprUnaryexprParserRuleCall_1_1_0() { return cUnaryexprUnaryexprParserRuleCall_1_1_0; }
	}
	public class PrimaryexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.primaryexpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperandAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperandOperandParserRuleCall_0_0_0 = (RuleCall)cOperandAssignment_0_0.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_0_1_0 = (RuleCall)cPrimaryexprauxAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeauxParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cConversionAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cConversionConversionParserRuleCall_1_1_0_0 = (RuleCall)cConversionAssignment_1_1_0.eContents().get(0);
		private final Assignment cMethodexprAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cMethodexprMethodexprParserRuleCall_1_1_1_0 = (RuleCall)cMethodexprAssignment_1_1_1.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_1_2_0 = (RuleCall)cPrimaryexprauxAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypenameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypenameTypenameParserRuleCall_2_0_0 = (RuleCall)cTypenameAssignment_2_0.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0 = (RuleCall)cPrimaryexprauxAssignment_2_1.eContents().get(0);
		
		//primaryexpr:
		//	=> operand=operand primaryexpraux=primaryexpraux | type=typeaux (conversion=conversion | methodexpr=methodexpr)
		//	primaryexpraux=primaryexpraux | typename=typename primaryexpraux=primaryexpraux;
		@Override public ParserRule getRule() { return rule; }
		
		//=> operand=operand primaryexpraux=primaryexpraux | type=typeaux (conversion=conversion | methodexpr=methodexpr)
		//primaryexpraux=primaryexpraux | typename=typename primaryexpraux=primaryexpraux
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> operand=operand primaryexpraux=primaryexpraux
		public Group getGroup_0() { return cGroup_0; }
		
		//=> operand=operand
		public Assignment getOperandAssignment_0_0() { return cOperandAssignment_0_0; }
		
		//operand
		public RuleCall getOperandOperandParserRuleCall_0_0_0() { return cOperandOperandParserRuleCall_0_0_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_0_1() { return cPrimaryexprauxAssignment_0_1; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_0_1_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_0_1_0; }
		
		//type=typeaux (conversion=conversion | methodexpr=methodexpr) primaryexpraux=primaryexpraux
		public Group getGroup_1() { return cGroup_1; }
		
		//type=typeaux
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//typeaux
		public RuleCall getTypeTypeauxParserRuleCall_1_0_0() { return cTypeTypeauxParserRuleCall_1_0_0; }
		
		//conversion=conversion | methodexpr=methodexpr
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//conversion=conversion
		public Assignment getConversionAssignment_1_1_0() { return cConversionAssignment_1_1_0; }
		
		//conversion
		public RuleCall getConversionConversionParserRuleCall_1_1_0_0() { return cConversionConversionParserRuleCall_1_1_0_0; }
		
		//methodexpr=methodexpr
		public Assignment getMethodexprAssignment_1_1_1() { return cMethodexprAssignment_1_1_1; }
		
		//methodexpr
		public RuleCall getMethodexprMethodexprParserRuleCall_1_1_1_0() { return cMethodexprMethodexprParserRuleCall_1_1_1_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_1_2() { return cPrimaryexprauxAssignment_1_2; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_1_2_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_1_2_0; }
		
		//typename=typename primaryexpraux=primaryexpraux
		public Group getGroup_2() { return cGroup_2; }
		
		//typename=typename
		public Assignment getTypenameAssignment_2_0() { return cTypenameAssignment_2_0; }
		
		//typename
		public RuleCall getTypenameTypenameParserRuleCall_2_0_0() { return cTypenameTypenameParserRuleCall_2_0_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_2_1() { return cPrimaryexprauxAssignment_2_1; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0_1_0 = (RuleCall)cExpressionAssignment_0_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		
		//operand:
		//	=> ("(" expression=expression ")") | literal=literal;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ("(" expression=expression ")") | literal=literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ("(" expression=expression ")")
		public Group getGroup_0() { return cGroup_0; }
		
		//"(" expression=expression ")"
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0_0() { return cLeftParenthesisKeyword_0_0_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_0_1() { return cExpressionAssignment_0_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0_1_0() { return cExpressionExpressionParserRuleCall_0_0_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_0_2() { return cRightParenthesisKeyword_0_0_2; }
		
		//literal=literal
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0() { return cLiteralLiteralParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypenameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypenameTypenameParserRuleCall_1_0 = (RuleCall)cTypenameAssignment_1.eContents().get(0);
		private final Assignment cTypelitAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTypelitTypelitParserRuleCall_2_0 = (RuleCall)cTypelitAssignment_2.eContents().get(0);
		
		//type:
		//	"(" type=type ")" | typename=typename | typelit=typelit;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" type=type ")" | typename=typename | typelit=typelit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" type=type ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//type=type
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_1_0() { return cTypeTypeParserRuleCall_0_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//typename=typename
		public Assignment getTypenameAssignment_1() { return cTypenameAssignment_1; }
		
		//typename
		public RuleCall getTypenameTypenameParserRuleCall_1_0() { return cTypenameTypenameParserRuleCall_1_0; }
		
		//typelit=typelit
		public Assignment getTypelitAssignment_2() { return cTypelitAssignment_2; }
		
		//typelit
		public RuleCall getTypelitTypelitParserRuleCall_2_0() { return cTypelitTypelitParserRuleCall_2_0; }
	}
	public class TypeauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typeaux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypelitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypelitTypelitParserRuleCall_1_0 = (RuleCall)cTypelitAssignment_1.eContents().get(0);
		
		//typeaux:
		//	"(" type=type ")" | typelit=typelit;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" type=type ")" | typelit=typelit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" type=type ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//type=type
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_1_0() { return cTypeTypeParserRuleCall_0_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//typelit=typelit
		public Assignment getTypelitAssignment_1() { return cTypelitAssignment_1; }
		
		//typelit
		public RuleCall getTypelitTypelitParserRuleCall_1_0() { return cTypelitTypelitParserRuleCall_1_0; }
	}
	public class MethodexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.methodexpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodnameMethodnameParserRuleCall_1_0 = (RuleCall)cMethodnameAssignment_1.eContents().get(0);
		
		//methodexpr:
		//	"." methodname=methodname;
		@Override public ParserRule getRule() { return rule; }
		
		//"." methodname=methodname
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//methodname=methodname
		public Assignment getMethodnameAssignment_1() { return cMethodnameAssignment_1; }
		
		//methodname
		public RuleCall getMethodnameMethodnameParserRuleCall_1_0() { return cMethodnameMethodnameParserRuleCall_1_0; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//conversion:
		//	"(" expression=expression ","? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" expression=expression ","? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PrimaryexprauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.primaryexpraux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cSelectorAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_0_1_0_0 = (RuleCall)cSelectorAssignment_0_1_0.eContents().get(0);
		private final Assignment cTypeassertionAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cTypeassertionTypeassertionParserRuleCall_0_1_1_0 = (RuleCall)cTypeassertionAssignment_0_1_1.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_0_2_0 = (RuleCall)cPrimaryexprauxAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSliceAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cSliceSliceParserRuleCall_1_1_0_0 = (RuleCall)cSliceAssignment_1_1_0.eContents().get(0);
		private final Assignment cIndexAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_1_1_0 = (RuleCall)cIndexAssignment_1_1_1.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_1_2_0 = (RuleCall)cPrimaryexprauxAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Assignment cPrimaryexprauxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0 = (RuleCall)cPrimaryexprauxAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrimaryexprauxAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//primaryexpraux:
		//	"." (selector=selector | typeassertion=typeassertion) primaryexpraux=primaryexpraux |
		//	"[" (=> slice=slice | index=index) primaryexpraux=primaryexpraux | arguments=arguments primaryexpraux=primaryexpraux |
		//	{primaryexpraux} WS;
		@Override public ParserRule getRule() { return rule; }
		
		//"." (selector=selector | typeassertion=typeassertion) primaryexpraux=primaryexpraux | "[" (=> slice=slice | index=index)
		//primaryexpraux=primaryexpraux | arguments=arguments primaryexpraux=primaryexpraux | {primaryexpraux} WS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"." (selector=selector | typeassertion=typeassertion) primaryexpraux=primaryexpraux
		public Group getGroup_0() { return cGroup_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//selector=selector | typeassertion=typeassertion
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//selector=selector
		public Assignment getSelectorAssignment_0_1_0() { return cSelectorAssignment_0_1_0; }
		
		//selector
		public RuleCall getSelectorSelectorParserRuleCall_0_1_0_0() { return cSelectorSelectorParserRuleCall_0_1_0_0; }
		
		//typeassertion=typeassertion
		public Assignment getTypeassertionAssignment_0_1_1() { return cTypeassertionAssignment_0_1_1; }
		
		//typeassertion
		public RuleCall getTypeassertionTypeassertionParserRuleCall_0_1_1_0() { return cTypeassertionTypeassertionParserRuleCall_0_1_1_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_0_2() { return cPrimaryexprauxAssignment_0_2; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_0_2_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_0_2_0; }
		
		//"[" (=> slice=slice | index=index) primaryexpraux=primaryexpraux
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//=> slice=slice | index=index
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//=> slice=slice
		public Assignment getSliceAssignment_1_1_0() { return cSliceAssignment_1_1_0; }
		
		//slice
		public RuleCall getSliceSliceParserRuleCall_1_1_0_0() { return cSliceSliceParserRuleCall_1_1_0_0; }
		
		//index=index
		public Assignment getIndexAssignment_1_1_1() { return cIndexAssignment_1_1_1; }
		
		//index
		public RuleCall getIndexIndexParserRuleCall_1_1_1_0() { return cIndexIndexParserRuleCall_1_1_1_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_1_2() { return cPrimaryexprauxAssignment_1_2; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_1_2_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_1_2_0; }
		
		//arguments=arguments primaryexpraux=primaryexpraux
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments=arguments
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0_0() { return cArgumentsArgumentsParserRuleCall_2_0_0; }
		
		//primaryexpraux=primaryexpraux
		public Assignment getPrimaryexprauxAssignment_2_1() { return cPrimaryexprauxAssignment_2_1; }
		
		//primaryexpraux
		public RuleCall getPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0() { return cPrimaryexprauxPrimaryexprauxParserRuleCall_2_1_0; }
		
		//{primaryexpraux} WS
		public Group getGroup_3() { return cGroup_3; }
		
		//{primaryexpraux}
		public Action getPrimaryexprauxAction_3_0() { return cPrimaryexprauxAction_3_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_3_1() { return cWSTerminalRuleCall_3_1; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cExpressionlistAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_2_0_0_0 = (RuleCall)cExpressionlistAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_2_0_1_0_0 = (RuleCall)cTypeAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cExpressionlistAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_2_0_1_1_1_0 = (RuleCall)cExpressionlistAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//arguments:
		//	{arguments} "(" ((expressionlist=expressionlist | => type=type ("," expressionlist=expressionlist)?) "..."? ","?)?
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//{arguments} "(" ((expressionlist=expressionlist | => type=type ("," expressionlist=expressionlist)?) "..."? ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//{arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((expressionlist=expressionlist | => type=type ("," expressionlist=expressionlist)?) "..."? ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//expressionlist=expressionlist | => type=type ("," expressionlist=expressionlist)?
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_2_0_0() { return cExpressionlistAssignment_2_0_0; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_2_0_0_0() { return cExpressionlistExpressionlistParserRuleCall_2_0_0_0; }
		
		//=> type=type ("," expressionlist=expressionlist)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//=> type=type
		public Assignment getTypeAssignment_2_0_1_0() { return cTypeAssignment_2_0_1_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0_1_0_0() { return cTypeTypeParserRuleCall_2_0_1_0_0; }
		
		//("," expressionlist=expressionlist)?
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_2_0_1_1_1() { return cExpressionlistAssignment_2_0_1_1_1; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_2_0_1_1_1_0() { return cExpressionlistExpressionlistParserRuleCall_2_0_1_1_1_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//","?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//index:
		//	expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//expression "]"
		public Group getGroup() { return cGroup; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSliceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cGroup_3_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_0_0_0 = (Assignment)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0_0_0_0 = (RuleCall)cExpressionAssignment_3_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3_0_0_2 = (Assignment)cGroup_3_0_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0_0_2_0 = (RuleCall)cExpressionAssignment_3_0_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//slice:
		//	{slice} expression+=expression? ":" (=> (expression+=expression ":" expression+=expression) | expression+=expression?)
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//{slice} expression+=expression? ":" (=> (expression+=expression ":" expression+=expression) | expression+=expression?)
		//"]"
		public Group getGroup() { return cGroup; }
		
		//{slice}
		public Action getSliceAction_0() { return cSliceAction_0; }
		
		//expression+=expression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//=> (expression+=expression ":" expression+=expression) | expression+=expression?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//=> (expression+=expression ":" expression+=expression)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//expression+=expression ":" expression+=expression
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_3_0_0_0() { return cExpressionAssignment_3_0_0_0; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0_0_0_0() { return cExpressionExpressionParserRuleCall_3_0_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_3_0_0_1() { return cColonKeyword_3_0_0_1; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_3_0_0_2() { return cExpressionAssignment_3_0_0_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0_0_2_0() { return cExpressionExpressionParserRuleCall_3_0_0_2_0; }
		
		//expression+=expression?
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class TypeassertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typeassertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//typeassertion:
		//	"(" type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" type ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.selector");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//selector:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class CompositelitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.compositelit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteraltypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLiteraltypeLiteraltypeParserRuleCall_0_0 = (RuleCall)cLiteraltypeAssignment_0.eContents().get(0);
		private final Assignment cLiteralvalueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralvalueLiteralvalueParserRuleCall_1_0 = (RuleCall)cLiteralvalueAssignment_1.eContents().get(0);
		
		//compositelit:
		//	literaltype=literaltype literalvalue=literalvalue;
		@Override public ParserRule getRule() { return rule; }
		
		//literaltype=literaltype literalvalue=literalvalue
		public Group getGroup() { return cGroup; }
		
		//literaltype=literaltype
		public Assignment getLiteraltypeAssignment_0() { return cLiteraltypeAssignment_0; }
		
		//literaltype
		public RuleCall getLiteraltypeLiteraltypeParserRuleCall_0_0() { return cLiteraltypeLiteraltypeParserRuleCall_0_0; }
		
		//literalvalue=literalvalue
		public Assignment getLiteralvalueAssignment_1() { return cLiteralvalueAssignment_1; }
		
		//literalvalue
		public RuleCall getLiteralvalueLiteralvalueParserRuleCall_1_0() { return cLiteralvalueLiteralvalueParserRuleCall_1_0; }
	}
	public class LiteraltypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.literaltype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStructtypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStructtypeStructtypeParserRuleCall_0_0 = (RuleCall)cStructtypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cElementtypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cElementtypeElementtypeParserRuleCall_1_3_0 = (RuleCall)cElementtypeAssignment_1_3.eContents().get(0);
		private final Assignment cSlicetypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSlicetypeSlicetypeParserRuleCall_2_0 = (RuleCall)cSlicetypeAssignment_2.eContents().get(0);
		private final Assignment cMaptypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMaptypeMaptypeParserRuleCall_3_0 = (RuleCall)cMaptypeAssignment_3.eContents().get(0);
		private final Assignment cTypenameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cTypenameTypenameParserRuleCall_4_0 = (RuleCall)cTypenameAssignment_4.eContents().get(0);
		
		//literaltype:
		//	structtype=structtype | "[" "..." "]" elementtype=elementtype | slicetype=slicetype | maptype=maptype |
		//	typename=typename;
		@Override public ParserRule getRule() { return rule; }
		
		//structtype=structtype | "[" "..." "]" elementtype=elementtype | slicetype=slicetype | maptype=maptype |
		//typename=typename
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//structtype=structtype
		public Assignment getStructtypeAssignment_0() { return cStructtypeAssignment_0; }
		
		//structtype
		public RuleCall getStructtypeStructtypeParserRuleCall_0_0() { return cStructtypeStructtypeParserRuleCall_0_0; }
		
		//"[" "..." "]" elementtype=elementtype
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//elementtype=elementtype
		public Assignment getElementtypeAssignment_1_3() { return cElementtypeAssignment_1_3; }
		
		//elementtype
		public RuleCall getElementtypeElementtypeParserRuleCall_1_3_0() { return cElementtypeElementtypeParserRuleCall_1_3_0; }
		
		//slicetype=slicetype
		public Assignment getSlicetypeAssignment_2() { return cSlicetypeAssignment_2; }
		
		//slicetype
		public RuleCall getSlicetypeSlicetypeParserRuleCall_2_0() { return cSlicetypeSlicetypeParserRuleCall_2_0; }
		
		//maptype=maptype
		public Assignment getMaptypeAssignment_3() { return cMaptypeAssignment_3; }
		
		//maptype
		public RuleCall getMaptypeMaptypeParserRuleCall_3_0() { return cMaptypeMaptypeParserRuleCall_3_0; }
		
		//typename=typename
		public Assignment getTypenameAssignment_4() { return cTypenameAssignment_4; }
		
		//typename
		public RuleCall getTypenameTypenameParserRuleCall_4_0() { return cTypenameTypenameParserRuleCall_4_0; }
	}
	public class LiteralvalueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.literalvalue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralvalueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementlistAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementlistElementlistParserRuleCall_2_0_0 = (RuleCall)cElementlistAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//literalvalue:
		//	{literalvalue} "{" (elementlist=elementlist ","?)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{literalvalue} "{" (elementlist=elementlist ","?)? "}"
		public Group getGroup() { return cGroup; }
		
		//{literalvalue}
		public Action getLiteralvalueAction_0() { return cLiteralvalueAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(elementlist=elementlist ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elementlist=elementlist
		public Assignment getElementlistAssignment_2_0() { return cElementlistAssignment_2_0; }
		
		//elementlist
		public RuleCall getElementlistElementlistParserRuleCall_2_0_0() { return cElementlistElementlistParserRuleCall_2_0_0; }
		
		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.elementlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyedelementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyedelementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyedelementKeyedelementParserRuleCall_1_1_0 = (RuleCall)cKeyedelementAssignment_1_1.eContents().get(0);
		
		//elementlist:
		//	keyedelement ("," keyedelement+=keyedelement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyedelement ("," keyedelement+=keyedelement)*
		public Group getGroup() { return cGroup; }
		
		//keyedelement
		public RuleCall getKeyedelementParserRuleCall_0() { return cKeyedelementParserRuleCall_0; }
		
		//("," keyedelement+=keyedelement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//keyedelement+=keyedelement
		public Assignment getKeyedelementAssignment_1_1() { return cKeyedelementAssignment_1_1; }
		
		//keyedelement
		public RuleCall getKeyedelementKeyedelementParserRuleCall_1_1_0() { return cKeyedelementKeyedelementParserRuleCall_1_1_0; }
	}
	public class KeyedelementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.keyedelement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//keyedelement:
		//	(=> key ":")? element=element;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> key ":")? element=element
		public Group getGroup() { return cGroup; }
		
		//(=> key ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//=> key
		public RuleCall getKeyParserRuleCall_0_0() { return cKeyParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//element=element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cKeyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Assignment cIDENTIFIERAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTIFIERIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cIDENTIFIERAssignment_1.eContents().get(0);
		private final Assignment cLiteralvalueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralvalueLiteralvalueParserRuleCall_2_0 = (RuleCall)cLiteralvalueAssignment_2.eContents().get(0);
		
		//key:
		//	{key} => expression=expression | IDENTIFIER=IDENTIFIER | literalvalue=literalvalue;
		@Override public ParserRule getRule() { return rule; }
		
		//{key} => expression=expression | IDENTIFIER=IDENTIFIER | literalvalue=literalvalue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{key} => expression=expression
		public Group getGroup_0() { return cGroup_0; }
		
		//{key}
		public Action getKeyAction_0_0() { return cKeyAction_0_0; }
		
		//=> expression=expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//IDENTIFIER=IDENTIFIER
		public Assignment getIDENTIFIERAssignment_1() { return cIDENTIFIERAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERIDENTIFIERTerminalRuleCall_1_0() { return cIDENTIFIERIDENTIFIERTerminalRuleCall_1_0; }
		
		//literalvalue=literalvalue
		public Assignment getLiteralvalueAssignment_2() { return cLiteralvalueAssignment_2; }
		
		//literalvalue
		public RuleCall getLiteralvalueLiteralvalueParserRuleCall_2_0() { return cLiteralvalueLiteralvalueParserRuleCall_2_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralvalueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//element:
		//	expression | literalvalue;
		@Override public ParserRule getRule() { return rule; }
		
		//expression | literalvalue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//literalvalue
		public RuleCall getLiteralvalueParserRuleCall_1() { return cLiteralvalueParserRuleCall_1; }
	}
	public class FunctionlitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.functionlit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_1_0 = (RuleCall)cSignatureAssignment_1.eContents().get(0);
		private final Assignment cFunctionbodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionbodyFunctionbodyParserRuleCall_2_0 = (RuleCall)cFunctionbodyAssignment_2.eContents().get(0);
		
		//functionlit:
		//	"func" signature=signature functionbody=functionbody;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" signature=signature functionbody=functionbody
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//signature=signature
		public Assignment getSignatureAssignment_1() { return cSignatureAssignment_1; }
		
		//signature
		public RuleCall getSignatureSignatureParserRuleCall_1_0() { return cSignatureSignatureParserRuleCall_1_0; }
		
		//functionbody=functionbody
		public Assignment getFunctionbodyAssignment_2() { return cFunctionbodyAssignment_2; }
		
		//functionbody
		public RuleCall getFunctionbodyFunctionbodyParserRuleCall_2_0() { return cFunctionbodyFunctionbodyParserRuleCall_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimplestmtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimplestmtSimplestmtParserRuleCall_0_0 = (RuleCall)cSimplestmtAssignment_0.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationAssignment_1.eContents().get(0);
		private final Assignment cLabeledstmtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLabeledstmtLabeledstmtParserRuleCall_2_0 = (RuleCall)cLabeledstmtAssignment_2.eContents().get(0);
		private final Assignment cGotstmtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGotstmtGotstmtParserRuleCall_3_0 = (RuleCall)cGotstmtAssignment_3.eContents().get(0);
		private final Assignment cReturnstmtAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cReturnstmtReturnstmtParserRuleCall_4_0 = (RuleCall)cReturnstmtAssignment_4.eContents().get(0);
		private final Assignment cBreakstmtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBreakstmtBreakstmtParserRuleCall_5_0 = (RuleCall)cBreakstmtAssignment_5.eContents().get(0);
		private final Assignment cContinuestmtAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cContinuestmtContinuestmtParserRuleCall_6_0 = (RuleCall)cContinuestmtAssignment_6.eContents().get(0);
		private final Assignment cGotostmtAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGotostmtGotostmtParserRuleCall_7_0 = (RuleCall)cGotostmtAssignment_7.eContents().get(0);
		private final Assignment cFallthroughstmtAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cFallthroughstmtFallthroughstmtParserRuleCall_8_0 = (RuleCall)cFallthroughstmtAssignment_8.eContents().get(0);
		private final Assignment cBlockAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cBlockBlockParserRuleCall_9_0 = (RuleCall)cBlockAssignment_9.eContents().get(0);
		private final Assignment cIfstmtAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cIfstmtIfstmtParserRuleCall_10_0 = (RuleCall)cIfstmtAssignment_10.eContents().get(0);
		private final Assignment cSwitchstmtAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cSwitchstmtSwitchstmtParserRuleCall_11_0 = (RuleCall)cSwitchstmtAssignment_11.eContents().get(0);
		private final Assignment cSelectstmtAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cSelectstmtSelectstmtParserRuleCall_12_0 = (RuleCall)cSelectstmtAssignment_12.eContents().get(0);
		private final Assignment cForstmtAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cForstmtForstmtParserRuleCall_13_0 = (RuleCall)cForstmtAssignment_13.eContents().get(0);
		private final Assignment cDeferstmtAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cDeferstmtDeferstmtParserRuleCall_14_0 = (RuleCall)cDeferstmtAssignment_14.eContents().get(0);
		
		//statement:
		//	=> simplestmt=simplestmt | declaration=declaration | labeledstmt=labeledstmt | gotstmt=gotstmt | returnstmt=returnstmt
		//	| breakstmt=breakstmt | continuestmt=continuestmt | gotostmt=gotostmt | fallthroughstmt=fallthroughstmt | block=block
		//	| ifstmt=ifstmt | switchstmt=switchstmt | selectstmt=selectstmt | forstmt=forstmt | deferstmt=deferstmt;
		@Override public ParserRule getRule() { return rule; }
		
		//=> simplestmt=simplestmt | declaration=declaration | labeledstmt=labeledstmt | gotstmt=gotstmt | returnstmt=returnstmt |
		//breakstmt=breakstmt | continuestmt=continuestmt | gotostmt=gotostmt | fallthroughstmt=fallthroughstmt | block=block |
		//ifstmt=ifstmt | switchstmt=switchstmt | selectstmt=selectstmt | forstmt=forstmt | deferstmt=deferstmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> simplestmt=simplestmt
		public Assignment getSimplestmtAssignment_0() { return cSimplestmtAssignment_0; }
		
		//simplestmt
		public RuleCall getSimplestmtSimplestmtParserRuleCall_0_0() { return cSimplestmtSimplestmtParserRuleCall_0_0; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0() { return cDeclarationDeclarationParserRuleCall_1_0; }
		
		//labeledstmt=labeledstmt
		public Assignment getLabeledstmtAssignment_2() { return cLabeledstmtAssignment_2; }
		
		//labeledstmt
		public RuleCall getLabeledstmtLabeledstmtParserRuleCall_2_0() { return cLabeledstmtLabeledstmtParserRuleCall_2_0; }
		
		//gotstmt=gotstmt
		public Assignment getGotstmtAssignment_3() { return cGotstmtAssignment_3; }
		
		//gotstmt
		public RuleCall getGotstmtGotstmtParserRuleCall_3_0() { return cGotstmtGotstmtParserRuleCall_3_0; }
		
		//returnstmt=returnstmt
		public Assignment getReturnstmtAssignment_4() { return cReturnstmtAssignment_4; }
		
		//returnstmt
		public RuleCall getReturnstmtReturnstmtParserRuleCall_4_0() { return cReturnstmtReturnstmtParserRuleCall_4_0; }
		
		//breakstmt=breakstmt
		public Assignment getBreakstmtAssignment_5() { return cBreakstmtAssignment_5; }
		
		//breakstmt
		public RuleCall getBreakstmtBreakstmtParserRuleCall_5_0() { return cBreakstmtBreakstmtParserRuleCall_5_0; }
		
		//continuestmt=continuestmt
		public Assignment getContinuestmtAssignment_6() { return cContinuestmtAssignment_6; }
		
		//continuestmt
		public RuleCall getContinuestmtContinuestmtParserRuleCall_6_0() { return cContinuestmtContinuestmtParserRuleCall_6_0; }
		
		//gotostmt=gotostmt
		public Assignment getGotostmtAssignment_7() { return cGotostmtAssignment_7; }
		
		//gotostmt
		public RuleCall getGotostmtGotostmtParserRuleCall_7_0() { return cGotostmtGotostmtParserRuleCall_7_0; }
		
		//fallthroughstmt=fallthroughstmt
		public Assignment getFallthroughstmtAssignment_8() { return cFallthroughstmtAssignment_8; }
		
		//fallthroughstmt
		public RuleCall getFallthroughstmtFallthroughstmtParserRuleCall_8_0() { return cFallthroughstmtFallthroughstmtParserRuleCall_8_0; }
		
		//block=block
		public Assignment getBlockAssignment_9() { return cBlockAssignment_9; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_9_0() { return cBlockBlockParserRuleCall_9_0; }
		
		//ifstmt=ifstmt
		public Assignment getIfstmtAssignment_10() { return cIfstmtAssignment_10; }
		
		//ifstmt
		public RuleCall getIfstmtIfstmtParserRuleCall_10_0() { return cIfstmtIfstmtParserRuleCall_10_0; }
		
		//switchstmt=switchstmt
		public Assignment getSwitchstmtAssignment_11() { return cSwitchstmtAssignment_11; }
		
		//switchstmt
		public RuleCall getSwitchstmtSwitchstmtParserRuleCall_11_0() { return cSwitchstmtSwitchstmtParserRuleCall_11_0; }
		
		//selectstmt=selectstmt
		public Assignment getSelectstmtAssignment_12() { return cSelectstmtAssignment_12; }
		
		//selectstmt
		public RuleCall getSelectstmtSelectstmtParserRuleCall_12_0() { return cSelectstmtSelectstmtParserRuleCall_12_0; }
		
		//forstmt=forstmt
		public Assignment getForstmtAssignment_13() { return cForstmtAssignment_13; }
		
		//forstmt
		public RuleCall getForstmtForstmtParserRuleCall_13_0() { return cForstmtForstmtParserRuleCall_13_0; }
		
		//deferstmt=deferstmt
		public Assignment getDeferstmtAssignment_14() { return cDeferstmtAssignment_14; }
		
		//deferstmt
		public RuleCall getDeferstmtDeferstmtParserRuleCall_14_0() { return cDeferstmtDeferstmtParserRuleCall_14_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstdeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstdeclConstdeclParserRuleCall_0_0 = (RuleCall)cConstdeclAssignment_0.eContents().get(0);
		private final Assignment cTypedeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypedeclTypedeclParserRuleCall_1_0 = (RuleCall)cTypedeclAssignment_1.eContents().get(0);
		private final Assignment cVardeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVardeclVardeclParserRuleCall_2_0 = (RuleCall)cVardeclAssignment_2.eContents().get(0);
		
		//declaration:
		//	constdecl=constdecl | typedecl=typedecl | vardecl=vardecl;
		@Override public ParserRule getRule() { return rule; }
		
		//constdecl=constdecl | typedecl=typedecl | vardecl=vardecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constdecl=constdecl
		public Assignment getConstdeclAssignment_0() { return cConstdeclAssignment_0; }
		
		//constdecl
		public RuleCall getConstdeclConstdeclParserRuleCall_0_0() { return cConstdeclConstdeclParserRuleCall_0_0; }
		
		//typedecl=typedecl
		public Assignment getTypedeclAssignment_1() { return cTypedeclAssignment_1; }
		
		//typedecl
		public RuleCall getTypedeclTypedeclParserRuleCall_1_0() { return cTypedeclTypedeclParserRuleCall_1_0; }
		
		//vardecl=vardecl
		public Assignment getVardeclAssignment_2() { return cVardeclAssignment_2; }
		
		//vardecl
		public RuleCall getVardeclVardeclParserRuleCall_2_0() { return cVardeclVardeclParserRuleCall_2_0; }
	}
	public class VardeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.vardecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVardeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVarspecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVarspecVarspecParserRuleCall_2_0_0 = (RuleCall)cVarspecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cVarspecAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cVarspecVarspecParserRuleCall_2_1_1_0_0 = (RuleCall)cVarspecAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//vardecl:
		//	{vardecl} "var" (varspec+=varspec | "(" (varspec+=varspec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//{vardecl} "var" (varspec+=varspec | "(" (varspec+=varspec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//{vardecl}
		public Action getVardeclAction_0() { return cVardeclAction_0; }
		
		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//varspec+=varspec | "(" (varspec+=varspec ";")* ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//varspec+=varspec
		public Assignment getVarspecAssignment_2_0() { return cVarspecAssignment_2_0; }
		
		//varspec
		public RuleCall getVarspecVarspecParserRuleCall_2_0_0() { return cVarspecVarspecParserRuleCall_2_0_0; }
		
		//"(" (varspec+=varspec ";")* ")"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(varspec+=varspec ";")*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//varspec+=varspec
		public Assignment getVarspecAssignment_2_1_1_0() { return cVarspecAssignment_2_1_1_0; }
		
		//varspec
		public RuleCall getVarspecVarspecParserRuleCall_2_1_1_0_0() { return cVarspecVarspecParserRuleCall_2_1_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class VarspecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.varspec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierlistAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierlistIdentifierlistParserRuleCall_0_0 = (RuleCall)cIdentifierlistAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0_0 = (RuleCall)cTypeAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cExpressionlistAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_1_0_1_1_0 = (RuleCall)cExpressionlistAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionlistAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_1_1_1_0 = (RuleCall)cExpressionlistAssignment_1_1_1.eContents().get(0);
		
		//varspec:
		//	identifierlist=identifierlist (type=type ("=" expressionlist=expressionlist) | "=" expressionlist=expressionlist);
		@Override public ParserRule getRule() { return rule; }
		
		//identifierlist=identifierlist (type=type ("=" expressionlist=expressionlist) | "=" expressionlist=expressionlist)
		public Group getGroup() { return cGroup; }
		
		//identifierlist=identifierlist
		public Assignment getIdentifierlistAssignment_0() { return cIdentifierlistAssignment_0; }
		
		//identifierlist
		public RuleCall getIdentifierlistIdentifierlistParserRuleCall_0_0() { return cIdentifierlistIdentifierlistParserRuleCall_0_0; }
		
		//type=type ("=" expressionlist=expressionlist) | "=" expressionlist=expressionlist
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=type ("=" expressionlist=expressionlist)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//type=type
		public Assignment getTypeAssignment_1_0_0() { return cTypeAssignment_1_0_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0_0_0() { return cTypeTypeParserRuleCall_1_0_0_0; }
		
		//"=" expressionlist=expressionlist
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_1_0_1_1() { return cExpressionlistAssignment_1_0_1_1; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_1_0_1_1_0() { return cExpressionlistExpressionlistParserRuleCall_1_0_1_1_0; }
		
		//"=" expressionlist=expressionlist
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_1_1_1() { return cExpressionlistAssignment_1_1_1; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_1_1_1_0() { return cExpressionlistExpressionlistParserRuleCall_1_1_1_0; }
	}
	public class TypedeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typedecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypespecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypespecTypespecParserRuleCall_2_0_0 = (RuleCall)cTypespecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cTypespecAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cTypespecTypespecParserRuleCall_2_1_1_0_0 = (RuleCall)cTypespecAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//typedecl:
		//	{typedecl} "type" (typespec+=typespec | "(" (typespec+=typespec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//{typedecl} "type" (typespec+=typespec | "(" (typespec+=typespec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//{typedecl}
		public Action getTypedeclAction_0() { return cTypedeclAction_0; }
		
		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//typespec+=typespec | "(" (typespec+=typespec ";")* ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//typespec+=typespec
		public Assignment getTypespecAssignment_2_0() { return cTypespecAssignment_2_0; }
		
		//typespec
		public RuleCall getTypespecTypespecParserRuleCall_2_0_0() { return cTypespecTypespecParserRuleCall_2_0_0; }
		
		//"(" (typespec+=typespec ";")* ")"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(typespec+=typespec ";")*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//typespec+=typespec
		public Assignment getTypespecAssignment_2_1_1_0() { return cTypespecAssignment_2_1_1_0; }
		
		//typespec
		public RuleCall getTypespecTypespecParserRuleCall_2_1_1_0_0() { return cTypespecTypespecParserRuleCall_2_1_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class TypespecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typespec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIDENTIFIERAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cIDENTIFIERAssignment_0.eContents().get(0);
		private final Assignment cTypespecauxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypespecauxTypespecauxParserRuleCall_1_0 = (RuleCall)cTypespecauxAssignment_1.eContents().get(0);
		
		//typespec:
		//	IDENTIFIER=IDENTIFIER typespecaux=typespecaux;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER=IDENTIFIER typespecaux=typespecaux
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER=IDENTIFIER
		public Assignment getIDENTIFIERAssignment_0() { return cIDENTIFIERAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERIDENTIFIERTerminalRuleCall_0_0() { return cIDENTIFIERIDENTIFIERTerminalRuleCall_0_0; }
		
		//typespecaux=typespecaux
		public Assignment getTypespecauxAssignment_1() { return cTypespecauxAssignment_1; }
		
		//typespecaux
		public RuleCall getTypespecauxTypespecauxParserRuleCall_1_0() { return cTypespecauxTypespecauxParserRuleCall_1_0; }
	}
	public class TypespecauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typespecaux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAliasdeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//typespecaux:
		//	typedef | aliasdecl;
		@Override public ParserRule getRule() { return rule; }
		
		//typedef | aliasdecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typedef
		public RuleCall getTypedefParserRuleCall_0() { return cTypedefParserRuleCall_0; }
		
		//aliasdecl
		public RuleCall getAliasdeclParserRuleCall_1() { return cAliasdeclParserRuleCall_1; }
	}
	public class TypedefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typedef");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//typedef:
		//	type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//type=type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class AliasdeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.aliasdecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//aliasdecl:
		//	"=" type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//"=" type=type
		public Group getGroup() { return cGroup; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//type=type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class TopleveldeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.topleveldecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cFunctiondeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctiondeclFunctiondeclParserRuleCall_1_0 = (RuleCall)cFunctiondeclAssignment_1.eContents().get(0);
		private final Assignment cMethoddeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMethoddeclMethoddeclParserRuleCall_2_0 = (RuleCall)cMethoddeclAssignment_2.eContents().get(0);
		
		//topleveldecl:
		//	declaration | functiondecl=functiondecl | methoddecl=methoddecl;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration | functiondecl=functiondecl | methoddecl=methoddecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//functiondecl=functiondecl
		public Assignment getFunctiondeclAssignment_1() { return cFunctiondeclAssignment_1; }
		
		//functiondecl
		public RuleCall getFunctiondeclFunctiondeclParserRuleCall_1_0() { return cFunctiondeclFunctiondeclParserRuleCall_1_0; }
		
		//methoddecl=methoddecl
		public Assignment getMethoddeclAssignment_2() { return cMethoddeclAssignment_2; }
		
		//methoddecl
		public RuleCall getMethoddeclMethoddeclParserRuleCall_2_0() { return cMethoddeclMethoddeclParserRuleCall_2_0; }
	}
	public class MethoddeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.methoddecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReceiverAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReceiverReceiverParserRuleCall_1_0 = (RuleCall)cReceiverAssignment_1.eContents().get(0);
		private final Assignment cMethodnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodnameMethodnameParserRuleCall_2_0 = (RuleCall)cMethodnameAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureSignatureParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Assignment cFunctionbodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionbodyFunctionbodyParserRuleCall_4_0 = (RuleCall)cFunctionbodyAssignment_4.eContents().get(0);
		
		//methoddecl:
		//	"func" receiver=receiver methodname=methodname signature=signature functionbody=functionbody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" receiver=receiver methodname=methodname signature=signature functionbody=functionbody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//receiver=receiver
		public Assignment getReceiverAssignment_1() { return cReceiverAssignment_1; }
		
		//receiver
		public RuleCall getReceiverReceiverParserRuleCall_1_0() { return cReceiverReceiverParserRuleCall_1_0; }
		
		//methodname=methodname
		public Assignment getMethodnameAssignment_2() { return cMethodnameAssignment_2; }
		
		//methodname
		public RuleCall getMethodnameMethodnameParserRuleCall_2_0() { return cMethodnameMethodnameParserRuleCall_2_0; }
		
		//signature=signature
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }
		
		//signature
		public RuleCall getSignatureSignatureParserRuleCall_3_0() { return cSignatureSignatureParserRuleCall_3_0; }
		
		//functionbody=functionbody?
		public Assignment getFunctionbodyAssignment_4() { return cFunctionbodyAssignment_4; }
		
		//functionbody
		public RuleCall getFunctionbodyFunctionbodyParserRuleCall_4_0() { return cFunctionbodyFunctionbodyParserRuleCall_4_0; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.receiver");
		private final RuleCall cParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//receiver:
		//	parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters
		public RuleCall getParametersParserRuleCall() { return cParametersParserRuleCall; }
	}
	public class FunctiondeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.functiondecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionnameFunctionnameParserRuleCall_1_0 = (RuleCall)cFunctionnameAssignment_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Assignment cFunctionbodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionbodyFunctionbodyParserRuleCall_3_0 = (RuleCall)cFunctionbodyAssignment_3.eContents().get(0);
		
		//functiondecl:
		//	"func" functionname=functionname signature=signature functionbody=functionbody?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" functionname=functionname signature=signature functionbody=functionbody?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//functionname=functionname
		public Assignment getFunctionnameAssignment_1() { return cFunctionnameAssignment_1; }
		
		//functionname
		public RuleCall getFunctionnameFunctionnameParserRuleCall_1_0() { return cFunctionnameFunctionnameParserRuleCall_1_0; }
		
		//signature=signature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//signature
		public RuleCall getSignatureSignatureParserRuleCall_2_0() { return cSignatureSignatureParserRuleCall_2_0; }
		
		//functionbody=functionbody?
		public Assignment getFunctionbodyAssignment_3() { return cFunctionbodyAssignment_3; }
		
		//functionbody
		public RuleCall getFunctionbodyFunctionbodyParserRuleCall_3_0() { return cFunctionbodyFunctionbodyParserRuleCall_3_0; }
	}
	public class FunctionnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.functionname");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//functionname:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class ConstdeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.constdecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstdeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConstspecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConstspecConstspecParserRuleCall_2_0_0 = (RuleCall)cConstspecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cConstspecAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cConstspecConstspecParserRuleCall_2_1_1_0_0 = (RuleCall)cConstspecAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//constdecl:
		//	{constdecl} "const" (constspec+=constspec | "(" (constspec+=constspec ";")* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//{constdecl} "const" (constspec+=constspec | "(" (constspec+=constspec ";")* ")")
		public Group getGroup() { return cGroup; }
		
		//{constdecl}
		public Action getConstdeclAction_0() { return cConstdeclAction_0; }
		
		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }
		
		//constspec+=constspec | "(" (constspec+=constspec ";")* ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//constspec+=constspec
		public Assignment getConstspecAssignment_2_0() { return cConstspecAssignment_2_0; }
		
		//constspec
		public RuleCall getConstspecConstspecParserRuleCall_2_0_0() { return cConstspecConstspecParserRuleCall_2_0_0; }
		
		//"(" (constspec+=constspec ";")* ")"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(constspec+=constspec ";")*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//constspec+=constspec
		public Assignment getConstspecAssignment_2_1_1_0() { return cConstspecAssignment_2_1_1_0; }
		
		//constspec
		public RuleCall getConstspecConstspecParserRuleCall_2_1_1_0_0() { return cConstspecConstspecParserRuleCall_2_1_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class ConstspecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.constspec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierlistAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierlistIdentifierlistParserRuleCall_0_0 = (RuleCall)cIdentifierlistAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionlistAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_1_2_0 = (RuleCall)cExpressionlistAssignment_1_2.eContents().get(0);
		
		//constspec:
		//	identifierlist=identifierlist (type=type? "=" expressionlist=expressionlist)?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierlist=identifierlist (type=type? "=" expressionlist=expressionlist)?
		public Group getGroup() { return cGroup; }
		
		//identifierlist=identifierlist
		public Assignment getIdentifierlistAssignment_0() { return cIdentifierlistAssignment_0; }
		
		//identifierlist
		public RuleCall getIdentifierlistIdentifierlistParserRuleCall_0_0() { return cIdentifierlistIdentifierlistParserRuleCall_0_0; }
		
		//(type=type? "=" expressionlist=expressionlist)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type=type?
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0_0() { return cTypeTypeParserRuleCall_1_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_1_2() { return cExpressionlistAssignment_1_2; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_1_2_0() { return cExpressionlistExpressionlistParserRuleCall_1_2_0; }
	}
	public class SimplestmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.simplestmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Assignment cSendstmtAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cSendstmtSendstmtauxParserRuleCall_0_1_0_0_0 = (RuleCall)cSendstmtAssignment_0_1_0_0.eContents().get(0);
		private final Assignment cIncdecstmtAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cIncdecstmtIncdecstmtauxParserRuleCall_0_1_1_0 = (RuleCall)cIncdecstmtAssignment_0_1_1.eContents().get(0);
		private final Assignment cAssignmentAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cAssignmentAssignmentauxParserRuleCall_0_1_2_0 = (RuleCall)cAssignmentAssignment_0_1_2.eContents().get(0);
		private final Assignment cShortvardeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cShortvardeclShortvardeclParserRuleCall_1_0 = (RuleCall)cShortvardeclAssignment_1.eContents().get(0);
		
		//simplestmt:
		//	expression=expression (=> (sendstmt=sendstmtaux) | incdecstmt=incdecstmtaux | assignment=assignmentaux)? |
		//	shortvardecl=shortvardecl;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=expression (=> (sendstmt=sendstmtaux) | incdecstmt=incdecstmtaux | assignment=assignmentaux)? |
		//shortvardecl=shortvardecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expression=expression (=> (sendstmt=sendstmtaux) | incdecstmt=incdecstmtaux | assignment=assignmentaux)?
		public Group getGroup_0() { return cGroup_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_0() { return cExpressionAssignment_0_0; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0_0() { return cExpressionExpressionParserRuleCall_0_0_0; }
		
		//(=> (sendstmt=sendstmtaux) | incdecstmt=incdecstmtaux | assignment=assignmentaux)?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//=> (sendstmt=sendstmtaux)
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//sendstmt=sendstmtaux
		public Assignment getSendstmtAssignment_0_1_0_0() { return cSendstmtAssignment_0_1_0_0; }
		
		//sendstmtaux
		public RuleCall getSendstmtSendstmtauxParserRuleCall_0_1_0_0_0() { return cSendstmtSendstmtauxParserRuleCall_0_1_0_0_0; }
		
		//incdecstmt=incdecstmtaux
		public Assignment getIncdecstmtAssignment_0_1_1() { return cIncdecstmtAssignment_0_1_1; }
		
		//incdecstmtaux
		public RuleCall getIncdecstmtIncdecstmtauxParserRuleCall_0_1_1_0() { return cIncdecstmtIncdecstmtauxParserRuleCall_0_1_1_0; }
		
		//assignment=assignmentaux
		public Assignment getAssignmentAssignment_0_1_2() { return cAssignmentAssignment_0_1_2; }
		
		//assignmentaux
		public RuleCall getAssignmentAssignmentauxParserRuleCall_0_1_2_0() { return cAssignmentAssignmentauxParserRuleCall_0_1_2_0; }
		
		//shortvardecl=shortvardecl
		public Assignment getShortvardeclAssignment_1() { return cShortvardeclAssignment_1; }
		
		//shortvardecl
		public RuleCall getShortvardeclShortvardeclParserRuleCall_1_0() { return cShortvardeclShortvardeclParserRuleCall_1_0; }
	}
	public class ShortvardeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.shortvardecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierlistAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierlistIdentifierlistParserRuleCall_0_0 = (RuleCall)cIdentifierlistAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_2_0 = (RuleCall)cExpressionlistAssignment_2.eContents().get(0);
		
		//shortvardecl:
		//	identifierlist=identifierlist ":=" expressionlist=expressionlist;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierlist=identifierlist ":=" expressionlist=expressionlist
		public Group getGroup() { return cGroup; }
		
		//identifierlist=identifierlist
		public Assignment getIdentifierlistAssignment_0() { return cIdentifierlistAssignment_0; }
		
		//identifierlist
		public RuleCall getIdentifierlistIdentifierlistParserRuleCall_0_0() { return cIdentifierlistIdentifierlistParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_2() { return cExpressionlistAssignment_2; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_2_0() { return cExpressionlistExpressionlistParserRuleCall_2_0; }
	}
	public class DeferstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.deferstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//deferstmt:
		//	"defer" expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"defer" expression
		public Group getGroup() { return cGroup; }
		
		//"defer"
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class GotostmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.gotostmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//gotostmt:
		//	"goto" label;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" label
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class ContinuestmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.continuestmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//continuestmt:
		//	"continue" label?;
		@Override public ParserRule getRule() { return rule; }
		
		//"continue" label?
		public Group getGroup() { return cGroup; }
		
		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//label?
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class BreakstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.breakstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//breakstmt:
		//	"break" label?;
		@Override public ParserRule getRule() { return rule; }
		
		//"break" label?
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//label?
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class ReturnstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.returnstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnstmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_2_0 = (RuleCall)cExpressionlistAssignment_2.eContents().get(0);
		
		//returnstmt:
		//	{returnstmt} "return" expressionlist=expressionlist?;
		@Override public ParserRule getRule() { return rule; }
		
		//{returnstmt} "return" expressionlist=expressionlist?
		public Group getGroup() { return cGroup; }
		
		//{returnstmt}
		public Action getReturnstmtAction_0() { return cReturnstmtAction_0; }
		
		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expressionlist=expressionlist?
		public Assignment getExpressionlistAssignment_2() { return cExpressionlistAssignment_2; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_2_0() { return cExpressionlistExpressionlistParserRuleCall_2_0; }
	}
	public class SelectstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.selectstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectstmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommclauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommclauseCommclauseParserRuleCall_3_0 = (RuleCall)cCommclauseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//selectstmt:
		//	{selectstmt} "select" "{" commclause+=commclause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{selectstmt} "select" "{" commclause+=commclause* "}"
		public Group getGroup() { return cGroup; }
		
		//{selectstmt}
		public Action getSelectstmtAction_0() { return cSelectstmtAction_0; }
		
		//"select"
		public Keyword getSelectKeyword_1() { return cSelectKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//commclause+=commclause*
		public Assignment getCommclauseAssignment_3() { return cCommclauseAssignment_3; }
		
		//commclause
		public RuleCall getCommclauseCommclauseParserRuleCall_3_0() { return cCommclauseCommclauseParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.commclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommcaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementlistStatementlistParserRuleCall_2_0 = (RuleCall)cStatementlistAssignment_2.eContents().get(0);
		
		//commclause:
		//	commcase ":" statementlist=statementlist;
		@Override public ParserRule getRule() { return rule; }
		
		//commcase ":" statementlist=statementlist
		public Group getGroup() { return cGroup; }
		
		//commcase
		public RuleCall getCommcaseParserRuleCall_0() { return cCommcaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementlist=statementlist
		public Assignment getStatementlistAssignment_2() { return cStatementlistAssignment_2; }
		
		//statementlist
		public RuleCall getStatementlistStatementlistParserRuleCall_2_0() { return cStatementlistStatementlistParserRuleCall_2_0; }
	}
	public class CommcaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.commcase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cSendstmtAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cSendstmtSendstmtParserRuleCall_0_1_0_0 = (RuleCall)cSendstmtAssignment_0_1_0.eContents().get(0);
		private final Assignment cRecvstmtAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cRecvstmtRecvstmtParserRuleCall_0_1_1_0 = (RuleCall)cRecvstmtAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCommcaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//commcase:
		//	"case" (sendstmt=sendstmt | => recvstmt=recvstmt) | {commcase} "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" (sendstmt=sendstmt | => recvstmt=recvstmt) | {commcase} "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" (sendstmt=sendstmt | => recvstmt=recvstmt)
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//sendstmt=sendstmt | => recvstmt=recvstmt
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//sendstmt=sendstmt
		public Assignment getSendstmtAssignment_0_1_0() { return cSendstmtAssignment_0_1_0; }
		
		//sendstmt
		public RuleCall getSendstmtSendstmtParserRuleCall_0_1_0_0() { return cSendstmtSendstmtParserRuleCall_0_1_0_0; }
		
		//=> recvstmt=recvstmt
		public Assignment getRecvstmtAssignment_0_1_1() { return cRecvstmtAssignment_0_1_1; }
		
		//recvstmt
		public RuleCall getRecvstmtRecvstmtParserRuleCall_0_1_1_0() { return cRecvstmtRecvstmtParserRuleCall_0_1_1_0; }
		
		//{commcase} "default"
		public Group getGroup_1() { return cGroup_1; }
		
		//{commcase}
		public Action getCommcaseAction_1_0() { return cCommcaseAction_1_0; }
		
		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class SendstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.sendstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//sendstmt:
		//	expression+=expression "<-" expression+=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression+=expression "<-" expression+=expression
		public Group getGroup() { return cGroup; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class SendstmtauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.sendstmtaux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		
		//sendstmtaux:
		//	=> ("<-" expression+=expression);
		@Override public ParserRule getRule() { return rule; }
		
		//=> ("<-" expression+=expression)
		public Group getGroup() { return cGroup; }
		
		//"<-" expression+=expression
		public Group getGroup_0() { return cGroup_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_0() { return cLessThanSignHyphenMinusKeyword_0_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
	}
	public class RecvstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.recvstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionlistParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIdentifierlistAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cIdentifierlistIdentifierlistParserRuleCall_0_1_0_0 = (RuleCall)cIdentifierlistAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cRecvexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecvexprRecvexprParserRuleCall_1_0 = (RuleCall)cRecvexprAssignment_1.eContents().get(0);
		
		//recvstmt:
		//	(expressionlist "=" | identifierlist=identifierlist ":=") recvexpr=recvexpr;
		@Override public ParserRule getRule() { return rule; }
		
		//(expressionlist "=" | identifierlist=identifierlist ":=") recvexpr=recvexpr
		public Group getGroup() { return cGroup; }
		
		//expressionlist "=" | identifierlist=identifierlist ":="
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expressionlist "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expressionlist
		public RuleCall getExpressionlistParserRuleCall_0_0_0() { return cExpressionlistParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//identifierlist=identifierlist ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//identifierlist=identifierlist
		public Assignment getIdentifierlistAssignment_0_1_0() { return cIdentifierlistAssignment_0_1_0; }
		
		//identifierlist
		public RuleCall getIdentifierlistIdentifierlistParserRuleCall_0_1_0_0() { return cIdentifierlistIdentifierlistParserRuleCall_0_1_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//recvexpr=recvexpr
		public Assignment getRecvexprAssignment_1() { return cRecvexprAssignment_1; }
		
		//recvexpr
		public RuleCall getRecvexprRecvexprParserRuleCall_1_0() { return cRecvexprRecvexprParserRuleCall_1_0; }
	}
	public class ExpressionlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expressionlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//expressionlist:
		//	expression ("," expression+=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expression ("," expression+=expression)*
		public Group getGroup() { return cGroup; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//("," expression+=expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}
	public class PostexpressionlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.postexpressionlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostexpressionlistAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//postexpressionlist:
		//	{postexpressionlist} ("," expression+=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{postexpressionlist} ("," expression+=expression)*
		public Group getGroup() { return cGroup; }
		
		//{postexpressionlist}
		public Action getPostexpressionlistAction_0() { return cPostexpressionlistAction_0; }
		
		//("," expression+=expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}
	public class RecvexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.recvexpr");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//recvexpr:
		//	expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class GotstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.gotstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//gotstmt:
		//	"go" expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"go" expression
		public Group getGroup() { return cGroup; }
		
		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class ForstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.forstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cForclauseParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cRangeclauseAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRangeclauseRangeclauseParserRuleCall_1_1_1_0 = (RuleCall)cRangeclauseAssignment_1_1_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//forstmt:
		//	"for" (=> forclause | expression rangeclause=rangeclause?)? block=block;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" (=> forclause | expression rangeclause=rangeclause?)? block=block
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(=> forclause | expression rangeclause=rangeclause?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> forclause
		public RuleCall getForclauseParserRuleCall_1_0() { return cForclauseParserRuleCall_1_0; }
		
		//expression rangeclause=rangeclause?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_1_0() { return cExpressionParserRuleCall_1_1_0; }
		
		//rangeclause=rangeclause?
		public Assignment getRangeclauseAssignment_1_1_1() { return cRangeclauseAssignment_1_1_1; }
		
		//rangeclause
		public RuleCall getRangeclauseRangeclauseParserRuleCall_1_1_1_0() { return cRangeclauseRangeclauseParserRuleCall_1_1_1_0; }
		
		//block=block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	public class RangeclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.rangeclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExpressionlistAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpressionlistPostexpressionlistParserRuleCall_0_0_0_0 = (RuleCall)cExpressionlistAssignment_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIdentifierlistAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cIdentifierlistIdentifierlistParserRuleCall_0_1_0_0 = (RuleCall)cIdentifierlistAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//rangeclause:
		//	(expressionlist=postexpressionlist "=" | identifierlist=identifierlist ":=")? "range" expression=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(expressionlist=postexpressionlist "=" | identifierlist=identifierlist ":=")? "range" expression=expression
		public Group getGroup() { return cGroup; }
		
		//(expressionlist=postexpressionlist "=" | identifierlist=identifierlist ":=")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expressionlist=postexpressionlist "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expressionlist=postexpressionlist
		public Assignment getExpressionlistAssignment_0_0_0() { return cExpressionlistAssignment_0_0_0; }
		
		//postexpressionlist
		public RuleCall getExpressionlistPostexpressionlistParserRuleCall_0_0_0_0() { return cExpressionlistPostexpressionlistParserRuleCall_0_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//identifierlist=identifierlist ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//identifierlist=identifierlist
		public Assignment getIdentifierlistAssignment_0_1_0() { return cIdentifierlistAssignment_0_1_0; }
		
		//identifierlist
		public RuleCall getIdentifierlistIdentifierlistParserRuleCall_0_1_0_0() { return cIdentifierlistIdentifierlistParserRuleCall_0_1_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ForclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.forclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSimplestmtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimplestmtSimplestmtParserRuleCall_1_0 = (RuleCall)cSimplestmtAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSimplestmtAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSimplestmtSimplestmtParserRuleCall_5_0 = (RuleCall)cSimplestmtAssignment_5.eContents().get(0);
		
		//forclause:
		//	{forclause} simplestmt+=simplestmt* ";" expression=expression? ";" simplestmt+=simplestmt?;
		@Override public ParserRule getRule() { return rule; }
		
		//{forclause} simplestmt+=simplestmt* ";" expression=expression? ";" simplestmt+=simplestmt?
		public Group getGroup() { return cGroup; }
		
		//{forclause}
		public Action getForclauseAction_0() { return cForclauseAction_0; }
		
		//simplestmt+=simplestmt*
		public Assignment getSimplestmtAssignment_1() { return cSimplestmtAssignment_1; }
		
		//simplestmt
		public RuleCall getSimplestmtSimplestmtParserRuleCall_1_0() { return cSimplestmtSimplestmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//expression=expression?
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//simplestmt+=simplestmt?
		public Assignment getSimplestmtAssignment_5() { return cSimplestmtAssignment_5; }
		
		//simplestmt
		public RuleCall getSimplestmtSimplestmtParserRuleCall_5_0() { return cSimplestmtSimplestmtParserRuleCall_5_0; }
	}
	public class SwitchstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.switchstmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprswitchstmtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprswitchstmtExprswitchstmtParserRuleCall_0_0 = (RuleCall)cExprswitchstmtAssignment_0.eContents().get(0);
		private final Assignment cTypeswitchstmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeswitchstmtTypeswitchstmtParserRuleCall_1_0 = (RuleCall)cTypeswitchstmtAssignment_1.eContents().get(0);
		
		//switchstmt:
		//	exprswitchstmt=exprswitchstmt | => typeswitchstmt=typeswitchstmt;
		@Override public ParserRule getRule() { return rule; }
		
		//exprswitchstmt=exprswitchstmt | => typeswitchstmt=typeswitchstmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exprswitchstmt=exprswitchstmt
		public Assignment getExprswitchstmtAssignment_0() { return cExprswitchstmtAssignment_0; }
		
		//exprswitchstmt
		public RuleCall getExprswitchstmtExprswitchstmtParserRuleCall_0_0() { return cExprswitchstmtExprswitchstmtParserRuleCall_0_0; }
		
		//=> typeswitchstmt=typeswitchstmt
		public Assignment getTypeswitchstmtAssignment_1() { return cTypeswitchstmtAssignment_1; }
		
		//typeswitchstmt
		public RuleCall getTypeswitchstmtTypeswitchstmtParserRuleCall_1_0() { return cTypeswitchstmtTypeswitchstmtParserRuleCall_1_0; }
	}
	public class ExprswitchstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exprswitchstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprswitchstmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSimplestmtAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSimplestmtSimplestmtParserRuleCall_2_0_0 = (RuleCall)cSimplestmtAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprcaseclauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprcaseclauseExprcaseclauseParserRuleCall_5_0 = (RuleCall)cExprcaseclauseAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//exprswitchstmt:
		//	{exprswitchstmt} "switch" (=> simplestmt=simplestmt ";")? expression=expression? "{" exprcaseclause+=exprcaseclause*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//{exprswitchstmt} "switch" (=> simplestmt=simplestmt ";")? expression=expression? "{" exprcaseclause+=exprcaseclause* "}"
		public Group getGroup() { return cGroup; }
		
		//{exprswitchstmt}
		public Action getExprswitchstmtAction_0() { return cExprswitchstmtAction_0; }
		
		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }
		
		//(=> simplestmt=simplestmt ";")?
		public Group getGroup_2() { return cGroup_2; }
		
		//=> simplestmt=simplestmt
		public Assignment getSimplestmtAssignment_2_0() { return cSimplestmtAssignment_2_0; }
		
		//simplestmt
		public RuleCall getSimplestmtSimplestmtParserRuleCall_2_0_0() { return cSimplestmtSimplestmtParserRuleCall_2_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//expression=expression?
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//exprcaseclause+=exprcaseclause*
		public Assignment getExprcaseclauseAssignment_5() { return cExprcaseclauseAssignment_5; }
		
		//exprcaseclause
		public RuleCall getExprcaseclauseExprcaseclauseParserRuleCall_5_0() { return cExprcaseclauseExprcaseclauseParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ExprcaseclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exprcaseclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprswitchcaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprswitchcaseExprswitchcaseParserRuleCall_0_0 = (RuleCall)cExprswitchcaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementlistStatementlistParserRuleCall_2_0 = (RuleCall)cStatementlistAssignment_2.eContents().get(0);
		
		//exprcaseclause:
		//	exprswitchcase=exprswitchcase ":" statementlist=statementlist;
		@Override public ParserRule getRule() { return rule; }
		
		//exprswitchcase=exprswitchcase ":" statementlist=statementlist
		public Group getGroup() { return cGroup; }
		
		//exprswitchcase=exprswitchcase
		public Assignment getExprswitchcaseAssignment_0() { return cExprswitchcaseAssignment_0; }
		
		//exprswitchcase
		public RuleCall getExprswitchcaseExprswitchcaseParserRuleCall_0_0() { return cExprswitchcaseExprswitchcaseParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementlist=statementlist
		public Assignment getStatementlistAssignment_2() { return cStatementlistAssignment_2; }
		
		//statementlist
		public RuleCall getStatementlistStatementlistParserRuleCall_2_0() { return cStatementlistStatementlistParserRuleCall_2_0; }
	}
	public class ExprswitchcaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exprswitchcase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionlistAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_0_1_0 = (RuleCall)cExpressionlistAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprswitchcaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//exprswitchcase:
		//	"case" expressionlist=expressionlist | {exprswitchcase} "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" expressionlist=expressionlist | {exprswitchcase} "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" expressionlist=expressionlist
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//expressionlist=expressionlist
		public Assignment getExpressionlistAssignment_0_1() { return cExpressionlistAssignment_0_1; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_0_1_0() { return cExpressionlistExpressionlistParserRuleCall_0_1_0; }
		
		//{exprswitchcase} "default"
		public Group getGroup_1() { return cGroup_1; }
		
		//{exprswitchcase}
		public Action getExprswitchcaseAction_1_0() { return cExprswitchcaseAction_1_0; }
		
		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class TypeswitchstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typeswitchstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimplestmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeswitchguardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeswitchguardTypeswitchguardParserRuleCall_2_0 = (RuleCall)cTypeswitchguardAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypecaseclauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypecaseclauseTypecaseclauseParserRuleCall_4_0 = (RuleCall)cTypecaseclauseAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//typeswitchstmt:
		//	"switch" (=> simplestmt ";")? typeswitchguard=typeswitchguard "{" typecaseclause+=typecaseclause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" (=> simplestmt ";")? typeswitchguard=typeswitchguard "{" typecaseclause+=typecaseclause* "}"
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(=> simplestmt ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> simplestmt
		public RuleCall getSimplestmtParserRuleCall_1_0() { return cSimplestmtParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//typeswitchguard=typeswitchguard
		public Assignment getTypeswitchguardAssignment_2() { return cTypeswitchguardAssignment_2; }
		
		//typeswitchguard
		public RuleCall getTypeswitchguardTypeswitchguardParserRuleCall_2_0() { return cTypeswitchguardTypeswitchguardParserRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//typecaseclause+=typecaseclause*
		public Assignment getTypecaseclauseAssignment_4() { return cTypecaseclauseAssignment_4; }
		
		//typecaseclause
		public RuleCall getTypecaseclauseTypecaseclauseParserRuleCall_4_0() { return cTypecaseclauseTypecaseclauseParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeswitchguardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typeswitchguard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIDENTIFIERAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIDENTIFIERIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cIDENTIFIERAssignment_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPrimaryexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryexprPrimaryexprParserRuleCall_1_0 = (RuleCall)cPrimaryexprAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//typeswitchguard:
		//	(IDENTIFIER=IDENTIFIER ":=")? primaryexpr=primaryexpr "." "(" "type" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//(IDENTIFIER=IDENTIFIER ":=")? primaryexpr=primaryexpr "." "(" "type" ")"
		public Group getGroup() { return cGroup; }
		
		//(IDENTIFIER=IDENTIFIER ":=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER=IDENTIFIER
		public Assignment getIDENTIFIERAssignment_0_0() { return cIDENTIFIERAssignment_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERIDENTIFIERTerminalRuleCall_0_0_0() { return cIDENTIFIERIDENTIFIERTerminalRuleCall_0_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//primaryexpr=primaryexpr
		public Assignment getPrimaryexprAssignment_1() { return cPrimaryexprAssignment_1; }
		
		//primaryexpr
		public RuleCall getPrimaryexprPrimaryexprParserRuleCall_1_0() { return cPrimaryexprPrimaryexprParserRuleCall_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//"type"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypecaseclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typecaseclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeswitchcaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeswitchcaseTypeswitchcaseParserRuleCall_0_0 = (RuleCall)cTypeswitchcaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementlistStatementlistParserRuleCall_2_0 = (RuleCall)cStatementlistAssignment_2.eContents().get(0);
		
		//typecaseclause:
		//	typeswitchcase=typeswitchcase ":" statementlist=statementlist;
		@Override public ParserRule getRule() { return rule; }
		
		//typeswitchcase=typeswitchcase ":" statementlist=statementlist
		public Group getGroup() { return cGroup; }
		
		//typeswitchcase=typeswitchcase
		public Assignment getTypeswitchcaseAssignment_0() { return cTypeswitchcaseAssignment_0; }
		
		//typeswitchcase
		public RuleCall getTypeswitchcaseTypeswitchcaseParserRuleCall_0_0() { return cTypeswitchcaseTypeswitchcaseParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementlist=statementlist
		public Assignment getStatementlistAssignment_2() { return cStatementlistAssignment_2; }
		
		//statementlist
		public RuleCall getStatementlistStatementlistParserRuleCall_2_0() { return cStatementlistStatementlistParserRuleCall_2_0; }
	}
	public class TypeswitchcaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typeswitchcase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypelistAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypelistTypelistParserRuleCall_0_1_0 = (RuleCall)cTypelistAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeswitchcaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//typeswitchcase:
		//	"case" typelist=typelist | {typeswitchcase} "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" typelist=typelist | {typeswitchcase} "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" typelist=typelist
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//typelist=typelist
		public Assignment getTypelistAssignment_0_1() { return cTypelistAssignment_0_1; }
		
		//typelist
		public RuleCall getTypelistTypelistParserRuleCall_0_1_0() { return cTypelistTypelistParserRuleCall_0_1_0; }
		
		//{typeswitchcase} "default"
		public Group getGroup_1() { return cGroup_1; }
		
		//{typeswitchcase}
		public Action getTypeswitchcaseAction_1_0() { return cTypeswitchcaseAction_1_0; }
		
		//"default"
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class TypelistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typelist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypelistAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//typelist:
		//	{typelist} "type" ("," type+=type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{typelist} "type" ("," type+=type)*
		public Group getGroup() { return cGroup; }
		
		//{typelist}
		public Action getTypelistAction_0() { return cTypelistAction_0; }
		
		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//("," type+=type)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//type+=type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}
	public class IfstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ifstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSimplestmtAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSimplestmtSimplestmtParserRuleCall_1_0_0 = (RuleCall)cSimplestmtAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cIfstmtAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cIfstmtIfstmtParserRuleCall_4_1_0_0 = (RuleCall)cIfstmtAssignment_4_1_0.eContents().get(0);
		private final Assignment cBlockAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_4_1_1_0 = (RuleCall)cBlockAssignment_4_1_1.eContents().get(0);
		
		//ifstmt:
		//	"if" (=> simplestmt=simplestmt ";")? expression=expression block+=block ("else" (ifstmt=ifstmt | block+=block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" (=> simplestmt=simplestmt ";")? expression=expression block+=block ("else" (ifstmt=ifstmt | block+=block))?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(=> simplestmt=simplestmt ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> simplestmt=simplestmt
		public Assignment getSimplestmtAssignment_1_0() { return cSimplestmtAssignment_1_0; }
		
		//simplestmt
		public RuleCall getSimplestmtSimplestmtParserRuleCall_1_0_0() { return cSimplestmtSimplestmtParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//block+=block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
		
		//("else" (ifstmt=ifstmt | block+=block))?
		public Group getGroup_4() { return cGroup_4; }
		
		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//ifstmt=ifstmt | block+=block
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//ifstmt=ifstmt
		public Assignment getIfstmtAssignment_4_1_0() { return cIfstmtAssignment_4_1_0; }
		
		//ifstmt
		public RuleCall getIfstmtIfstmtParserRuleCall_4_1_0_0() { return cIfstmtIfstmtParserRuleCall_4_1_0_0; }
		
		//block+=block
		public Assignment getBlockAssignment_4_1_1() { return cBlockAssignment_4_1_1; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_4_1_1_0() { return cBlockBlockParserRuleCall_4_1_1_0; }
	}
	public class AssignmentauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assignmentaux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPostexpressionlistAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPostexpressionlistPostexpressionlistParserRuleCall_0_0 = (RuleCall)cPostexpressionlistAssignment_0.eContents().get(0);
		private final Assignment cASSIGN_OPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cASSIGN_OPASSIGN_OPTerminalRuleCall_1_0 = (RuleCall)cASSIGN_OPAssignment_1.eContents().get(0);
		private final Assignment cExpressionlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionlistExpressionlistParserRuleCall_2_0 = (RuleCall)cExpressionlistAssignment_2.eContents().get(0);
		
		//assignmentaux:
		//	postexpressionlist+=postexpressionlist ASSIGN_OP=ASSIGN_OP expressionlist+=expressionlist;
		@Override public ParserRule getRule() { return rule; }
		
		//postexpressionlist+=postexpressionlist ASSIGN_OP=ASSIGN_OP expressionlist+=expressionlist
		public Group getGroup() { return cGroup; }
		
		//postexpressionlist+=postexpressionlist
		public Assignment getPostexpressionlistAssignment_0() { return cPostexpressionlistAssignment_0; }
		
		//postexpressionlist
		public RuleCall getPostexpressionlistPostexpressionlistParserRuleCall_0_0() { return cPostexpressionlistPostexpressionlistParserRuleCall_0_0; }
		
		//ASSIGN_OP=ASSIGN_OP
		public Assignment getASSIGN_OPAssignment_1() { return cASSIGN_OPAssignment_1; }
		
		//ASSIGN_OP
		public RuleCall getASSIGN_OPASSIGN_OPTerminalRuleCall_1_0() { return cASSIGN_OPASSIGN_OPTerminalRuleCall_1_0; }
		
		//expressionlist+=expressionlist
		public Assignment getExpressionlistAssignment_2() { return cExpressionlistAssignment_2; }
		
		//expressionlist
		public RuleCall getExpressionlistExpressionlistParserRuleCall_2_0() { return cExpressionlistExpressionlistParserRuleCall_2_0; }
	}
	public class IncdecstmtauxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.incdecstmtaux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//incdecstmtaux:
		//	"++" | "--";
		@Override public ParserRule getRule() { return rule; }
		
		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}
	public class LabeledstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.labeledstmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelLabelParserRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//labeledstmt:
		//	label=label "." statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//label=label "." statement=statement
		public Group getGroup() { return cGroup; }
		
		//label=label
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//label
		public RuleCall getLabelLabelParserRuleCall_0_0() { return cLabelLabelParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//statement=statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.label");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//label:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class FallthroughstmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.fallthroughstmt");
		private final Keyword cFallthroughKeyword = (Keyword)rule.eContents().get(1);
		
		//fallthroughstmt:
		//	"fallthrough";
		@Override public ParserRule getRule() { return rule; }
		
		//"fallthrough"
		public Keyword getFallthroughKeyword() { return cFallthroughKeyword; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementlistParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//block:
		//	"{" statementlist "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" statementlist "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//statementlist
		public RuleCall getStatementlistParserRuleCall_1() { return cStatementlistParserRuleCall_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.statementlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementlistAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_1_0_0 = (RuleCall)cStatementAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//statementlist:
		//	{statementlist} (statement+=statement ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//{statementlist} (statement+=statement ";")*
		public Group getGroup() { return cGroup; }
		
		//{statementlist}
		public Action getStatementlistAction_0() { return cStatementlistAction_0; }
		
		//(statement+=statement ";")*
		public Group getGroup_1() { return cGroup_1; }
		
		//statement+=statement
		public Assignment getStatementAssignment_1_0() { return cStatementAssignment_1_0; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_0_0() { return cStatementStatementParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class FunctionbodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.functionbody");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//functionbody:
		//	block;
		@Override public ParserRule getRule() { return rule; }
		
		//block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class FieldnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.fieldname");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//fieldname:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasiclitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBasiclitBasiclitParserRuleCall_0_0 = (RuleCall)cBasiclitAssignment_0.eContents().get(0);
		private final Assignment cCompositelitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompositelitCompositelitParserRuleCall_1_0 = (RuleCall)cCompositelitAssignment_1.eContents().get(0);
		private final Assignment cFunctionlitAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionlitFunctionlitParserRuleCall_2_0 = (RuleCall)cFunctionlitAssignment_2.eContents().get(0);
		
		//literal:
		//	basiclit=basiclit | compositelit=compositelit | functionlit=functionlit;
		@Override public ParserRule getRule() { return rule; }
		
		//basiclit=basiclit | compositelit=compositelit | functionlit=functionlit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//basiclit=basiclit
		public Assignment getBasiclitAssignment_0() { return cBasiclitAssignment_0; }
		
		//basiclit
		public RuleCall getBasiclitBasiclitParserRuleCall_0_0() { return cBasiclitBasiclitParserRuleCall_0_0; }
		
		//compositelit=compositelit
		public Assignment getCompositelitAssignment_1() { return cCompositelitAssignment_1; }
		
		//compositelit
		public RuleCall getCompositelitCompositelitParserRuleCall_1_0() { return cCompositelitCompositelitParserRuleCall_1_0; }
		
		//functionlit=functionlit
		public Assignment getFunctionlitAssignment_2() { return cFunctionlitAssignment_2; }
		
		//functionlit
		public RuleCall getFunctionlitFunctionlitParserRuleCall_2_0() { return cFunctionlitFunctionlitParserRuleCall_2_0; }
	}
	public class BasiclitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.basiclit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInt_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImaginary_litParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRune_litParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cString_litParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//basiclit:
		//	=> int_lit | => float_lit | imaginary_lit | rune_lit | string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//=> int_lit | => float_lit | imaginary_lit | rune_lit | string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> int_lit
		public RuleCall getInt_litParserRuleCall_0() { return cInt_litParserRuleCall_0; }
		
		//=> float_lit
		public RuleCall getFloat_litParserRuleCall_1() { return cFloat_litParserRuleCall_1; }
		
		//imaginary_lit
		public RuleCall getImaginary_litParserRuleCall_2() { return cImaginary_litParserRuleCall_2; }
		
		//rune_lit
		public RuleCall getRune_litParserRuleCall_3() { return cRune_litParserRuleCall_3; }
		
		//string_lit
		public RuleCall getString_litParserRuleCall_4() { return cString_litParserRuleCall_4; }
	}
	public class Qualified_identElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.qualified_ident");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//qualified_ident:
		//	"." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class SlicetypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.slicetype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cElementtypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//slicetype:
		//	"[" "]" elementtype;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" "]" elementtype
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
		
		//elementtype
		public RuleCall getElementtypeParserRuleCall_2() { return cElementtypeParserRuleCall_2; }
	}
	public class PointertypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.pointertype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBasetypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//pointertype:
		//	"*" basetype;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" basetype
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//basetype
		public RuleCall getBasetypeParserRuleCall_1() { return cBasetypeParserRuleCall_1; }
	}
	public class BasetypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.basetype");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//basetype:
		//	type;
		@Override public ParserRule getRule() { return rule; }
		
		//type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ChanneltypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.channeltype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final Keyword cChanKeyword_0_0_0_0 = (Keyword)cGroup_0_0_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Keyword cChanKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cChanKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final RuleCall cElementtypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//channeltype:
		//	(=> ("chan" "<-") | "chan" | "<-" "chan") elementtype;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> ("chan" "<-") | "chan" | "<-" "chan") elementtype
		public Group getGroup() { return cGroup; }
		
		//=> ("chan" "<-") | "chan" | "<-" "chan"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//=> ("chan" "<-")
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//"chan" "<-"
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_0_0_0() { return cChanKeyword_0_0_0_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_0_0_1() { return cLessThanSignHyphenMinusKeyword_0_0_0_1; }
		
		//"chan"
		public Keyword getChanKeyword_0_1() { return cChanKeyword_0_1; }
		
		//"<-" "chan"
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_2_0() { return cLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_2_1() { return cChanKeyword_0_2_1; }
		
		//elementtype
		public RuleCall getElementtypeParserRuleCall_1() { return cElementtypeParserRuleCall_1; }
	}
	public class MaptypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.maptype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cKeytypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementtypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementtypeElementtypeParserRuleCall_4_0 = (RuleCall)cElementtypeAssignment_4.eContents().get(0);
		
		//maptype:
		//	"map" "[" keytype "]" elementtype=elementtype;
		@Override public ParserRule getRule() { return rule; }
		
		//"map" "[" keytype "]" elementtype=elementtype
		public Group getGroup() { return cGroup; }
		
		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//keytype
		public RuleCall getKeytypeParserRuleCall_2() { return cKeytypeParserRuleCall_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//elementtype=elementtype
		public Assignment getElementtypeAssignment_4() { return cElementtypeAssignment_4; }
		
		//elementtype
		public RuleCall getElementtypeElementtypeParserRuleCall_4_0() { return cElementtypeElementtypeParserRuleCall_4_0; }
	}
	public class KeytypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.keytype");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//keytype:
		//	type;
		@Override public ParserRule getRule() { return rule; }
		
		//type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ElementtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.elementtype");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//elementtype:
		//	type;
		@Override public ParserRule getRule() { return rule; }
		
		//type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class InterfacetypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.interfacetype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfacetypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMethodspecAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMethodspecMethodspecParserRuleCall_3_0_0 = (RuleCall)cMethodspecAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//interfacetype:
		//	{interfacetype} "interface" "{" (methodspec+=methodspec ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{interfacetype} "interface" "{" (methodspec+=methodspec ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//{interfacetype}
		public Action getInterfacetypeAction_0() { return cInterfacetypeAction_0; }
		
		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(methodspec+=methodspec ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//methodspec+=methodspec
		public Assignment getMethodspecAssignment_3_0() { return cMethodspecAssignment_3_0; }
		
		//methodspec
		public RuleCall getMethodspecMethodspecParserRuleCall_3_0_0() { return cMethodspecMethodspecParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodspecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.methodspec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMethodnameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMethodnameMethodnameParserRuleCall_0_0_0 = (RuleCall)cMethodnameAssignment_0_0.eContents().get(0);
		private final Assignment cSignatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSignatureSignatureParserRuleCall_0_1_0 = (RuleCall)cSignatureAssignment_0_1.eContents().get(0);
		private final Assignment cInterfacetypenameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInterfacetypenameInterfacetypenameParserRuleCall_1_0 = (RuleCall)cInterfacetypenameAssignment_1.eContents().get(0);
		
		//methodspec:
		//	methodname=methodname signature=signature | interfacetypename=interfacetypename;
		@Override public ParserRule getRule() { return rule; }
		
		//methodname=methodname signature=signature | interfacetypename=interfacetypename
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//methodname=methodname signature=signature
		public Group getGroup_0() { return cGroup_0; }
		
		//methodname=methodname
		public Assignment getMethodnameAssignment_0_0() { return cMethodnameAssignment_0_0; }
		
		//methodname
		public RuleCall getMethodnameMethodnameParserRuleCall_0_0_0() { return cMethodnameMethodnameParserRuleCall_0_0_0; }
		
		//signature=signature
		public Assignment getSignatureAssignment_0_1() { return cSignatureAssignment_0_1; }
		
		//signature
		public RuleCall getSignatureSignatureParserRuleCall_0_1_0() { return cSignatureSignatureParserRuleCall_0_1_0; }
		
		//interfacetypename=interfacetypename
		public Assignment getInterfacetypenameAssignment_1() { return cInterfacetypenameAssignment_1; }
		
		//interfacetypename
		public RuleCall getInterfacetypenameInterfacetypenameParserRuleCall_1_0() { return cInterfacetypenameInterfacetypenameParserRuleCall_1_0; }
	}
	public class MethodnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.methodname");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//methodname:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class InterfacetypenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.interfacetypename");
		private final RuleCall cTypenameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//interfacetypename:
		//	typename;
		@Override public ParserRule getRule() { return rule; }
		
		//typename
		public RuleCall getTypenameParserRuleCall() { return cTypenameParserRuleCall; }
	}
	public class FunctiontypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.functiontype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//functiontype:
		//	"func" signature;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" signature
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParametersParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Assignment cResultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultResultParserRuleCall_1_0 = (RuleCall)cResultAssignment_1.eContents().get(0);
		
		//signature:
		//	parameters=parameters => result=result?;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters=parameters => result=result?
		public Group getGroup() { return cGroup; }
		
		//parameters=parameters
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//parameters
		public RuleCall getParametersParametersParserRuleCall_0_0() { return cParametersParametersParserRuleCall_0_0; }
		
		//=> result=result?
		public Assignment getResultAssignment_1() { return cResultAssignment_1; }
		
		//result
		public RuleCall getResultResultParserRuleCall_1_0() { return cResultResultParserRuleCall_1_0; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParametersParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//result:
		//	=> type | parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//=> type | parameters
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//parameters
		public RuleCall getParametersParserRuleCall_1() { return cParametersParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterlistAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterlistParameterlistParserRuleCall_2_0_0 = (RuleCall)cParameterlistAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//parameters:
		//	{parameters} "(" (parameterlist=parameterlist ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{parameters} "(" (parameterlist=parameterlist ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//{parameters}
		public Action getParametersAction_0() { return cParametersAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameterlist=parameterlist ","?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameterlist=parameterlist
		public Assignment getParameterlistAssignment_2_0() { return cParameterlistAssignment_2_0; }
		
		//parameterlist
		public RuleCall getParameterlistParameterlistParserRuleCall_2_0_0() { return cParameterlistParameterlistParserRuleCall_2_0_0; }
		
		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameterlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterdeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterdeclParameterdeclParserRuleCall_0_0 = (RuleCall)cParameterdeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterdeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterdeclParameterdeclParserRuleCall_1_1_0 = (RuleCall)cParameterdeclAssignment_1_1.eContents().get(0);
		
		//parameterlist:
		//	parameterdecl+=parameterdecl ("," parameterdecl+=parameterdecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterdecl+=parameterdecl ("," parameterdecl+=parameterdecl)*
		public Group getGroup() { return cGroup; }
		
		//parameterdecl+=parameterdecl
		public Assignment getParameterdeclAssignment_0() { return cParameterdeclAssignment_0; }
		
		//parameterdecl
		public RuleCall getParameterdeclParameterdeclParserRuleCall_0_0() { return cParameterdeclParameterdeclParserRuleCall_0_0; }
		
		//("," parameterdecl+=parameterdecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameterdecl+=parameterdecl
		public Assignment getParameterdeclAssignment_1_1() { return cParameterdeclAssignment_1_1; }
		
		//parameterdecl
		public RuleCall getParameterdeclParameterdeclParserRuleCall_1_1_0() { return cParameterdeclParameterdeclParserRuleCall_1_1_0; }
	}
	public class ParameterdeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameterdecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierlistAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierlistIdentifierlistParserRuleCall_0_0 = (RuleCall)cIdentifierlistAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//parameterdecl:
		//	identifierlist=identifierlist? "..."? type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierlist=identifierlist? "..."? type=type
		public Group getGroup() { return cGroup; }
		
		//identifierlist=identifierlist?
		public Assignment getIdentifierlistAssignment_0() { return cIdentifierlistAssignment_0; }
		
		//identifierlist
		public RuleCall getIdentifierlistIdentifierlistParserRuleCall_0_0() { return cIdentifierlistIdentifierlistParserRuleCall_0_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class IdentifierlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identifierlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//identifierlist:
		//	IDENTIFIER ("," IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER ("," IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}
	public class StructtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.structtype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructtypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFielddeclAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFielddeclFielddeclParserRuleCall_3_0_0 = (RuleCall)cFielddeclAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//structtype:
		//	{structtype} "struct" "{" (fielddecl+=fielddecl ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{structtype} "struct" "{" (fielddecl+=fielddecl ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//{structtype}
		public Action getStructtypeAction_0() { return cStructtypeAction_0; }
		
		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(fielddecl+=fielddecl ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//fielddecl+=fielddecl
		public Assignment getFielddeclAssignment_3_0() { return cFielddeclAssignment_3_0; }
		
		//fielddecl
		public RuleCall getFielddeclFielddeclParserRuleCall_3_0_0() { return cFielddeclFielddeclParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FielddeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.fielddecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cIdentifierlistAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentifierlistIdentifierlistParserRuleCall_0_0_0_0 = (RuleCall)cIdentifierlistAssignment_0_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_0_1_0 = (RuleCall)cTypeAssignment_0_0_1.eContents().get(0);
		private final Assignment cEmbeddedfieldAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cEmbeddedfieldEmbeddedfieldParserRuleCall_0_1_0 = (RuleCall)cEmbeddedfieldAssignment_0_1.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//fielddecl:
		//	(identifierlist=identifierlist type=type | embeddedfield=embeddedfield) tag=tag?;
		@Override public ParserRule getRule() { return rule; }
		
		//(identifierlist=identifierlist type=type | embeddedfield=embeddedfield) tag=tag?
		public Group getGroup() { return cGroup; }
		
		//identifierlist=identifierlist type=type | embeddedfield=embeddedfield
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//identifierlist=identifierlist type=type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//identifierlist=identifierlist
		public Assignment getIdentifierlistAssignment_0_0_0() { return cIdentifierlistAssignment_0_0_0; }
		
		//identifierlist
		public RuleCall getIdentifierlistIdentifierlistParserRuleCall_0_0_0_0() { return cIdentifierlistIdentifierlistParserRuleCall_0_0_0_0; }
		
		//type=type
		public Assignment getTypeAssignment_0_0_1() { return cTypeAssignment_0_0_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_0_1_0() { return cTypeTypeParserRuleCall_0_0_1_0; }
		
		//embeddedfield=embeddedfield
		public Assignment getEmbeddedfieldAssignment_0_1() { return cEmbeddedfieldAssignment_0_1; }
		
		//embeddedfield
		public RuleCall getEmbeddedfieldEmbeddedfieldParserRuleCall_0_1_0() { return cEmbeddedfieldEmbeddedfieldParserRuleCall_0_1_0; }
		
		//tag=tag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//tag
		public RuleCall getTagTagParserRuleCall_1_0() { return cTagTagParserRuleCall_1_0; }
	}
	public class EmbeddedfieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.embeddedfield");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypenameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//embeddedfield:
		//	"*"? typename;
		@Override public ParserRule getRule() { return rule; }
		
		//"*"? typename
		public Group getGroup() { return cGroup; }
		
		//"*"?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//typename
		public RuleCall getTypenameParserRuleCall_1() { return cTypenameParserRuleCall_1; }
	}
	public class TypelitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typelit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cArraytypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cArraytypeArraytypeParserRuleCall_0_0 = (RuleCall)cArraytypeAssignment_0.eContents().get(0);
		private final Assignment cStructtypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStructtypeStructtypeParserRuleCall_1_0 = (RuleCall)cStructtypeAssignment_1.eContents().get(0);
		private final Assignment cPointertypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPointertypePointertypeParserRuleCall_2_0 = (RuleCall)cPointertypeAssignment_2.eContents().get(0);
		private final Assignment cFunctiontypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFunctiontypeFunctiontypeParserRuleCall_3_0 = (RuleCall)cFunctiontypeAssignment_3.eContents().get(0);
		private final Assignment cInterfacetypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cInterfacetypeInterfacetypeParserRuleCall_4_0 = (RuleCall)cInterfacetypeAssignment_4.eContents().get(0);
		private final Assignment cSlicetypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cSlicetypeSlicetypeParserRuleCall_5_0 = (RuleCall)cSlicetypeAssignment_5.eContents().get(0);
		private final Assignment cMaptypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cMaptypeMaptypeParserRuleCall_6_0 = (RuleCall)cMaptypeAssignment_6.eContents().get(0);
		private final Assignment cChanneltypeAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cChanneltypeChanneltypeParserRuleCall_7_0 = (RuleCall)cChanneltypeAssignment_7.eContents().get(0);
		
		//typelit:
		//	arraytype=arraytype | structtype=structtype | pointertype=pointertype | functiontype=functiontype |
		//	interfacetype=interfacetype | slicetype=slicetype | maptype=maptype | channeltype=channeltype;
		@Override public ParserRule getRule() { return rule; }
		
		//arraytype=arraytype | structtype=structtype | pointertype=pointertype | functiontype=functiontype |
		//interfacetype=interfacetype | slicetype=slicetype | maptype=maptype | channeltype=channeltype
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//arraytype=arraytype
		public Assignment getArraytypeAssignment_0() { return cArraytypeAssignment_0; }
		
		//arraytype
		public RuleCall getArraytypeArraytypeParserRuleCall_0_0() { return cArraytypeArraytypeParserRuleCall_0_0; }
		
		//structtype=structtype
		public Assignment getStructtypeAssignment_1() { return cStructtypeAssignment_1; }
		
		//structtype
		public RuleCall getStructtypeStructtypeParserRuleCall_1_0() { return cStructtypeStructtypeParserRuleCall_1_0; }
		
		//pointertype=pointertype
		public Assignment getPointertypeAssignment_2() { return cPointertypeAssignment_2; }
		
		//pointertype
		public RuleCall getPointertypePointertypeParserRuleCall_2_0() { return cPointertypePointertypeParserRuleCall_2_0; }
		
		//functiontype=functiontype
		public Assignment getFunctiontypeAssignment_3() { return cFunctiontypeAssignment_3; }
		
		//functiontype
		public RuleCall getFunctiontypeFunctiontypeParserRuleCall_3_0() { return cFunctiontypeFunctiontypeParserRuleCall_3_0; }
		
		//interfacetype=interfacetype
		public Assignment getInterfacetypeAssignment_4() { return cInterfacetypeAssignment_4; }
		
		//interfacetype
		public RuleCall getInterfacetypeInterfacetypeParserRuleCall_4_0() { return cInterfacetypeInterfacetypeParserRuleCall_4_0; }
		
		//slicetype=slicetype
		public Assignment getSlicetypeAssignment_5() { return cSlicetypeAssignment_5; }
		
		//slicetype
		public RuleCall getSlicetypeSlicetypeParserRuleCall_5_0() { return cSlicetypeSlicetypeParserRuleCall_5_0; }
		
		//maptype=maptype
		public Assignment getMaptypeAssignment_6() { return cMaptypeAssignment_6; }
		
		//maptype
		public RuleCall getMaptypeMaptypeParserRuleCall_6_0() { return cMaptypeMaptypeParserRuleCall_6_0; }
		
		//channeltype=channeltype
		public Assignment getChanneltypeAssignment_7() { return cChanneltypeAssignment_7; }
		
		//channeltype
		public RuleCall getChanneltypeChanneltypeParserRuleCall_7_0() { return cChanneltypeChanneltypeParserRuleCall_7_0; }
	}
	public class ArraytypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.arraytype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0_1_0 = (RuleCall)cExpressionAssignment_0_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cElementtypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementtypeElementtypeParserRuleCall_1_0 = (RuleCall)cElementtypeAssignment_1.eContents().get(0);
		
		//arraytype:
		//	=> ("[" expression=expression "]") elementtype=elementtype;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ("[" expression=expression "]") elementtype=elementtype
		public Group getGroup() { return cGroup; }
		
		//=> ("[" expression=expression "]")
		public Group getGroup_0() { return cGroup_0; }
		
		//"[" expression=expression "]"
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0_0() { return cLeftSquareBracketKeyword_0_0_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_0_1() { return cExpressionAssignment_0_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0_1_0() { return cExpressionExpressionParserRuleCall_0_0_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_0_2() { return cRightSquareBracketKeyword_0_0_2; }
		
		//elementtype=elementtype
		public Assignment getElementtypeAssignment_1() { return cElementtypeAssignment_1; }
		
		//elementtype
		public RuleCall getElementtypeElementtypeParserRuleCall_1_0() { return cElementtypeElementtypeParserRuleCall_1_0; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.tag");
		private final RuleCall cString_litParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//tag:
		//	string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//string_lit
		public RuleCall getString_litParserRuleCall() { return cString_litParserRuleCall; }
	}
	public class TypenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.typename");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cPackagenameParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cQualified_identParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cPackagenameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//typename:
		//	=> (packagename qualified_ident) | packagename;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (packagename qualified_ident) | packagename
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (packagename qualified_ident)
		public Group getGroup_0() { return cGroup_0; }
		
		//packagename qualified_ident
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//packagename
		public RuleCall getPackagenameParserRuleCall_0_0_0() { return cPackagenameParserRuleCall_0_0_0; }
		
		//qualified_ident
		public RuleCall getQualified_identParserRuleCall_0_0_1() { return cQualified_identParserRuleCall_0_0_1; }
		
		//packagename
		public RuleCall getPackagenameParserRuleCall_1() { return cPackagenameParserRuleCall_1; }
	}
	public class PackagenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.packagename");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//packagename:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class String_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.string_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRaw_string_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterpreted_string_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//string_lit:
		//	raw_string_lit | interpreted_string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//raw_string_lit | interpreted_string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//raw_string_lit
		public RuleCall getRaw_string_litParserRuleCall_0() { return cRaw_string_litParserRuleCall_0; }
		
		//interpreted_string_lit
		public RuleCall getInterpreted_string_litParserRuleCall_1() { return cInterpreted_string_litParserRuleCall_1; }
	}
	public class Raw_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.raw_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraveAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cNKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cGraveAccentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//raw_string_lit:
		//	"`" (LETTER | DECIMAL_DIGIT | "\\n")* "`";
		@Override public ParserRule getRule() { return rule; }
		
		//"`" (LETTER | DECIMAL_DIGIT | "\\n")* "`"
		public Group getGroup() { return cGroup; }
		
		//"`"
		public Keyword getGraveAccentKeyword_0() { return cGraveAccentKeyword_0; }
		
		//(LETTER | DECIMAL_DIGIT | "\\n")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_0() { return cLETTERTerminalRuleCall_1_0; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_1_1() { return cDECIMAL_DIGITTerminalRuleCall_1_1; }
		
		//"\\n"
		public Keyword getNKeyword_1_2() { return cNKeyword_1_2; }
		
		//"`"
		public Keyword getGraveAccentKeyword_2() { return cGraveAccentKeyword_2; }
	}
	public class Interpreted_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.interpreted_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_valueParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//interpreted_string_lit:
		//	"\"" (unicode_value | byte_value)* "\"";
		@Override public ParserRule getRule() { return rule; }
		
		//"\"" (unicode_value | byte_value)* "\""
		public Group getGroup() { return cGroup; }
		
		//"\""
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//(unicode_value | byte_value)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_value
		public RuleCall getUnicode_valueParserRuleCall_1_0() { return cUnicode_valueParserRuleCall_1_0; }
		
		//byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class Rune_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.rune_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnicode_valueParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//rune_lit:
		//	"'" (unicode_value | byte_value) "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'" (unicode_value | byte_value) "'"
		public Group getGroup() { return cGroup; }
		
		//"'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//unicode_value | byte_value
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unicode_value
		public RuleCall getUnicode_valueParserRuleCall_1_0() { return cUnicode_valueParserRuleCall_1_0; }
		
		//byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//"'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class Int_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.int_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHex_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//int_lit:
		//	(DECIMAL_DIGIT | hex_lit)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(DECIMAL_DIGIT | hex_lit)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_0() { return cDECIMAL_DIGITTerminalRuleCall_0; }
		
		//hex_lit
		public RuleCall getHex_litParserRuleCall_1() { return cHex_litParserRuleCall_1; }
	}
	public class Hex_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.hex_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cXKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cXKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//hex_lit:
		//	"0" ("x" | "X") HEX_DIGIT+;
		@Override public ParserRule getRule() { return rule; }
		
		//"0" ("x" | "X") HEX_DIGIT+
		public Group getGroup() { return cGroup; }
		
		//"0"
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }
		
		//"x" | "X"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"x"
		public Keyword getXKeyword_1_0() { return cXKeyword_1_0; }
		
		//"X"
		public Keyword getXKeyword_1_1() { return cXKeyword_1_1; }
		
		//HEX_DIGIT+
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
	}
	public class Imaginary_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.imaginary_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//imaginary_lit:
		//	(decimals | float_lit) "i";
		@Override public ParserRule getRule() { return rule; }
		
		//(decimals | float_lit) "i"
		public Group getGroup() { return cGroup; }
		
		//decimals | float_lit
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_0_0() { return cDecimalsParserRuleCall_0_0; }
		
		//float_lit
		public RuleCall getFloat_litParserRuleCall_0_1() { return cFloat_litParserRuleCall_0_1; }
		
		//"i"
		public Keyword getIKeyword_1() { return cIKeyword_1; }
	}
	public class Float_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.float_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExponentParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExponentParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDecimalsParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cExponentParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//float_lit:
		//	decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?;
		@Override public ParserRule getRule() { return rule; }
		
		//decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//decimals "." decimals? exponent?
		public Group getGroup_0() { return cGroup_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_0_0() { return cDecimalsParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//decimals?
		public RuleCall getDecimalsParserRuleCall_0_2() { return cDecimalsParserRuleCall_0_2; }
		
		//exponent?
		public RuleCall getExponentParserRuleCall_0_3() { return cExponentParserRuleCall_0_3; }
		
		//decimals exponent
		public Group getGroup_1() { return cGroup_1; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_1_0() { return cDecimalsParserRuleCall_1_0; }
		
		//exponent
		public RuleCall getExponentParserRuleCall_1_1() { return cExponentParserRuleCall_1_1; }
		
		//"." decimals exponent?
		public Group getGroup_2() { return cGroup_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_2_1() { return cDecimalsParserRuleCall_2_1; }
		
		//exponent?
		public RuleCall getExponentParserRuleCall_2_2() { return cExponentParserRuleCall_2_2; }
	}
	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cDecimalsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//exponent:
		//	("e" | "E") ("+" | "-")? decimals;
		@Override public ParserRule getRule() { return rule; }
		
		//("e" | "E") ("+" | "-")? decimals
		public Group getGroup() { return cGroup; }
		
		//"e" | "E"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }
		
		//"E"
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }
		
		//("+" | "-")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//decimals
		public RuleCall getDecimalsParserRuleCall_2() { return cDecimalsParserRuleCall_2; }
	}
	public class DecimalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.decimals");
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//decimals:
		//	DECIMAL_DIGIT+;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_DIGIT+
		public RuleCall getDECIMAL_DIGITTerminalRuleCall() { return cDECIMAL_DIGITTerminalRuleCall; }
	}
	public class Byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.byte_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOctal_byte_valueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHex_byte_valueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//byte_value:
		//	octal_byte_value | hex_byte_value;
		@Override public ParserRule getRule() { return rule; }
		
		//octal_byte_value | hex_byte_value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//octal_byte_value
		public RuleCall getOctal_byte_valueParserRuleCall_0() { return cOctal_byte_valueParserRuleCall_0; }
		
		//hex_byte_value
		public RuleCall getHex_byte_valueParserRuleCall_1() { return cHex_byte_valueParserRuleCall_1; }
	}
	public class Hex_byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.hex_byte_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//hex_byte_value:
		//	'\\' "x" HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//'\\' "x" HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//'\\'
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//"x"
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
	}
	public class Octal_byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.octal_byte_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cOCTAL_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//octal_byte_value:
		//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT
		public Group getGroup() { return cGroup; }
		
		//'\\'
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_1() { return cOCTAL_DIGITTerminalRuleCall_1; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_2() { return cOCTAL_DIGITTerminalRuleCall_2; }
		
		//OCTAL_DIGIT
		public RuleCall getOCTAL_DIGITTerminalRuleCall_3() { return cOCTAL_DIGITTerminalRuleCall_3; }
	}
	public class Unicode_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unicode_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final RuleCall cLETTERTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDECIMAL_DIGITTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLittle_u_valueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBig_u_valueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cESCAPED_CHARTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//unicode_value:
		//	(LETTER | DECIMAL_DIGIT) | little_u_value | big_u_value | ESCAPED_CHAR;
		@Override public ParserRule getRule() { return rule; }
		
		//(LETTER | DECIMAL_DIGIT) | little_u_value | big_u_value | ESCAPED_CHAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(LETTER | DECIMAL_DIGIT)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0_0() { return cLETTERTerminalRuleCall_0_0; }
		
		//DECIMAL_DIGIT
		public RuleCall getDECIMAL_DIGITTerminalRuleCall_0_1() { return cDECIMAL_DIGITTerminalRuleCall_0_1; }
		
		//little_u_value
		public RuleCall getLittle_u_valueParserRuleCall_1() { return cLittle_u_valueParserRuleCall_1; }
		
		//big_u_value
		public RuleCall getBig_u_valueParserRuleCall_2() { return cBig_u_valueParserRuleCall_2; }
		
		//ESCAPED_CHAR
		public RuleCall getESCAPED_CHARTerminalRuleCall_3() { return cESCAPED_CHARTerminalRuleCall_3; }
	}
	public class Big_u_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.big_u_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cHEX_DIGITTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cHEX_DIGITTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cHEX_DIGITTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cHEX_DIGITTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//big_u_value:
		//	"\\" "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//"\\" "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//"\\"
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//"U"
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_4() { return cHEX_DIGITTerminalRuleCall_4; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_5() { return cHEX_DIGITTerminalRuleCall_5; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_6() { return cHEX_DIGITTerminalRuleCall_6; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_7() { return cHEX_DIGITTerminalRuleCall_7; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_8() { return cHEX_DIGITTerminalRuleCall_8; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_9() { return cHEX_DIGITTerminalRuleCall_9; }
	}
	public class Little_u_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.little_u_value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cHEX_DIGITTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cHEX_DIGITTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cHEX_DIGITTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHEX_DIGITTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//little_u_value:
		//	"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
		@Override public ParserRule getRule() { return rule; }
		
		//"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		public Group getGroup() { return cGroup; }
		
		//"\\"
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//"u"
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_2() { return cHEX_DIGITTerminalRuleCall_2; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_3() { return cHEX_DIGITTerminalRuleCall_3; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_4() { return cHEX_DIGITTerminalRuleCall_4; }
		
		//HEX_DIGIT
		public RuleCall getHEX_DIGITTerminalRuleCall_5() { return cHEX_DIGITTerminalRuleCall_5; }
	}
	
	
	private final SourcefileElements pSourcefile;
	private final ImportdeclElements pImportdecl;
	private final ImportspecElements pImportspec;
	private final ImportpathElements pImportpath;
	private final PackageclauseElements pPackageclause;
	private final ExpressionElements pExpression;
	private final ExpressionauxElements pExpressionaux;
	private final UnaryexprElements pUnaryexpr;
	private final PrimaryexprElements pPrimaryexpr;
	private final OperandElements pOperand;
	private final TypeElements pType;
	private final TypeauxElements pTypeaux;
	private final MethodexprElements pMethodexpr;
	private final ConversionElements pConversion;
	private final PrimaryexprauxElements pPrimaryexpraux;
	private final ArgumentsElements pArguments;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final TypeassertionElements pTypeassertion;
	private final SelectorElements pSelector;
	private final CompositelitElements pCompositelit;
	private final LiteraltypeElements pLiteraltype;
	private final LiteralvalueElements pLiteralvalue;
	private final ElementlistElements pElementlist;
	private final KeyedelementElements pKeyedelement;
	private final KeyElements pKey;
	private final ElementElements pElement;
	private final FunctionlitElements pFunctionlit;
	private final StatementElements pStatement;
	private final DeclarationElements pDeclaration;
	private final VardeclElements pVardecl;
	private final VarspecElements pVarspec;
	private final TypedeclElements pTypedecl;
	private final TypespecElements pTypespec;
	private final TypespecauxElements pTypespecaux;
	private final TypedefElements pTypedef;
	private final AliasdeclElements pAliasdecl;
	private final TopleveldeclElements pTopleveldecl;
	private final MethoddeclElements pMethoddecl;
	private final ReceiverElements pReceiver;
	private final FunctiondeclElements pFunctiondecl;
	private final FunctionnameElements pFunctionname;
	private final ConstdeclElements pConstdecl;
	private final ConstspecElements pConstspec;
	private final SimplestmtElements pSimplestmt;
	private final ShortvardeclElements pShortvardecl;
	private final DeferstmtElements pDeferstmt;
	private final GotostmtElements pGotostmt;
	private final ContinuestmtElements pContinuestmt;
	private final BreakstmtElements pBreakstmt;
	private final ReturnstmtElements pReturnstmt;
	private final SelectstmtElements pSelectstmt;
	private final CommclauseElements pCommclause;
	private final CommcaseElements pCommcase;
	private final SendstmtElements pSendstmt;
	private final SendstmtauxElements pSendstmtaux;
	private final RecvstmtElements pRecvstmt;
	private final ExpressionlistElements pExpressionlist;
	private final PostexpressionlistElements pPostexpressionlist;
	private final RecvexprElements pRecvexpr;
	private final GotstmtElements pGotstmt;
	private final ForstmtElements pForstmt;
	private final RangeclauseElements pRangeclause;
	private final ForclauseElements pForclause;
	private final SwitchstmtElements pSwitchstmt;
	private final ExprswitchstmtElements pExprswitchstmt;
	private final ExprcaseclauseElements pExprcaseclause;
	private final ExprswitchcaseElements pExprswitchcase;
	private final TypeswitchstmtElements pTypeswitchstmt;
	private final TypeswitchguardElements pTypeswitchguard;
	private final TypecaseclauseElements pTypecaseclause;
	private final TypeswitchcaseElements pTypeswitchcase;
	private final TypelistElements pTypelist;
	private final IfstmtElements pIfstmt;
	private final AssignmentauxElements pAssignmentaux;
	private final IncdecstmtauxElements pIncdecstmtaux;
	private final LabeledstmtElements pLabeledstmt;
	private final LabelElements pLabel;
	private final FallthroughstmtElements pFallthroughstmt;
	private final BlockElements pBlock;
	private final StatementlistElements pStatementlist;
	private final FunctionbodyElements pFunctionbody;
	private final FieldnameElements pFieldname;
	private final LiteralElements pLiteral;
	private final BasiclitElements pBasiclit;
	private final Qualified_identElements pQualified_ident;
	private final SlicetypeElements pSlicetype;
	private final PointertypeElements pPointertype;
	private final BasetypeElements pBasetype;
	private final ChanneltypeElements pChanneltype;
	private final MaptypeElements pMaptype;
	private final KeytypeElements pKeytype;
	private final ElementtypeElements pElementtype;
	private final InterfacetypeElements pInterfacetype;
	private final MethodspecElements pMethodspec;
	private final MethodnameElements pMethodname;
	private final InterfacetypenameElements pInterfacetypename;
	private final FunctiontypeElements pFunctiontype;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterlistElements pParameterlist;
	private final ParameterdeclElements pParameterdecl;
	private final IdentifierlistElements pIdentifierlist;
	private final StructtypeElements pStructtype;
	private final FielddeclElements pFielddecl;
	private final EmbeddedfieldElements pEmbeddedfield;
	private final TypelitElements pTypelit;
	private final ArraytypeElements pArraytype;
	private final TagElements pTag;
	private final TypenameElements pTypename;
	private final PackagenameElements pPackagename;
	private final String_litElements pString_lit;
	private final Raw_string_litElements pRaw_string_lit;
	private final Interpreted_string_litElements pInterpreted_string_lit;
	private final Rune_litElements pRune_lit;
	private final Int_litElements pInt_lit;
	private final Hex_litElements pHex_lit;
	private final Imaginary_litElements pImaginary_lit;
	private final Float_litElements pFloat_lit;
	private final ExponentElements pExponent;
	private final DecimalsElements pDecimals;
	private final Byte_valueElements pByte_value;
	private final Hex_byte_valueElements pHex_byte_value;
	private final Octal_byte_valueElements pOctal_byte_value;
	private final Unicode_valueElements pUnicode_value;
	private final Big_u_valueElements pBig_u_value;
	private final Little_u_valueElements pLittle_u_value;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tA_F;
	private final TerminalRule tLETTER;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tESCAPED_CHAR;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tBINARY_OP;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tMUL_OP;
	private final TerminalRule tUNARY_OP;
	private final TerminalRule tASSIGN_OP;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSourcefile = new SourcefileElements();
		this.pImportdecl = new ImportdeclElements();
		this.pImportspec = new ImportspecElements();
		this.pImportpath = new ImportpathElements();
		this.pPackageclause = new PackageclauseElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionaux = new ExpressionauxElements();
		this.pUnaryexpr = new UnaryexprElements();
		this.pPrimaryexpr = new PrimaryexprElements();
		this.pOperand = new OperandElements();
		this.pType = new TypeElements();
		this.pTypeaux = new TypeauxElements();
		this.pMethodexpr = new MethodexprElements();
		this.pConversion = new ConversionElements();
		this.pPrimaryexpraux = new PrimaryexprauxElements();
		this.pArguments = new ArgumentsElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pTypeassertion = new TypeassertionElements();
		this.pSelector = new SelectorElements();
		this.pCompositelit = new CompositelitElements();
		this.pLiteraltype = new LiteraltypeElements();
		this.pLiteralvalue = new LiteralvalueElements();
		this.pElementlist = new ElementlistElements();
		this.pKeyedelement = new KeyedelementElements();
		this.pKey = new KeyElements();
		this.pElement = new ElementElements();
		this.pFunctionlit = new FunctionlitElements();
		this.pStatement = new StatementElements();
		this.pDeclaration = new DeclarationElements();
		this.pVardecl = new VardeclElements();
		this.pVarspec = new VarspecElements();
		this.pTypedecl = new TypedeclElements();
		this.pTypespec = new TypespecElements();
		this.pTypespecaux = new TypespecauxElements();
		this.pTypedef = new TypedefElements();
		this.pAliasdecl = new AliasdeclElements();
		this.pTopleveldecl = new TopleveldeclElements();
		this.pMethoddecl = new MethoddeclElements();
		this.pReceiver = new ReceiverElements();
		this.pFunctiondecl = new FunctiondeclElements();
		this.pFunctionname = new FunctionnameElements();
		this.pConstdecl = new ConstdeclElements();
		this.pConstspec = new ConstspecElements();
		this.pSimplestmt = new SimplestmtElements();
		this.pShortvardecl = new ShortvardeclElements();
		this.pDeferstmt = new DeferstmtElements();
		this.pGotostmt = new GotostmtElements();
		this.pContinuestmt = new ContinuestmtElements();
		this.pBreakstmt = new BreakstmtElements();
		this.pReturnstmt = new ReturnstmtElements();
		this.pSelectstmt = new SelectstmtElements();
		this.pCommclause = new CommclauseElements();
		this.pCommcase = new CommcaseElements();
		this.pSendstmt = new SendstmtElements();
		this.pSendstmtaux = new SendstmtauxElements();
		this.pRecvstmt = new RecvstmtElements();
		this.pExpressionlist = new ExpressionlistElements();
		this.pPostexpressionlist = new PostexpressionlistElements();
		this.pRecvexpr = new RecvexprElements();
		this.pGotstmt = new GotstmtElements();
		this.pForstmt = new ForstmtElements();
		this.pRangeclause = new RangeclauseElements();
		this.pForclause = new ForclauseElements();
		this.pSwitchstmt = new SwitchstmtElements();
		this.pExprswitchstmt = new ExprswitchstmtElements();
		this.pExprcaseclause = new ExprcaseclauseElements();
		this.pExprswitchcase = new ExprswitchcaseElements();
		this.pTypeswitchstmt = new TypeswitchstmtElements();
		this.pTypeswitchguard = new TypeswitchguardElements();
		this.pTypecaseclause = new TypecaseclauseElements();
		this.pTypeswitchcase = new TypeswitchcaseElements();
		this.pTypelist = new TypelistElements();
		this.pIfstmt = new IfstmtElements();
		this.pAssignmentaux = new AssignmentauxElements();
		this.pIncdecstmtaux = new IncdecstmtauxElements();
		this.pLabeledstmt = new LabeledstmtElements();
		this.pLabel = new LabelElements();
		this.pFallthroughstmt = new FallthroughstmtElements();
		this.pBlock = new BlockElements();
		this.pStatementlist = new StatementlistElements();
		this.pFunctionbody = new FunctionbodyElements();
		this.pFieldname = new FieldnameElements();
		this.pLiteral = new LiteralElements();
		this.pBasiclit = new BasiclitElements();
		this.pQualified_ident = new Qualified_identElements();
		this.pSlicetype = new SlicetypeElements();
		this.pPointertype = new PointertypeElements();
		this.pBasetype = new BasetypeElements();
		this.pChanneltype = new ChanneltypeElements();
		this.pMaptype = new MaptypeElements();
		this.pKeytype = new KeytypeElements();
		this.pElementtype = new ElementtypeElements();
		this.pInterfacetype = new InterfacetypeElements();
		this.pMethodspec = new MethodspecElements();
		this.pMethodname = new MethodnameElements();
		this.pInterfacetypename = new InterfacetypenameElements();
		this.pFunctiontype = new FunctiontypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterlist = new ParameterlistElements();
		this.pParameterdecl = new ParameterdeclElements();
		this.pIdentifierlist = new IdentifierlistElements();
		this.pStructtype = new StructtypeElements();
		this.pFielddecl = new FielddeclElements();
		this.pEmbeddedfield = new EmbeddedfieldElements();
		this.pTypelit = new TypelitElements();
		this.pArraytype = new ArraytypeElements();
		this.pTag = new TagElements();
		this.pTypename = new TypenameElements();
		this.pPackagename = new PackagenameElements();
		this.pString_lit = new String_litElements();
		this.pRaw_string_lit = new Raw_string_litElements();
		this.pInterpreted_string_lit = new Interpreted_string_litElements();
		this.pRune_lit = new Rune_litElements();
		this.pInt_lit = new Int_litElements();
		this.pHex_lit = new Hex_litElements();
		this.pImaginary_lit = new Imaginary_litElements();
		this.pFloat_lit = new Float_litElements();
		this.pExponent = new ExponentElements();
		this.pDecimals = new DecimalsElements();
		this.pByte_value = new Byte_valueElements();
		this.pHex_byte_value = new Hex_byte_valueElements();
		this.pOctal_byte_value = new Octal_byte_valueElements();
		this.pUnicode_value = new Unicode_valueElements();
		this.pBig_u_value = new Big_u_valueElements();
		this.pLittle_u_value = new Little_u_valueElements();
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IDENTIFIER");
		this.tA_F = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.A_F");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HEX_DIGIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OCTAL_DIGIT");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ESCAPED_CHAR");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECIMAL_DIGIT");
		this.tBINARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BINARY_OP");
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ADD_OP");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MUL_OP");
		this.tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNARY_OP");
		this.tASSIGN_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ASSIGN_OP");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//sourcefile:
	//	packageclause+=packageclause ";" (importdecl+=importdecl ";")* (topleveldecl+=topleveldecl ";")*;
	public SourcefileElements getSourcefileAccess() {
		return pSourcefile;
	}
	
	public ParserRule getSourcefileRule() {
		return getSourcefileAccess().getRule();
	}
	
	//importdecl:
	//	"import" (importspec | "(" (importspec ";")* "}");
	public ImportdeclElements getImportdeclAccess() {
		return pImportdecl;
	}
	
	public ParserRule getImportdeclRule() {
		return getImportdeclAccess().getRule();
	}
	
	//importspec:
	//	("." | packagename)? importpath;
	public ImportspecElements getImportspecAccess() {
		return pImportspec;
	}
	
	public ParserRule getImportspecRule() {
		return getImportspecAccess().getRule();
	}
	
	//importpath:
	//	string_lit;
	public ImportpathElements getImportpathAccess() {
		return pImportpath;
	}
	
	public ParserRule getImportpathRule() {
		return getImportpathAccess().getRule();
	}
	
	//packageclause:
	//	"package" packagename;
	public PackageclauseElements getPackageclauseAccess() {
		return pPackageclause;
	}
	
	public ParserRule getPackageclauseRule() {
		return getPackageclauseAccess().getRule();
	}
	
	//expression:
	//	unaryexpr expressionaux+=expressionaux;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//expressionaux:
	//	expression+=expression BINARY_OP=BINARY_OP expression+=expression;
	public ExpressionauxElements getExpressionauxAccess() {
		return pExpressionaux;
	}
	
	public ParserRule getExpressionauxRule() {
		return getExpressionauxAccess().getRule();
	}
	
	//unaryexpr:
	//	primaryexpr=primaryexpr | UNARY_OP=UNARY_OP unaryexpr=unaryexpr;
	public UnaryexprElements getUnaryexprAccess() {
		return pUnaryexpr;
	}
	
	public ParserRule getUnaryexprRule() {
		return getUnaryexprAccess().getRule();
	}
	
	//primaryexpr:
	//	=> operand=operand primaryexpraux=primaryexpraux | type=typeaux (conversion=conversion | methodexpr=methodexpr)
	//	primaryexpraux=primaryexpraux | typename=typename primaryexpraux=primaryexpraux;
	public PrimaryexprElements getPrimaryexprAccess() {
		return pPrimaryexpr;
	}
	
	public ParserRule getPrimaryexprRule() {
		return getPrimaryexprAccess().getRule();
	}
	
	//operand:
	//	=> ("(" expression=expression ")") | literal=literal;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//type:
	//	"(" type=type ")" | typename=typename | typelit=typelit;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//typeaux:
	//	"(" type=type ")" | typelit=typelit;
	public TypeauxElements getTypeauxAccess() {
		return pTypeaux;
	}
	
	public ParserRule getTypeauxRule() {
		return getTypeauxAccess().getRule();
	}
	
	//methodexpr:
	//	"." methodname=methodname;
	public MethodexprElements getMethodexprAccess() {
		return pMethodexpr;
	}
	
	public ParserRule getMethodexprRule() {
		return getMethodexprAccess().getRule();
	}
	
	//conversion:
	//	"(" expression=expression ","? ")";
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//primaryexpraux:
	//	"." (selector=selector | typeassertion=typeassertion) primaryexpraux=primaryexpraux |
	//	"[" (=> slice=slice | index=index) primaryexpraux=primaryexpraux | arguments=arguments primaryexpraux=primaryexpraux |
	//	{primaryexpraux} WS;
	public PrimaryexprauxElements getPrimaryexprauxAccess() {
		return pPrimaryexpraux;
	}
	
	public ParserRule getPrimaryexprauxRule() {
		return getPrimaryexprauxAccess().getRule();
	}
	
	//arguments:
	//	{arguments} "(" ((expressionlist=expressionlist | => type=type ("," expressionlist=expressionlist)?) "..."? ","?)?
	//	")";
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//index:
	//	expression "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//slice:
	//	{slice} expression+=expression? ":" (=> (expression+=expression ":" expression+=expression) | expression+=expression?)
	//	"]";
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//typeassertion:
	//	"(" type ")";
	public TypeassertionElements getTypeassertionAccess() {
		return pTypeassertion;
	}
	
	public ParserRule getTypeassertionRule() {
		return getTypeassertionAccess().getRule();
	}
	
	//selector:
	//	IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//compositelit:
	//	literaltype=literaltype literalvalue=literalvalue;
	public CompositelitElements getCompositelitAccess() {
		return pCompositelit;
	}
	
	public ParserRule getCompositelitRule() {
		return getCompositelitAccess().getRule();
	}
	
	//literaltype:
	//	structtype=structtype | "[" "..." "]" elementtype=elementtype | slicetype=slicetype | maptype=maptype |
	//	typename=typename;
	public LiteraltypeElements getLiteraltypeAccess() {
		return pLiteraltype;
	}
	
	public ParserRule getLiteraltypeRule() {
		return getLiteraltypeAccess().getRule();
	}
	
	//literalvalue:
	//	{literalvalue} "{" (elementlist=elementlist ","?)? "}";
	public LiteralvalueElements getLiteralvalueAccess() {
		return pLiteralvalue;
	}
	
	public ParserRule getLiteralvalueRule() {
		return getLiteralvalueAccess().getRule();
	}
	
	//elementlist:
	//	keyedelement ("," keyedelement+=keyedelement)*;
	public ElementlistElements getElementlistAccess() {
		return pElementlist;
	}
	
	public ParserRule getElementlistRule() {
		return getElementlistAccess().getRule();
	}
	
	//keyedelement:
	//	(=> key ":")? element=element;
	public KeyedelementElements getKeyedelementAccess() {
		return pKeyedelement;
	}
	
	public ParserRule getKeyedelementRule() {
		return getKeyedelementAccess().getRule();
	}
	
	//key:
	//	{key} => expression=expression | IDENTIFIER=IDENTIFIER | literalvalue=literalvalue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//element:
	//	expression | literalvalue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//functionlit:
	//	"func" signature=signature functionbody=functionbody;
	public FunctionlitElements getFunctionlitAccess() {
		return pFunctionlit;
	}
	
	public ParserRule getFunctionlitRule() {
		return getFunctionlitAccess().getRule();
	}
	
	//statement:
	//	=> simplestmt=simplestmt | declaration=declaration | labeledstmt=labeledstmt | gotstmt=gotstmt | returnstmt=returnstmt
	//	| breakstmt=breakstmt | continuestmt=continuestmt | gotostmt=gotostmt | fallthroughstmt=fallthroughstmt | block=block
	//	| ifstmt=ifstmt | switchstmt=switchstmt | selectstmt=selectstmt | forstmt=forstmt | deferstmt=deferstmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//declaration:
	//	constdecl=constdecl | typedecl=typedecl | vardecl=vardecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//vardecl:
	//	{vardecl} "var" (varspec+=varspec | "(" (varspec+=varspec ";")* ")");
	public VardeclElements getVardeclAccess() {
		return pVardecl;
	}
	
	public ParserRule getVardeclRule() {
		return getVardeclAccess().getRule();
	}
	
	//varspec:
	//	identifierlist=identifierlist (type=type ("=" expressionlist=expressionlist) | "=" expressionlist=expressionlist);
	public VarspecElements getVarspecAccess() {
		return pVarspec;
	}
	
	public ParserRule getVarspecRule() {
		return getVarspecAccess().getRule();
	}
	
	//typedecl:
	//	{typedecl} "type" (typespec+=typespec | "(" (typespec+=typespec ";")* ")");
	public TypedeclElements getTypedeclAccess() {
		return pTypedecl;
	}
	
	public ParserRule getTypedeclRule() {
		return getTypedeclAccess().getRule();
	}
	
	//typespec:
	//	IDENTIFIER=IDENTIFIER typespecaux=typespecaux;
	public TypespecElements getTypespecAccess() {
		return pTypespec;
	}
	
	public ParserRule getTypespecRule() {
		return getTypespecAccess().getRule();
	}
	
	//typespecaux:
	//	typedef | aliasdecl;
	public TypespecauxElements getTypespecauxAccess() {
		return pTypespecaux;
	}
	
	public ParserRule getTypespecauxRule() {
		return getTypespecauxAccess().getRule();
	}
	
	//typedef:
	//	type=type;
	public TypedefElements getTypedefAccess() {
		return pTypedef;
	}
	
	public ParserRule getTypedefRule() {
		return getTypedefAccess().getRule();
	}
	
	//aliasdecl:
	//	"=" type=type;
	public AliasdeclElements getAliasdeclAccess() {
		return pAliasdecl;
	}
	
	public ParserRule getAliasdeclRule() {
		return getAliasdeclAccess().getRule();
	}
	
	//topleveldecl:
	//	declaration | functiondecl=functiondecl | methoddecl=methoddecl;
	public TopleveldeclElements getTopleveldeclAccess() {
		return pTopleveldecl;
	}
	
	public ParserRule getTopleveldeclRule() {
		return getTopleveldeclAccess().getRule();
	}
	
	//methoddecl:
	//	"func" receiver=receiver methodname=methodname signature=signature functionbody=functionbody?;
	public MethoddeclElements getMethoddeclAccess() {
		return pMethoddecl;
	}
	
	public ParserRule getMethoddeclRule() {
		return getMethoddeclAccess().getRule();
	}
	
	//receiver:
	//	parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//functiondecl:
	//	"func" functionname=functionname signature=signature functionbody=functionbody?;
	public FunctiondeclElements getFunctiondeclAccess() {
		return pFunctiondecl;
	}
	
	public ParserRule getFunctiondeclRule() {
		return getFunctiondeclAccess().getRule();
	}
	
	//functionname:
	//	IDENTIFIER;
	public FunctionnameElements getFunctionnameAccess() {
		return pFunctionname;
	}
	
	public ParserRule getFunctionnameRule() {
		return getFunctionnameAccess().getRule();
	}
	
	//constdecl:
	//	{constdecl} "const" (constspec+=constspec | "(" (constspec+=constspec ";")* ")");
	public ConstdeclElements getConstdeclAccess() {
		return pConstdecl;
	}
	
	public ParserRule getConstdeclRule() {
		return getConstdeclAccess().getRule();
	}
	
	//constspec:
	//	identifierlist=identifierlist (type=type? "=" expressionlist=expressionlist)?;
	public ConstspecElements getConstspecAccess() {
		return pConstspec;
	}
	
	public ParserRule getConstspecRule() {
		return getConstspecAccess().getRule();
	}
	
	//simplestmt:
	//	expression=expression (=> (sendstmt=sendstmtaux) | incdecstmt=incdecstmtaux | assignment=assignmentaux)? |
	//	shortvardecl=shortvardecl;
	public SimplestmtElements getSimplestmtAccess() {
		return pSimplestmt;
	}
	
	public ParserRule getSimplestmtRule() {
		return getSimplestmtAccess().getRule();
	}
	
	//shortvardecl:
	//	identifierlist=identifierlist ":=" expressionlist=expressionlist;
	public ShortvardeclElements getShortvardeclAccess() {
		return pShortvardecl;
	}
	
	public ParserRule getShortvardeclRule() {
		return getShortvardeclAccess().getRule();
	}
	
	//deferstmt:
	//	"defer" expression;
	public DeferstmtElements getDeferstmtAccess() {
		return pDeferstmt;
	}
	
	public ParserRule getDeferstmtRule() {
		return getDeferstmtAccess().getRule();
	}
	
	//gotostmt:
	//	"goto" label;
	public GotostmtElements getGotostmtAccess() {
		return pGotostmt;
	}
	
	public ParserRule getGotostmtRule() {
		return getGotostmtAccess().getRule();
	}
	
	//continuestmt:
	//	"continue" label?;
	public ContinuestmtElements getContinuestmtAccess() {
		return pContinuestmt;
	}
	
	public ParserRule getContinuestmtRule() {
		return getContinuestmtAccess().getRule();
	}
	
	//breakstmt:
	//	"break" label?;
	public BreakstmtElements getBreakstmtAccess() {
		return pBreakstmt;
	}
	
	public ParserRule getBreakstmtRule() {
		return getBreakstmtAccess().getRule();
	}
	
	//returnstmt:
	//	{returnstmt} "return" expressionlist=expressionlist?;
	public ReturnstmtElements getReturnstmtAccess() {
		return pReturnstmt;
	}
	
	public ParserRule getReturnstmtRule() {
		return getReturnstmtAccess().getRule();
	}
	
	//selectstmt:
	//	{selectstmt} "select" "{" commclause+=commclause* "}";
	public SelectstmtElements getSelectstmtAccess() {
		return pSelectstmt;
	}
	
	public ParserRule getSelectstmtRule() {
		return getSelectstmtAccess().getRule();
	}
	
	//commclause:
	//	commcase ":" statementlist=statementlist;
	public CommclauseElements getCommclauseAccess() {
		return pCommclause;
	}
	
	public ParserRule getCommclauseRule() {
		return getCommclauseAccess().getRule();
	}
	
	//commcase:
	//	"case" (sendstmt=sendstmt | => recvstmt=recvstmt) | {commcase} "default";
	public CommcaseElements getCommcaseAccess() {
		return pCommcase;
	}
	
	public ParserRule getCommcaseRule() {
		return getCommcaseAccess().getRule();
	}
	
	//sendstmt:
	//	expression+=expression "<-" expression+=expression;
	public SendstmtElements getSendstmtAccess() {
		return pSendstmt;
	}
	
	public ParserRule getSendstmtRule() {
		return getSendstmtAccess().getRule();
	}
	
	//sendstmtaux:
	//	=> ("<-" expression+=expression);
	public SendstmtauxElements getSendstmtauxAccess() {
		return pSendstmtaux;
	}
	
	public ParserRule getSendstmtauxRule() {
		return getSendstmtauxAccess().getRule();
	}
	
	//recvstmt:
	//	(expressionlist "=" | identifierlist=identifierlist ":=") recvexpr=recvexpr;
	public RecvstmtElements getRecvstmtAccess() {
		return pRecvstmt;
	}
	
	public ParserRule getRecvstmtRule() {
		return getRecvstmtAccess().getRule();
	}
	
	//expressionlist:
	//	expression ("," expression+=expression)*;
	public ExpressionlistElements getExpressionlistAccess() {
		return pExpressionlist;
	}
	
	public ParserRule getExpressionlistRule() {
		return getExpressionlistAccess().getRule();
	}
	
	//postexpressionlist:
	//	{postexpressionlist} ("," expression+=expression)*;
	public PostexpressionlistElements getPostexpressionlistAccess() {
		return pPostexpressionlist;
	}
	
	public ParserRule getPostexpressionlistRule() {
		return getPostexpressionlistAccess().getRule();
	}
	
	//recvexpr:
	//	expression;
	public RecvexprElements getRecvexprAccess() {
		return pRecvexpr;
	}
	
	public ParserRule getRecvexprRule() {
		return getRecvexprAccess().getRule();
	}
	
	//gotstmt:
	//	"go" expression;
	public GotstmtElements getGotstmtAccess() {
		return pGotstmt;
	}
	
	public ParserRule getGotstmtRule() {
		return getGotstmtAccess().getRule();
	}
	
	//forstmt:
	//	"for" (=> forclause | expression rangeclause=rangeclause?)? block=block;
	public ForstmtElements getForstmtAccess() {
		return pForstmt;
	}
	
	public ParserRule getForstmtRule() {
		return getForstmtAccess().getRule();
	}
	
	//rangeclause:
	//	(expressionlist=postexpressionlist "=" | identifierlist=identifierlist ":=")? "range" expression=expression;
	public RangeclauseElements getRangeclauseAccess() {
		return pRangeclause;
	}
	
	public ParserRule getRangeclauseRule() {
		return getRangeclauseAccess().getRule();
	}
	
	//forclause:
	//	{forclause} simplestmt+=simplestmt* ";" expression=expression? ";" simplestmt+=simplestmt?;
	public ForclauseElements getForclauseAccess() {
		return pForclause;
	}
	
	public ParserRule getForclauseRule() {
		return getForclauseAccess().getRule();
	}
	
	//switchstmt:
	//	exprswitchstmt=exprswitchstmt | => typeswitchstmt=typeswitchstmt;
	public SwitchstmtElements getSwitchstmtAccess() {
		return pSwitchstmt;
	}
	
	public ParserRule getSwitchstmtRule() {
		return getSwitchstmtAccess().getRule();
	}
	
	//exprswitchstmt:
	//	{exprswitchstmt} "switch" (=> simplestmt=simplestmt ";")? expression=expression? "{" exprcaseclause+=exprcaseclause*
	//	"}";
	public ExprswitchstmtElements getExprswitchstmtAccess() {
		return pExprswitchstmt;
	}
	
	public ParserRule getExprswitchstmtRule() {
		return getExprswitchstmtAccess().getRule();
	}
	
	//exprcaseclause:
	//	exprswitchcase=exprswitchcase ":" statementlist=statementlist;
	public ExprcaseclauseElements getExprcaseclauseAccess() {
		return pExprcaseclause;
	}
	
	public ParserRule getExprcaseclauseRule() {
		return getExprcaseclauseAccess().getRule();
	}
	
	//exprswitchcase:
	//	"case" expressionlist=expressionlist | {exprswitchcase} "default";
	public ExprswitchcaseElements getExprswitchcaseAccess() {
		return pExprswitchcase;
	}
	
	public ParserRule getExprswitchcaseRule() {
		return getExprswitchcaseAccess().getRule();
	}
	
	//typeswitchstmt:
	//	"switch" (=> simplestmt ";")? typeswitchguard=typeswitchguard "{" typecaseclause+=typecaseclause* "}";
	public TypeswitchstmtElements getTypeswitchstmtAccess() {
		return pTypeswitchstmt;
	}
	
	public ParserRule getTypeswitchstmtRule() {
		return getTypeswitchstmtAccess().getRule();
	}
	
	//typeswitchguard:
	//	(IDENTIFIER=IDENTIFIER ":=")? primaryexpr=primaryexpr "." "(" "type" ")";
	public TypeswitchguardElements getTypeswitchguardAccess() {
		return pTypeswitchguard;
	}
	
	public ParserRule getTypeswitchguardRule() {
		return getTypeswitchguardAccess().getRule();
	}
	
	//typecaseclause:
	//	typeswitchcase=typeswitchcase ":" statementlist=statementlist;
	public TypecaseclauseElements getTypecaseclauseAccess() {
		return pTypecaseclause;
	}
	
	public ParserRule getTypecaseclauseRule() {
		return getTypecaseclauseAccess().getRule();
	}
	
	//typeswitchcase:
	//	"case" typelist=typelist | {typeswitchcase} "default";
	public TypeswitchcaseElements getTypeswitchcaseAccess() {
		return pTypeswitchcase;
	}
	
	public ParserRule getTypeswitchcaseRule() {
		return getTypeswitchcaseAccess().getRule();
	}
	
	//typelist:
	//	{typelist} "type" ("," type+=type)*;
	public TypelistElements getTypelistAccess() {
		return pTypelist;
	}
	
	public ParserRule getTypelistRule() {
		return getTypelistAccess().getRule();
	}
	
	//ifstmt:
	//	"if" (=> simplestmt=simplestmt ";")? expression=expression block+=block ("else" (ifstmt=ifstmt | block+=block))?;
	public IfstmtElements getIfstmtAccess() {
		return pIfstmt;
	}
	
	public ParserRule getIfstmtRule() {
		return getIfstmtAccess().getRule();
	}
	
	//assignmentaux:
	//	postexpressionlist+=postexpressionlist ASSIGN_OP=ASSIGN_OP expressionlist+=expressionlist;
	public AssignmentauxElements getAssignmentauxAccess() {
		return pAssignmentaux;
	}
	
	public ParserRule getAssignmentauxRule() {
		return getAssignmentauxAccess().getRule();
	}
	
	//incdecstmtaux:
	//	"++" | "--";
	public IncdecstmtauxElements getIncdecstmtauxAccess() {
		return pIncdecstmtaux;
	}
	
	public ParserRule getIncdecstmtauxRule() {
		return getIncdecstmtauxAccess().getRule();
	}
	
	//labeledstmt:
	//	label=label "." statement=statement;
	public LabeledstmtElements getLabeledstmtAccess() {
		return pLabeledstmt;
	}
	
	public ParserRule getLabeledstmtRule() {
		return getLabeledstmtAccess().getRule();
	}
	
	//label:
	//	IDENTIFIER;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//fallthroughstmt:
	//	"fallthrough";
	public FallthroughstmtElements getFallthroughstmtAccess() {
		return pFallthroughstmt;
	}
	
	public ParserRule getFallthroughstmtRule() {
		return getFallthroughstmtAccess().getRule();
	}
	
	//block:
	//	"{" statementlist "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//statementlist:
	//	{statementlist} (statement+=statement ";")*;
	public StatementlistElements getStatementlistAccess() {
		return pStatementlist;
	}
	
	public ParserRule getStatementlistRule() {
		return getStatementlistAccess().getRule();
	}
	
	//functionbody:
	//	block;
	public FunctionbodyElements getFunctionbodyAccess() {
		return pFunctionbody;
	}
	
	public ParserRule getFunctionbodyRule() {
		return getFunctionbodyAccess().getRule();
	}
	
	//fieldname:
	//	IDENTIFIER;
	public FieldnameElements getFieldnameAccess() {
		return pFieldname;
	}
	
	public ParserRule getFieldnameRule() {
		return getFieldnameAccess().getRule();
	}
	
	//literal:
	//	basiclit=basiclit | compositelit=compositelit | functionlit=functionlit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//basiclit:
	//	=> int_lit | => float_lit | imaginary_lit | rune_lit | string_lit;
	public BasiclitElements getBasiclitAccess() {
		return pBasiclit;
	}
	
	public ParserRule getBasiclitRule() {
		return getBasiclitAccess().getRule();
	}
	
	//qualified_ident:
	//	"." IDENTIFIER;
	public Qualified_identElements getQualified_identAccess() {
		return pQualified_ident;
	}
	
	public ParserRule getQualified_identRule() {
		return getQualified_identAccess().getRule();
	}
	
	//slicetype:
	//	"[" "]" elementtype;
	public SlicetypeElements getSlicetypeAccess() {
		return pSlicetype;
	}
	
	public ParserRule getSlicetypeRule() {
		return getSlicetypeAccess().getRule();
	}
	
	//pointertype:
	//	"*" basetype;
	public PointertypeElements getPointertypeAccess() {
		return pPointertype;
	}
	
	public ParserRule getPointertypeRule() {
		return getPointertypeAccess().getRule();
	}
	
	//basetype:
	//	type;
	public BasetypeElements getBasetypeAccess() {
		return pBasetype;
	}
	
	public ParserRule getBasetypeRule() {
		return getBasetypeAccess().getRule();
	}
	
	//channeltype:
	//	(=> ("chan" "<-") | "chan" | "<-" "chan") elementtype;
	public ChanneltypeElements getChanneltypeAccess() {
		return pChanneltype;
	}
	
	public ParserRule getChanneltypeRule() {
		return getChanneltypeAccess().getRule();
	}
	
	//maptype:
	//	"map" "[" keytype "]" elementtype=elementtype;
	public MaptypeElements getMaptypeAccess() {
		return pMaptype;
	}
	
	public ParserRule getMaptypeRule() {
		return getMaptypeAccess().getRule();
	}
	
	//keytype:
	//	type;
	public KeytypeElements getKeytypeAccess() {
		return pKeytype;
	}
	
	public ParserRule getKeytypeRule() {
		return getKeytypeAccess().getRule();
	}
	
	//elementtype:
	//	type;
	public ElementtypeElements getElementtypeAccess() {
		return pElementtype;
	}
	
	public ParserRule getElementtypeRule() {
		return getElementtypeAccess().getRule();
	}
	
	//interfacetype:
	//	{interfacetype} "interface" "{" (methodspec+=methodspec ";")* "}";
	public InterfacetypeElements getInterfacetypeAccess() {
		return pInterfacetype;
	}
	
	public ParserRule getInterfacetypeRule() {
		return getInterfacetypeAccess().getRule();
	}
	
	//methodspec:
	//	methodname=methodname signature=signature | interfacetypename=interfacetypename;
	public MethodspecElements getMethodspecAccess() {
		return pMethodspec;
	}
	
	public ParserRule getMethodspecRule() {
		return getMethodspecAccess().getRule();
	}
	
	//methodname:
	//	IDENTIFIER;
	public MethodnameElements getMethodnameAccess() {
		return pMethodname;
	}
	
	public ParserRule getMethodnameRule() {
		return getMethodnameAccess().getRule();
	}
	
	//interfacetypename:
	//	typename;
	public InterfacetypenameElements getInterfacetypenameAccess() {
		return pInterfacetypename;
	}
	
	public ParserRule getInterfacetypenameRule() {
		return getInterfacetypenameAccess().getRule();
	}
	
	//functiontype:
	//	"func" signature;
	public FunctiontypeElements getFunctiontypeAccess() {
		return pFunctiontype;
	}
	
	public ParserRule getFunctiontypeRule() {
		return getFunctiontypeAccess().getRule();
	}
	
	//signature:
	//	parameters=parameters => result=result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//result:
	//	=> type | parameters;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//parameters:
	//	{parameters} "(" (parameterlist=parameterlist ","?)? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//parameterlist:
	//	parameterdecl+=parameterdecl ("," parameterdecl+=parameterdecl)*;
	public ParameterlistElements getParameterlistAccess() {
		return pParameterlist;
	}
	
	public ParserRule getParameterlistRule() {
		return getParameterlistAccess().getRule();
	}
	
	//parameterdecl:
	//	identifierlist=identifierlist? "..."? type=type;
	public ParameterdeclElements getParameterdeclAccess() {
		return pParameterdecl;
	}
	
	public ParserRule getParameterdeclRule() {
		return getParameterdeclAccess().getRule();
	}
	
	//identifierlist:
	//	IDENTIFIER ("," IDENTIFIER)*;
	public IdentifierlistElements getIdentifierlistAccess() {
		return pIdentifierlist;
	}
	
	public ParserRule getIdentifierlistRule() {
		return getIdentifierlistAccess().getRule();
	}
	
	//structtype:
	//	{structtype} "struct" "{" (fielddecl+=fielddecl ";")* "}";
	public StructtypeElements getStructtypeAccess() {
		return pStructtype;
	}
	
	public ParserRule getStructtypeRule() {
		return getStructtypeAccess().getRule();
	}
	
	//fielddecl:
	//	(identifierlist=identifierlist type=type | embeddedfield=embeddedfield) tag=tag?;
	public FielddeclElements getFielddeclAccess() {
		return pFielddecl;
	}
	
	public ParserRule getFielddeclRule() {
		return getFielddeclAccess().getRule();
	}
	
	//embeddedfield:
	//	"*"? typename;
	public EmbeddedfieldElements getEmbeddedfieldAccess() {
		return pEmbeddedfield;
	}
	
	public ParserRule getEmbeddedfieldRule() {
		return getEmbeddedfieldAccess().getRule();
	}
	
	//typelit:
	//	arraytype=arraytype | structtype=structtype | pointertype=pointertype | functiontype=functiontype |
	//	interfacetype=interfacetype | slicetype=slicetype | maptype=maptype | channeltype=channeltype;
	public TypelitElements getTypelitAccess() {
		return pTypelit;
	}
	
	public ParserRule getTypelitRule() {
		return getTypelitAccess().getRule();
	}
	
	//arraytype:
	//	=> ("[" expression=expression "]") elementtype=elementtype;
	public ArraytypeElements getArraytypeAccess() {
		return pArraytype;
	}
	
	public ParserRule getArraytypeRule() {
		return getArraytypeAccess().getRule();
	}
	
	//tag:
	//	string_lit;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//typename:
	//	=> (packagename qualified_ident) | packagename;
	public TypenameElements getTypenameAccess() {
		return pTypename;
	}
	
	public ParserRule getTypenameRule() {
		return getTypenameAccess().getRule();
	}
	
	//packagename:
	//	IDENTIFIER;
	public PackagenameElements getPackagenameAccess() {
		return pPackagename;
	}
	
	public ParserRule getPackagenameRule() {
		return getPackagenameAccess().getRule();
	}
	
	//string_lit:
	//	raw_string_lit | interpreted_string_lit;
	public String_litElements getString_litAccess() {
		return pString_lit;
	}
	
	public ParserRule getString_litRule() {
		return getString_litAccess().getRule();
	}
	
	//raw_string_lit:
	//	"`" (LETTER | DECIMAL_DIGIT | "\\n")* "`";
	public Raw_string_litElements getRaw_string_litAccess() {
		return pRaw_string_lit;
	}
	
	public ParserRule getRaw_string_litRule() {
		return getRaw_string_litAccess().getRule();
	}
	
	//interpreted_string_lit:
	//	"\"" (unicode_value | byte_value)* "\"";
	public Interpreted_string_litElements getInterpreted_string_litAccess() {
		return pInterpreted_string_lit;
	}
	
	public ParserRule getInterpreted_string_litRule() {
		return getInterpreted_string_litAccess().getRule();
	}
	
	//rune_lit:
	//	"'" (unicode_value | byte_value) "'";
	public Rune_litElements getRune_litAccess() {
		return pRune_lit;
	}
	
	public ParserRule getRune_litRule() {
		return getRune_litAccess().getRule();
	}
	
	//int_lit:
	//	(DECIMAL_DIGIT | hex_lit)*;
	public Int_litElements getInt_litAccess() {
		return pInt_lit;
	}
	
	public ParserRule getInt_litRule() {
		return getInt_litAccess().getRule();
	}
	
	//hex_lit:
	//	"0" ("x" | "X") HEX_DIGIT+;
	public Hex_litElements getHex_litAccess() {
		return pHex_lit;
	}
	
	public ParserRule getHex_litRule() {
		return getHex_litAccess().getRule();
	}
	
	//imaginary_lit:
	//	(decimals | float_lit) "i";
	public Imaginary_litElements getImaginary_litAccess() {
		return pImaginary_lit;
	}
	
	public ParserRule getImaginary_litRule() {
		return getImaginary_litAccess().getRule();
	}
	
	//float_lit:
	//	decimals "." decimals? exponent? | decimals exponent | "." decimals exponent?;
	public Float_litElements getFloat_litAccess() {
		return pFloat_lit;
	}
	
	public ParserRule getFloat_litRule() {
		return getFloat_litAccess().getRule();
	}
	
	//exponent:
	//	("e" | "E") ("+" | "-")? decimals;
	public ExponentElements getExponentAccess() {
		return pExponent;
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}
	
	//decimals:
	//	DECIMAL_DIGIT+;
	public DecimalsElements getDecimalsAccess() {
		return pDecimals;
	}
	
	public ParserRule getDecimalsRule() {
		return getDecimalsAccess().getRule();
	}
	
	//byte_value:
	//	octal_byte_value | hex_byte_value;
	public Byte_valueElements getByte_valueAccess() {
		return pByte_value;
	}
	
	public ParserRule getByte_valueRule() {
		return getByte_valueAccess().getRule();
	}
	
	//hex_byte_value:
	//	'\\' "x" HEX_DIGIT HEX_DIGIT;
	public Hex_byte_valueElements getHex_byte_valueAccess() {
		return pHex_byte_value;
	}
	
	public ParserRule getHex_byte_valueRule() {
		return getHex_byte_valueAccess().getRule();
	}
	
	//octal_byte_value:
	//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public Octal_byte_valueElements getOctal_byte_valueAccess() {
		return pOctal_byte_value;
	}
	
	public ParserRule getOctal_byte_valueRule() {
		return getOctal_byte_valueAccess().getRule();
	}
	
	//unicode_value:
	//	(LETTER | DECIMAL_DIGIT) | little_u_value | big_u_value | ESCAPED_CHAR;
	public Unicode_valueElements getUnicode_valueAccess() {
		return pUnicode_value;
	}
	
	public ParserRule getUnicode_valueRule() {
		return getUnicode_valueAccess().getRule();
	}
	
	//big_u_value:
	//	"\\" "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public Big_u_valueElements getBig_u_valueAccess() {
		return pBig_u_value;
	}
	
	public ParserRule getBig_u_valueRule() {
		return getBig_u_valueAccess().getRule();
	}
	
	//little_u_value:
	//	"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public Little_u_valueElements getLittle_u_valueAccess() {
		return pLittle_u_value;
	}
	
	public ParserRule getLittle_u_valueRule() {
		return getLittle_u_valueAccess().getRule();
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | DECIMAL_DIGIT)*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal A_F:
	//	"A".."F" | "a".."f";
	public TerminalRule getA_FRule() {
		return tA_F;
	}
	
	//terminal LETTER:
	//	A_F | 'g'..'z' | 'G'..'Z' | "_";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal HEX_DIGIT:
	//	DECIMAL_DIGIT | A_F;
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal OCTAL_DIGIT:
	//	'0'..'7';
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal ESCAPED_CHAR:
	//	"\\" ("a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "\'" | "\"");
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//terminal DECIMAL_DIGIT:
	//	OCTAL_DIGIT | '8' | '9';
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal BINARY_OP:
	//	"||" | "&&" | REL_OP | ADD_OP | MUL_OP;
	public TerminalRule getBINARY_OPRule() {
		return tBINARY_OP;
	}
	
	//terminal REL_OP:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal ADD_OP:
	//	"+" | "-" | "|" | "^";
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal MUL_OP:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	//terminal UNARY_OP:
	//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
	public TerminalRule getUNARY_OPRule() {
		return tUNARY_OP;
	}
	
	//terminal ASSIGN_OP:
	//	(ADD_OP | MUL_OP)? "=";
	public TerminalRule getASSIGN_OPRule() {
		return tASSIGN_OP;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
