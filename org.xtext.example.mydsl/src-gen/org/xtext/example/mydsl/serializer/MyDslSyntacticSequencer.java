/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_arguments_CommaKeyword_2_2_q;
	protected AbstractElementAlias match_arguments_FullStopFullStopFullStopKeyword_2_1_q;
	protected AbstractElementAlias match_channeltype_ChanKeyword_0_1_or___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1___or___LessThanSignHyphenMinusKeyword_0_2_0_ChanKeyword_0_2_1__;
	protected AbstractElementAlias match_conversion_CommaKeyword_3_q;
	protected AbstractElementAlias match_literalvalue_CommaKeyword_2_1_q;
	protected AbstractElementAlias match_parameterdecl_FullStopFullStopFullStopKeyword_1_q;
	protected AbstractElementAlias match_parameters_CommaKeyword_2_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_arguments_CommaKeyword_2_2_q = new TokenAlias(false, true, grammarAccess.getArgumentsAccess().getCommaKeyword_2_2());
		match_arguments_FullStopFullStopFullStopKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_2_1());
		match_channeltype_ChanKeyword_0_1_or___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1___or___LessThanSignHyphenMinusKeyword_0_2_0_ChanKeyword_0_2_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChanneltypeAccess().getChanKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getChanneltypeAccess().getLessThanSignHyphenMinusKeyword_0_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChanneltypeAccess().getLessThanSignHyphenMinusKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getChanneltypeAccess().getChanKeyword_0_2_1())), new TokenAlias(false, false, grammarAccess.getChanneltypeAccess().getChanKeyword_0_1()));
		match_conversion_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getConversionAccess().getCommaKeyword_3());
		match_literalvalue_CommaKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getLiteralvalueAccess().getCommaKeyword_2_1());
		match_parameterdecl_FullStopFullStopFullStopKeyword_1_q = new TokenAlias(false, true, grammarAccess.getParameterdeclAccess().getFullStopFullStopFullStopKeyword_1());
		match_parameters_CommaKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getParametersAccess().getCommaKeyword_2_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_arguments_CommaKeyword_2_2_q.equals(syntax))
				emit_arguments_CommaKeyword_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_arguments_FullStopFullStopFullStopKeyword_2_1_q.equals(syntax))
				emit_arguments_FullStopFullStopFullStopKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_channeltype_ChanKeyword_0_1_or___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1___or___LessThanSignHyphenMinusKeyword_0_2_0_ChanKeyword_0_2_1__.equals(syntax))
				emit_channeltype_ChanKeyword_0_1_or___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1___or___LessThanSignHyphenMinusKeyword_0_2_0_ChanKeyword_0_2_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_conversion_CommaKeyword_3_q.equals(syntax))
				emit_conversion_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_literalvalue_CommaKeyword_2_1_q.equals(syntax))
				emit_literalvalue_CommaKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_parameterdecl_FullStopFullStopFullStopKeyword_1_q.equals(syntax))
				emit_parameterdecl_FullStopFullStopFullStopKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_parameters_CommaKeyword_2_1_q.equals(syntax))
				emit_parameters_CommaKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressionlist=expressionlist '...'? (ambiguity) ')' (rule end)
	 *     type=type '...'? (ambiguity) ')' (rule end)
	 */
	protected void emit_arguments_CommaKeyword_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '...'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressionlist=expressionlist (ambiguity) ','? ')' (rule end)
	 *     type=type (ambiguity) ','? ')' (rule end)
	 */
	protected void emit_arguments_FullStopFullStopFullStopKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('chan' '<-') | 'chan' | ('<-' 'chan')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' type=type
	 *     (rule start) (ambiguity) typelit=typelit
	 *     (rule start) (ambiguity) typename=typename
	 */
	protected void emit_channeltype_ChanKeyword_0_1_or___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1___or___LessThanSignHyphenMinusKeyword_0_2_0_ChanKeyword_0_2_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=expression (ambiguity) ')' (rule end)
	 */
	protected void emit_conversion_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     elementlist=elementlist (ambiguity) '}' (rule end)
	 */
	protected void emit_literalvalue_CommaKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '...'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) type=type
	 *     identifierlist=identifierlist (ambiguity) type=type
	 */
	protected void emit_parameterdecl_FullStopFullStopFullStopKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameterlist=parameterlist (ambiguity) ')' (rule end)
	 */
	protected void emit_parameters_CommaKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
